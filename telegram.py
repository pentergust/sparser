"""
Telegram –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ SParser.

Author: Milinuri Nirvalen
Ver: 1.9.1 (sp v5.1)

–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è BotFather:
sc - –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
updates - –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
counter - –°—á—ë—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
set_class - –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å
help - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
"""

from sp.filters import Filters
from sp.filters import parse_filters
from sp.filters import construct_filters
from sp.spm import SPMessages
from sp.spm import send_update
from sp.utils import load_file

from pathlib import Path
from typing import Optional

from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from loguru import logger


API_TOKEN = load_file(Path("sp_data/token.json"),
                      {"token": "YOUR TG API TOKEN"})["token"]
bot = Bot(API_TOKEN)
dp = Dispatcher(bot)
logger.add("sp_data/telegram.log")
days_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞",
              "—Å—É–±–±–æ—Ç–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è"]


# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# ================

HOME_MESSAGE = """üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
-- 7–≤ 6–∞
-- —É—Ä–æ–∫–∏ 6–∞ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å—Ä
-- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è 8–±
-- 312 –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –ø—è—Ç–Ω–∏—Ü—É
-- —Ö–∏–º–∏—è 228 6–∞ –≤—Ç–æ—Ä–Ω–∏–∫

üè´ –í –∑–∞–ø—Ä–æ—Å–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
-- –ö–ª–∞—Å—Å: –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
-- –î–Ω–∏: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—É–±–±–æ—Ç–∞ (–ø–Ω-—Å–±), —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –Ω–µ–¥–µ–ª—è.
-- –£—Ä–æ–∫: –í—Å–µ –µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.
-- –ö–∞–±–∏–Ω–µ—Ç: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –µ–≥–æ –ª–∏—Ü–∞.
üåü –ü–æ—Ä—è–¥–æ–∫ –∏ —Ñ–æ—Ä–º–∞ –Ω–µ –≤–∞–∂–Ω—ã, –±–∞–ª—É–π—Ç–µ—Å—å!"""

INFO_MESSAGE = """
:: –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.9.1

üëÄ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @milinuri"""

SET_CLASS_MESSAGE = """
üåü –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –µ–º—É –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à –∫–ª–∞—Å—Å (1–∞).
–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å—á—ë—Ç—á–∏–∫–æ–≤.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à –∫–ª–∞—Å—Å.

‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π /pass
üí° –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞–ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ /set_class"""


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞
# ==========================

to_home_markup = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home"))

week_markup = [{"home": "üè†", "week {cl}": "–ù–∞ –Ω–µ–¥–µ–ª—é", "select_day {cl}":"‚ñ∑"}]
sc_markup = [{"home": "üè†", "sc {cl}": "–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "select_day {cl}": "‚ñ∑"}]
counter_markup = [{"home": "‚óÅ", "count": "–£—Ä–æ–∫–∏", "count cl": "–£—Ä–æ–∫–∏ {cl}",
                   "count cabinets": "–ö–ª–∞—Å—Å—ã",
                   "count cabinets cl": "–ö–ª–∞—Å—Å—ã {cl}"}]
home_murkup = [{"other": "üîß–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "updates last 0 None": "üîî–ò–∑–º–µ–Ω–µ–Ω–∏—è",
                "sc {cl}": "üìö–£—Ä–æ–∫–∏ {cl}"}]
other_markup = [{"home": "‚óÅ", "set_class": "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å"},
                {"count": "–°—á—ë—Ç—á–∏–∫",}]

def markup_generator(sp: SPMessages, pattern: dict, cl: Optional[str]=None,
        exclude: Optional[str]=None, row_width: Optional[int]=3
        ) -> InlineKeyboardMarkup:
    """–°–æ–±–∏–∞—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —à–∞–±–ª–æ–Ω—É.

    Args:
        sp (SPMessages): –û–ø–∏—Å–∞–Ω–∏–µ
        cl (str, optional): –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data
        pattern (dict): –®–∞–±–ª–æ–Ω –¥–ª—è —Å–±–æ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        exclude (str, optional): –ö–ª—é—á –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        row_width (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    Returns:
        InlineKeyboardMarkup: –°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width)
    cl = cl if cl is not None else sp.user["class_let"]

    for group_row in pattern:
        row = []

        for callback_data, text in group_row.items():
            if exclude is not None and callback_data == exclude:
                continue

            if cl is None and "{cl}" in callback_data:
                continue

            if cl is None and "{cl}" in text:
                continue

            callback_data = callback_data.replace("{cl}", cl or "")
            text = text.replace("{cl}", cl or "")

            row.append(InlineKeyboardButton(text= text, callback_data= callback_data))
        markup.row(*row)

    return markup

def gen_updates_markup(update_index: int, updates: list,
                       cl: Optional[str]=None) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç inline-–∫–ª–≤–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    Args:
        update_index (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        updates (list): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å —Å–æ–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width=4)
    markup_pattern = {
            "home": "üè†",
            "updates back": "‚óÅ",
            "updates switch": f"{update_index+1}/{len(updates)}",
            "updates next": "‚ñ∑",
        }

    for k, v in markup_pattern.items():
        k += f" {update_index} {cl}"
        markup.insert(InlineKeyboardButton(text=v, callback_data=k))

    return markup

def select_day_markup(cl: str) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.

    Args:
        cl (str): –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤—ã–±–∏—Ä–∞—Ç–µ—Å—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

    Returns:
        InlineKeyboardMarkup: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏
    """
    markup = InlineKeyboardMarkup()
    for i, x in enumerate(days_names):
        markup.insert(
            InlineKeyboardButton(text=x, callback_data=f"sc_day {cl} {i}"))
    return markup


def send_home_message(sp: SPMessages) -> str:
    """–û—Ç–ø–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π

    Returns:
        str: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    cl = sp.user["class_let"]

    if cl:
        message = f"üíé –í–∞—à –∫–ª–∞—Å—Å: {cl}."
    elif sp.user["set_class"]:
        message = "üåü –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–ª–∞—Å—Å—É."
    else:
        message = SET_CLASS_MESSAGE

    message += "\n\n"
    message += HOME_MESSAGE

    return message


# –û–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
# ========================

@dp.message_handler(commands=["start", "help"])
async def start_command(message: types.Message) -> None:
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)
    await message.delete()

    if sp.user["set_class"]:
        markup = markup_generator(sp, home_murkup)
        await message.answer(text=send_home_message(sp), reply_markup=markup)
    else:
        await message.answer(text=SET_CLASS_MESSAGE)

@dp.message_handler(commands=["info"])
async def info_command(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±–æ—Ç–∞."""
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)
    await message.answer(text=sp.send_status()+INFO_MESSAGE,
                         reply_markup=to_home_markup)

@dp.message_handler(commands=["updates"])
async def updates_command(message: types.Message) -> None:
    """–û–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏/"""
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)
    updates = sp.sc.updates
    markup = gen_updates_markup(max(len(updates)-1, 0), updates)
    if len(updates):
        text = send_update(updates[-1])
    else:
        text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    await message.answer(text=text, reply_markup=markup)

@dp.message_handler(commands=["counter"])
async def counter_command(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤—è–ª–µ—Ç —Å—á—ë—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤."""
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)
    markup = markup_generator(sp, counter_markup, exclude="count", row_width=4)
    await message.answer(text=sp.count_lessons(), reply_markup=markup)

@dp.message_handler(commands=["set_class"])
async def set_class_command(message: types.Message) -> None:
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)
    sp.reset_user()
    await message.answer(text=SET_CLASS_MESSAGE)

@dp.message_handler(commands=["pass"])
async def pass_commend(message: types.Message) -> None:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞."""
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)
    if not sp.user["set_class"]:
        sp.user["set_class"] = True
        sp.save_user()
        markup = markup_generator(sp, home_murkup)
        await message.answer(text=send_home_message(sp), reply_markup=markup)

@dp.message_handler(commands=["sc"])
async def sc_command(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."""
    sp = SPMessages(str(message.chat.id))
    logger.info(message.chat.id)

    if sp.user["class_let"]:
        flt = construct_filters(sp.sc)
        await message.answer(text=sp.send_today_lessons(flt),
                             reply_markup=markup_generator(sp, week_markup))
    else:
        text = "‚ö†Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."
        await message.answer(text=text)


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================

@dp.message_handler()
async def main_handler(message: types.Message) -> None:
    uid = str(message.chat.id)
    sp = SPMessages(uid)
    text = message.text.strip().lower()
    logger.info("{} {}", uid, text)

    if sp.user["set_class"]:
        flt = parse_filters(sp.sc, text.split())

        # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç–∞ –≤ –º–∞—à–∏–Ω—É –¥–ª—è —Å–ø–∞–º–∞
        # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫/–∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        if len(flt.cabinets):
            res = sp.search_cabinet(list(flt.cabinets)[-1], flt)
            await message.answer(text=res, reply_markup=to_home_markup)

        elif len(flt.lessons):
            res = sp.search_lesson(list(flt.lessons)[-1], flt)
            await message.answer(text=res, reply_markup=to_home_markup)

        elif flt.cl or flt.days:
            text = sp.send_lessons(flt) if flt.days else sp.send_today_lessons(flt)
            await message.answer(text=text)
        else:
            await message.answer(text="üëÄ –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")


    # –£—Å—Ç–∞–µ–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # ==============================

    elif text in sp.sc.lessons:
        logger.info("Set class {}", text)
        sp.set_class(text)
        markup = markup_generator(sp, home_murkup)
        await message.answer(text=send_home_message(sp), reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
# ========================

@dp.callback_query_handler()
async def callback_handler(callback: types.CallbackQuery) -> None:
    header, *args = callback.data.split()
    uid = str(callback.message.chat.id)
    sp = SPMessages(uid)
    logger.info("{}: {} {}", uid, header, args)

    if header == "home":
        markup = markup_generator(sp, home_murkup)
        await callback.message.edit_text(text=send_home_message(sp),
                                         reply_markup=markup)

    # –°—á—ë—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
    elif header == "count":
        cabinets = True if "cabinets" in args else False
        cl = sp.user["class_let"] if "cl" in args else None
        text = sp.count_lessons(cabinets=cabinets, cl=cl)
        markup = markup_generator(sp, counter_markup, exclude=callback.data,
                                  row_width=4)
        await callback.message.edit_text(text=text, reply_markup=markup)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    elif header == "sc":
        text = sp.send_today_lessons(construct_filters(sp.sc, cl=[args[0]]))
        markup = markup_generator(sp, week_markup, cl=args[0])
        await callback.message.edit_text(text=text, reply_markup=markup)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    elif header == "week":
        flt = construct_filters(sp.sc, days=[0, 1, 2, 3, 4, 5], cl=args[0])
        text = sp.send_lessons(flt)
        markup = markup_generator(sp, sc_markup, cl=args[0])
        await callback.message.edit_text(text=text, reply_markup=markup)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    elif header == "select_day":
        markup = select_day_markup(args[0])
        await callback.message.edit_text(text=f"üìÖ –Ω–∞ ...\nüî∂ –î–ª—è {args[0]}:",
                                         reply_markup=markup)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
    elif header == "sc_day":
        day = int(args[1])
        flt = construct_filters(sp.sc, days=day, cl=args[0])

        if day == 6:
            text = sp.send_today_lessons(flt)
        elif day == 7:
            flt._days = [0, 1, 2, 3, 4, 5]
            text = sp.send_lessons(flt)
        else:
            text = sp.send_lessons(flt)

        markup = markup_generator(sp, sc_markup, cl=args[0])
        await callback.message.edit_text(text=text, reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    elif header == "updates":
        text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "

        # –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∞/–≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–Ω–∏—è
        if args[0] == "switch":
            cl = sp.user["class_let"] if args[2] == "None" else None
        else:
            cl = None if args[2] == "None" else args[2]

        # –î–æ–ø–ª–Ω—è–µ–º —à–∞–ø–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if cl is not None and sp.user["set_class"]:
            text += f"–¥–ª—è {cl}:\n"
            flt = construct_filters(sp.sc, cl=args[2])
        else:
            text += "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
            flt = construct_filters(sp.sc)

        updates = sp.sc.get_updates(flt)
        i = max(min(int(args[1]), len(updates)-1), 0)

        if len(updates):
            if args[0] in ["last", "switch"]:
                i = len(updates)-1

            elif args[0] == "next":
                i = (i+1) % len(updates)

            elif args[0] == "back":
                i = (i-1) % len(updates)

            text += send_update(updates[i])
        else:
            text += "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

        if text != callback.message.text:
            markup = gen_updates_markup(i, updates, cl)
            await callback.message.edit_text(text=text, reply_markup=markup)

    # –í—ã–∑–æ—ã –º–µ–Ω—é –∏–Ω—Å—Ç—Ä–º–µ–Ω—Ç–æ–≤
    elif header == "other":
        text = sp.send_status() + INFO_MESSAGE
        markup = markup_generator(sp, other_markup)
        await callback.message.edit_text(text=text, reply_markup=markup)

    # –°–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif header == "set_class":
        sp.user["set_class"] = False
        sp.save_user()
        await callback.message.edit_text(text=SET_CLASS_MESSAGE)

    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
