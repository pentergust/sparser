"""Telegram-–±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ SPMessages.

–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º SPMessages.
–ù–µ —Å—á–∏—Ç–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ "–Ω–∞–º–µ—Ä–µ–Ω–∏–π" (Intents).

–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è BotFather
--------------------------

sc - –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
updates - –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
notify - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
counter - –°—á—ë—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
tutorial - –ö–∞–∫ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
set_class - –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å
help - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

Author: Milinuri Nirvalen
Ver: 2.1 +1
"""

import asyncio
from datetime import datetime
from os import getenv
from pathlib import Path
from typing import Any, Awaitable, Callable, Dict, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, ErrorEvent, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message, Update)
from dotenv import load_dotenv
from loguru import logger

from sp.counters import (cl_counter, days_counter, group_counter_res,
                         index_counter)
from sp.intents import Intent
from sp.messages import SPMessages, send_counter, send_search_res, send_update
from sp.parser import Schedule
from sp.utils import get_str_timedelta


# –ù–∞—Å—Ç—Ä–æ–π–∫–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ======================

load_dotenv()
TELEGRAM_TOKEN = getenv("TELEGRAM_TOKEN", "")
dp = Dispatcher()
days_names = ("–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±")
_TIMETAG_PATH = Path("sp_data/last_update")
_HOME_BUTTON = InlineKeyboardButton(text="‚óÅ", callback_data="home")

TO_HOME_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home")]]
)
PASS_SET_CL_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∫–ª–∞—Å—Å", callback_data="pass"),
            InlineKeyboardButton(text="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="cl_features"),
        ]
    ]
)
BACK_SET_CL_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÅ", callback_data="set_class"),
            InlineKeyboardButton(text="–ù–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∫–ª–∞—Å—Å", callback_data="pass"),
        ]
    ]
)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Middleware
# =====================

@dp.message.middleware()
@dp.callback_query.middleware()
async def sp_middleware(
    handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
    event: Update,
    data: Dict[str, Any],
) -> Any:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SPMessages –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    if isinstance(event, CallbackQuery):
        uid = event.message.chat.id
    else:
        uid = event.chat.id

    data["sp"] = SPMessages(str(uid))
    return await handler(event, data)

# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–æ—Ç–µ
# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
@dp.message.middleware()
@dp.callback_query.middleware()
async def log_middleware(
    handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
    event: Update,
    data: Dict[str, Any],
) -> Any:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback data."""
    if isinstance(event, CallbackQuery):
        logger.info("[cq] {}: {}", event.message.chat.id, event.data)
    else:
        logger.info("[msg] {}: {}", event.chat.id, event.text)

    return await handler(event, data)


# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================

# –ì–ª–∞–≤–Ω–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–∞
HOME_MESSAGE = ("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:"
    "\n-- 7–≤ 6–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
    "\n-- —É—Ä–æ–∫–∏ 6–∞ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å—Ä"
    "\n-- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è 8–±"
    "\n-- 312 –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –ø—è—Ç–Ω–∏—Ü—É"
    "\n-- —Ö–∏–º–∏—è 228 6–∞ –≤—Ç–æ—Ä–Ω–∏–∫"
    "\n\nüè´ –í –∑–∞–ø—Ä–æ—Å–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:"
    "\n* –£—Ä–æ–∫/–ö–∞–±–∏–Ω–µ—Ç: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    "\n* –ö–ª–∞—Å—Å—ã: –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
    "\n* –î–Ω–∏ –Ω–µ–¥–µ–ª–∏:"
    "\n-- –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."
    "\n-- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—É–±–±–æ—Ç–∞ (–ø–Ω-—Å–±)."
    "\n-- –°–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –Ω–µ–¥–µ–ª—è."
    "\n\nüåü –ö–∞–∫ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã? /tutorial"
)

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª–∞—Å—Å–∞
SET_CLASS_MESSAGE = ("–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –∫–ª–∞—Å—Å."
    "\n–í—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    "\n–ü–æ—á–∏—Ç–∞—Ç—å –æ –≤—Å–µ—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö - /cl_features"
    "\n\nüåü –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–º (\"8–≤\")"
    "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É (/pass)."
    "\n\nüí° –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –ø–æ–∑–∂–µ:"
    "\n-- —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /set_class."
    "\n-- –ï—â—ë -> —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å."
)

# –ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞–≤–≥–∏—Ö –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
CL_FEATURES_MESSAGE = ("üåü –ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–µ—Ç–µ –∫–ª–∞—Å—Å, —Ç–æ —Å–º–æ–∂–µ—Ç–µ:"
    "\n\n-- –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞, –∫–Ω–æ–ø–∫–æ–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    "\n-- –ù–µ —É–∫–∑–∞—ã–≤–∞—Ç—å –≤–∞—à –∫–ª–∞—Å—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö (–ø—Ä–∏–º. \"–ø–Ω\")."
    "\n-- –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞."
    "\n-- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞."
    "\n-- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—á—ë—Ç—á–∏–∫ cl/lessons."
    "\n\nüíé –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è."
)

# –°–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
TUTORIAL_MESSAGES = [
    ("üí° –ö–∞–∫ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã?"
        "\n–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—Å—ë –Ω–∞–º–Ω–æ-–æ-–æ–≥–æ –ª–µ–≥—á–µ."
        "\n–ü—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏."
        "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞."
        "\n–ò–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –µ–≥–æ."
    ),

    ("1. –ë—É–¥—å—Ç–µ –ø—Ä–æ—â–µ"
        "\n\n–°–æ–≤—Å–µ–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö \"–ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ\" —Å–ª–æ–≤–∞."
        "\n–¢–∞–∫–∏–µ –∫–∞–∫ \"—É—Ä–æ–∫–∏ –Ω–∞\", \"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\", \"–¥–ª—è\" –∏ –ø–æ–¥–æ–±–Ω—ã–µ."
        "\n–û–Ω–∏ –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–∞–º –∑–∞–ø—Ä–æ—Å."
        "\n\n‚ùå —É—Ä–æ–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
        "\n‚úÖ –ó–∞–≤—Ç—Ä–∞"
        "\n\n‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 9–≤ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫"
        "\n‚úÖ 9–≤ –≤—Ç–æ—Ä–Ω–∏–∫"
        "\n\n–ü–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ."
        "\n-- –º–∞—Ç–µ–º 8–≤ = 8–≤ –º–∞—Ç–µ–º"
    ),

    ("2. –ö–ª–∞—Å—Å—ã"
        "\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å."
        "\n–ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."
        "\nüî∏ –ù–∞ —Å–µ–≥–æ–¥–Ω—è - –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –µ—â—ë –∏–¥—É—Ç."
        "\nüî∏ –ù–∞ –∑–∞–≤—Ç—Ä–∞ - –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∫–æ–Ω—á–∏–ª–∏—Å—å."
        "\n\n-- 7–∞ ‚ûú –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 7–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."
        "\n-- 7–≥ 6–∞ ‚ûú –°—Ä–∞–∑—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤."
        "\n\nüîé –¢–∞–∫–∂–µ –∫–ª–∞—Å—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ:"
        "\n\n- —Ö–∏–º–∏—è 8–± ‚ûú –í—Å–µ —É—Ä–æ–∫–∏ —Ö–∏–º–∏–∏ –¥–ª—è 9–±."
        "\n- 9–≤ 312 ‚ûú –í—Å–µ —É—Ä–æ–∫–∏ –≤ 312 –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è 9–≤"
        "\n\nüí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –º–æ–∂–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å–µ:"
        "\n-- –ü–æ –∫–Ω–æ–ø–∫–µ \"–µ—â—ë\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        "\n-- –ü–æ –∫–æ–º–∞–Ω–¥–µ /info"
    ),

    ("3. –î–Ω–∏ –Ω–µ–¥–µ–ª–∏"
        "\n\n–í—ã –º–æ–∂–µ—Ç–µ –±–æ–ª–µ–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –∏ –ø–æ–∏—Å–∫–µ."
        "\n–ï—Å–ª–∏ —É–∫–∞–∑–∞–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å, —Ç–æ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞."
        "\n\n‚úèÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:"
        "\n-- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—É–±–±–æ—Ç–∞."
        "\n-- –ø–Ω - —Å–±."
        "\n-- –°–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –Ω–µ–¥–µ–ª—è."
        "\n\n-- –≤—Ç ‚ûú –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫."
        "\n\n–ù–∞–ø–æ–º–Ω–∏–º –ø—Ä–æ \"–±—ã—Ç—å –ø—Ä–æ—â–µ\":"
        "\n‚ùå –£—Ä–æ–∫–∏ –¥–ª—è 5–≥ –Ω–∞ —Å—Ä–µ–¥—É"
        "\n‚úÖ 5–≥ —Å—Ä–µ–¥–∞"
        "\n\nüîé –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –Ω–µ–¥–µ–ª—é."
        "\n-- –º–∞—Ç–µ–º –≤—Ç ‚ûú –í—Å–µ —É—Ä–æ–∫–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫"
        "\n-- –ø—Ç 312 ‚ûú –í—Å–µ —É—Ä–æ–∫–∏ –≤ 312 –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É"
    ),

    ("4. –ü–æ–∏—Å–∫ –ø–æ —É—Ä–æ–∫–∞–º"
        "\n\nüîé –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–ª—è –µ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."
        "\n–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é."
        "\n\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å, –¥–µ–Ω—å, –∫–∞–±–∏–Ω–µ—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö."
        "\n\n-- –º–∞—Ç–µ–º ‚ûú –í—Å—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤."
        "\n-- —Ö–∏–º–∏—è –≤—Ç–æ—Ä–Ω–∏–∫ 10–∞ ‚ûú –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫."
        "\n\n‚ö†Ô∏è –ï—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤, –±—É–¥–µ—Ç –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π."
        "\n–ß—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º."
        "\n\nüí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã –º–æ–∂–Ω–æ –≤ —Å—á—ë—Ç—á–∏–∫–∞—Ö:"
        "\n-- –ü–æ –∫–Ω–æ–ø–∫–µ \"–ï—â—ë\" ‚ûú \"–°—á—ë—Ç—á–∏–∫–∏\""
        "\n-- –ü–æ –∫–æ–º–∞–Ω–¥–µ /counter"
    ),

    ("5. –ü–æ–∏—Å–∫ –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º"
        "\nüîé –£–∫–∞–∂–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ–±—ã –≤–∑–≥–ª–Ω—è—É—Ç—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –µ–≥–æ –ª–∏—Ü–∞."
        "\n–ï—Å–ª–∏ –ø—Ä–æ—á–∏–µ –ø–∞—Ä–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é."
        "\n\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å, –¥–µ–Ω—å, —É—Ä–æ–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö."
        "\n\n-- 328 ‚ûú –í—Å—ë —á—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ 328 –∫–∞–±–∏–Ω–µ—Ç–µ –∑–∞ –Ω–µ–¥–µ–ª—é."
        "\n-- 312 –ª–∏—Ç–µ—Ä –≤—Ç–æ—Ä–Ω–∏–∫ 7–∞ ‚ûú –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫."
        "\n\n‚ö†Ô∏è –ï—Å–ª–∏ —É–∫–∞–∑–∞–∞—Ç—å –Ω–µ–∫—Å–∫–æ–ª—å–∫–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, –±—É–¥–µ—Ç –≤–∑—è—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π."
        "\n–ß—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º."
        "\n–û–¥–Ω–∞–∫–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–µ –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É."
        "\n\nüí° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –≤ —Å—á—ë—Ç—á–∏–∫–∞—Ö:"
        "\n-- –ü–æ –∫–Ω–æ–ø–∫–µ \"–ï—â—ë\" ‚ûú \"–°—á—ë—Ç—á–∏–∫–∏\" ‚ûú \"–ü–æ —É—Ä–æ–∫–∞–º\""
        "\n-- –ü–æ –∫–æ–º–∞–Ω–¥–µ /counter ‚ûú \"–ü–æ —É—Ä–æ–∫–∞–º\""
    ),

    ("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –æ–±—É—á–µ–Ω–∏—è!"
        "\n–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –≤—Å—ë –æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
        "\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
        "\n–í—ã —É–º–Ω–∏—á–∫–∞. ‚ù§Ô∏è"
    )
]


# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =======================

def get_other_keyboard(
    cl: str, home_button: Optional[bool] = True
) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã.
    –ß—Ç–æ–±—ã —ç—Ç–∏ —Ä–∞–¥–µ–ª—ã –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏ –º–µ—Å—Ç–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∏ –Ω–µ –ø—É–≥–∞–ª–∏
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ—á–µ–∫.

    Buttons:
        set_class => –°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å.
        count:lessons:main => –ú–µ–Ω—é —Å—á—ë—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞.
        updates:last:0:{cl} => –ü–æ—Å–ª–µ–¥–Ω–∞—è —Å—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    Args:
        cl (str): –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        home_button (bool, optional): –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞.

    Returns:
        InlineKeyboardMarkup: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    buttons = [
        [
            InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å", callback_data="set_class"),
            InlineKeyboardButton(
                text="üìä –°—á—ë—Ç—á–∏–∫–∏", callback_data="count:lessons:main"
            ),
            InlineKeyboardButton(
                text="üìú –ò–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"updates:last:0:{cl}"
            ),
        ],
        [],
    ]

    if home_button:
        buttons[-1].append(InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home"))

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_main_keyboard(cl: str) -> InlineKeyboardMarkup:
    """–í–æ–∑—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.

    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º
    —Ä–∞–∑–¥–µ–ª–∞–º –±–æ—Ç–∞, —Ç–∞–∫–∏–º –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ –ø–æ
    —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤—â–µ–µ–Ω–∏–π.

    Buttons:
        other => –í—ã–∑–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        notify => –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        sc:{cl}:today => –ü–æ–ª—É—á–∞–µ–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∫–ª–∞—Å—Å–∞.

    Args:
        cl (str): –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–≤–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Returns:
        InlineKeyboardMarkup: –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞.
    """
    if cl is None:
        return get_other_keyboard(cl, home_button=False)

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –ï—â—ë", callback_data="other"),
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notify"),
                InlineKeyboardButton(
                    text=f"üìö –£—Ä–æ–∫–∏ {cl}", callback_data=f"sc:{cl}:today"
                ),
            ]
        ]
    )

def get_week_keyboard(cl: str) -> InlineKeyboardMarkup:
    """–í–æ–∑—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.
    –¢–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–º–æ–π –∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.

    Buttons:
        home => –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.
        sc:{cl}:week => –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–µ–¥–ª—é –¥–ª—è –∫–ª–∞—Å—Å–∞.
        select_day:{cl} => –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    Args:
        cl (str): –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–≤–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Return:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home"),
                InlineKeyboardButton(text="–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"sc:{cl}:week"),
                InlineKeyboardButton(text="‚ñ∑", callback_data=f"select_day:{cl}"),
            ]
        ]
    )

def get_sc_keyboard(cl: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–∞—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.
    –¢–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–º–æ–π –∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.

    Buttons:
        home => –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.
        sc:{cl}:today => –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∫–ª–∞—Å—Å–∞.
        select_day:{cl} => –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    Args:
        cl (str): –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–≤–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Return:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home"),
                InlineKeyboardButton(text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"sc:{cl}:today"),
                InlineKeyboardButton(text="‚ñ∑", callback_data=f"select_day:{cl}"),
            ]
        ]
    )

def get_select_day_keyboard(cl: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–∞—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è.

    –ú—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —É–∫–∑–∞–∞–Ω—ã–π –∫–ª–∞—Å—Å –≤ –∑–∞–ø—Ä–æ—Å.

    Buttons:
        sc:{cl}:{0..6} => –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∑–∞–∞–Ω–Ω–æ–≥–æ –¥–Ω—è.
        sc:{cl}:today => –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
        sc:{cl}:week => –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.

    Args:
        cl (str): –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=x, callback_data=f"sc:{cl}:{i}")
                for i, x in enumerate(days_names)
            ],
            [
                InlineKeyboardButton(text="‚óÅ", callback_data="home"),
                InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"sc:{cl}:today"),
                InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data=f"sc:{cl}:week"),
            ],
        ]
    )

def get_notify_keyboard(
    sp: SPMessages, enabled: bool, hours: Optional[list[int]] = None
) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –°–±—Ä–æ–∏—Å–∏—Ç—å –≤—Å–µ —á–∞—Å—ã —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    Buttons:
        notify:on:0 => –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞.
        notify:off:0 => –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞.
        notify:reset:0 => –°–±—Ä–æ—Å–∏—Ç—å —á–∞—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–Ω–∏—è.
        notify:add:{hour} => –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Å–∞.
        notify:remove:{hour} => –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Å–∞.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        enabled (bool): –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        hours (list, optional): –í –∫–∞–∫–æ–π —á–∞—Å —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    inline_keyboard = [[InlineKeyboardButton(text="‚óÅ", callback_data="home")]]

    if not enabled:
        inline_keyboard[0].append(
            InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å", callback_data="notify:on:0")
        )
    else:
        inline_keyboard[0].append(
            InlineKeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="notify:off:0")
        )
        if hours:
            inline_keyboard[0].append(
                InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å", callback_data="notify:reset:0")
            )
        hours_line = []
        for i, x in enumerate(range(6, 24)):
            if x % 6 == 0:
                inline_keyboard.append(hours_line)
                hours_line = []

            if x in hours:
                hours_line.append(
                    InlineKeyboardButton(
                        text=f"‚úîÔ∏è{x}", callback_data=f"notify:remove:{x}"
                    )
                )
            else:
                hours_line.append(
                    InlineKeyboardButton(text=str(x), callback_data=f"notify:add:{x}")
                )

        if len(hours_line):
            inline_keyboard.append(hours_line)

    return InlineKeyboardMarkup(row_width=6, inline_keyboard=inline_keyboard)

def get_updates_keyboard(
    page: int, updates: list, cl: Optional[str] = None
) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å –æ–±—â–µ–≥–æ –Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞.

    Buttons:
        home => –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—è –±–æ—Ç–∞.
        update:back:{page}:{cl} => –ü–µ—Ä–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥.
        update:switch:0:{cl} => –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        update:next:{page}:{cl} => –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–ø–µ—Ä—ë–¥.

    Args:
        page (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        updates (list): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        cl (str, optional): –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè†", callback_data="home"),
                InlineKeyboardButton(
                    text="‚óÅ", callback_data=f"updates:back:{page}:{cl}"
                ),
                InlineKeyboardButton(
                    text=f"{page+1}/{len(updates)}",
                    callback_data=f"updates:switch:0:{cl}",
                ),
                InlineKeyboardButton(
                    text="‚ñ∑", callback_data=f"updates:next:{page}:{cl}"
                ),
            ]
        ]
    )


_COUNTERS = (
    ("cl", "–ü–æ –∫–ª–∞—Å—Å–∞–º"),
    ("days", "–ü–æ –¥–Ω—è–º"),
    ("lessons", "–ü–æ —É—Ä–æ–∫–∞–º"),
    ("cabinets", "–ü–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º"),
)

_TARGETS = (
    ("cl", "–ö–ª–∞—Å—Å—ã"),
    ("days", "–î–Ω–∏"),
    ("lessons", "–£—Ä–æ–∫–∏"),
    ("cabinets", "–ö–∞–±–∏–Ω–µ—Ç—ã"),
    ("main", "–û–±—â–µ–µ"),
)

def get_counter_keyboard(cl: str, counter: str, target: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –ü–æ–∑–≤–æ–¥—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Ü–µ–ª—è–º:

    +----------+-------------------------+
    | counter  | targets                 |
    +----------+-------------------------+
    | cl       | days, lessons. cabinets |
    | days     | cl, lessons. cabinets   |
    | lessons  | cl, days, main          |
    | cabinets | cl, days, main          |
    +----------+-------------------------+

    Buttons:
        home => –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –±–æ—Ç–∞.
        count:{counter}:{target} => –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π —Å—á—ë—Ç—á–∏–∫.

    Args:
        cl (str): –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        counter (str): –¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤.
        target (str): –¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á—ë—Ç—á–∏–∫–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤.
    """
    inline_keyboard = [[InlineKeyboardButton(text="‚óÅ", callback_data="home")], []]

    for k, v in _COUNTERS:
        if counter == k:
            continue

        inline_keyboard[0].append(
            InlineKeyboardButton(text=v, callback_data=f"count:{k}:{target}")
        )

    for k, v in _TARGETS:
        if target == k or counter == k:
            continue

        if k == "main" and counter not in ["lessons", "cabinets"]:
            continue

        if counter in ["lessons", "cabinets"] and k in ["lessons", "cabinets"]:
            continue

        if counter == "cl" and k == "lessons" and not cl:
            continue

        inline_keyboard[1].append(
            InlineKeyboardButton(text=v, callback_data=f"count:{counter}:{k}")
        )

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_tutorial_keyboard(page: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

    –ò—Å–ø–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è.

    Buttons:
        delete_msg => –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
        tutorual:{page} => –°–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—É—á–µ–Ω–∏—è.

    Args:
        page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∫–∏.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Å–ø—Ä–∞–≤–∫–µ.
    """
    inline_keyboard = []

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ -> –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    if page == 0:
        inline_keyboard.append([
            InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="tutorial:1")
        ])

    # –ö–Ω–æ–ø–∫–µ–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    elif page != len(TUTORIAL_MESSAGES)-1:
        inline_keyboard.append([
            InlineKeyboardButton(text="‚óÅ", callback_data=f"tutorial:{page-1}"),
            InlineKeyboardButton(text="üåü –î–∞–ª—å—à–µ", callback_data=f"tutorial:{page+1}")
        ])

        for i, x in enumerate(TUTORIAL_MESSAGES[1:-1]):
            if i+1 == page:
                continue
            inline_keyboard.append([InlineKeyboardButton(text=x.splitlines()[0], callback_data=f"tutorial:{i+1}")])

        inline_keyboard.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="delete_msg")])

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    else:
        inline_keyboard.append([
            InlineKeyboardButton(text="üéâ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="delete_msg")
        ])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è
# ======================

def get_update_timetag(path: Path) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–ª–≤–µ–Ω–∏–π.

    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    –í—Ä–µ–º—è —É—Å–ø–µ—à–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –¥–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞,
    —Ç–æ —ç—Ç–æ –ø–æ–≤–æ–¥ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.

    Args:
        path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

    Returns:
        int: UNIXtime –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    """
    if not path.exists():
        return 0

    try:
        with open(path) as f:
            return int(f.read())
    except ValueError:
        return 0

def get_status_message(sp: SPMessages, timetag_path: Path) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —Å–æ—Å–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞.

    –ò–Ω—Ñ–æ–º–∞—Ä—Ü–∏–æ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–∞–±–æ—Ç–∞—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    –ö –ø—Ä–∏–º–µ—Ä—É –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
    –∫–ª–∞—Å—Å–æ–≤ –∏ –ø—Ä–æ—á–µ–µ.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        timetag_path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    message = sp.send_status()
    message += "\n‚öôÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.1\nüõ†Ô∏è –¢–µ—Å—Ç–µ—Ä @sp6510"

    timetag = get_update_timetag(timetag_path)
    now = datetime.now().timestamp()

    timedelta = now - timetag
    message += f"\nüìÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–æ {get_str_timedelta(timedelta)} –Ω–∞–∑–∞–¥"

    if timedelta > 3600:
        message += "\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥."
        message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞."
        message += "\n–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞."

    return message


def get_home_message(cl: str) -> str:
    """–û—Ç–ø—Ä–∞–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.

    –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞.
    –û–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∞—Ç–∫—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    –í —à–∞–ø–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    –í —Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    –ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–ª–∞—Å—Å—É, —Å–ø—Ä–∞–≤–∫–∞ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.

    Args:
        cl (str): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Returns:
        str: –ì–æ—Ç–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
    """
    if cl:
        message = f"üíé –í–∞—à –∫–ª–∞—Å—Å {cl}"
    else:
        message = f"üåü –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–ª–∞—Å—Å—É."

    message += f"\n\n{HOME_MESSAGE}"
    return message

def get_notify_message(sp: SPMessages) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ:
    –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ–º—Ä–∞—Ü–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω—è—Ö.
    –í –∫–∞–∫–∏–µ —á–∞—Å—ã —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.
    """
    if sp.user["notifications"]:
        message = "üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã."
        message += "\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è."
        message += "\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
        message += "\n–í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞."
        hours = sp.user["hours"]

        if hours:
            message += "\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: "
            message += ", ".join(map(str, set(hours)))
    else:
        message = "üîï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        message += "\n–ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."

    return message

def get_counter_message(sc: Schedule, counter: str, target: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–æ–≤.

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é
    —Ñ—É–Ω–∫—Ü–∏—é —Å—á—ë—Ç—á–∏–∫–∞.

    +----------+-----------------------------+
    | counter  | targets                     |
    +----------+-----------------------------+
    | cl       | cl, days, lessons. cabinets |
    | days     | cl, days, lessons. cabinets |
    | lessons  | cl, days. main              |
    | cabinets | cl, days. main              |
    +----------+-----------------------------+

    Args:
        sc (Schedule): –≠–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤.
        counter (str): –¢–∏–ø —Å—á—ë—Ç—á–∏–∫–∞.
        target (str): –ì—Ä—É–ø–ø–∞ –ø—Ä–æ—Å–º—Ç–æ—Ä–∞ —Å—á—ë—Ç—á–∏–∫–∞.

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞–∞—Ç–º–∏ —Å—á—ë—Ç—á–∏–∫–∞.
    """
    intent = Intent()

    if counter == "cl":
        if target == "lessons":
            intent = Intent.construct(sc, cl=sc.cl)
        res = cl_counter(sc, intent)
    elif counter == "days":
        res = days_counter(sc, intent)
    elif counter == "lessons":
        res = index_counter(sc, intent)
    else:
        res = index_counter(sc, intent, cabinets_mode=True)

    message = f"‚ú® –°—á—ë—Ç—á–∏–∫ {counter}/{target}:"
    message += send_counter(group_counter_res(res), target=target)
    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==================

# –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π -------------------------------------------

@dp.message(Command("cl_features"))
async def restrictions_handler(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º—É—â–µ—Å—Ç–≤ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ."""
    await message.answer(text=CL_FEATURES_MESSAGE)

@dp.message(Command("tutorial"))
async def tutorial_handler(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤."""
    await message.delete()
    await message.answer(
        text=TUTORIAL_MESSAGES[0],
        reply_markup=get_tutorial_keyboard(0)
    )

@dp.message(Command("info"))
async def info_handler(message: Message, sp: SPMessages) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±—Ç—ã –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞."""
    await message.answer(
        text=get_status_message(sp, _TIMETAG_PATH),
        reply_markup=get_other_keyboard(sp.user["class_let"]),
    )

# Help –∫–æ–º–∞–Ω–¥–∞ ---------------------------------------------------------

@dp.message(Command("help", "start"))
async def start_handler(message: Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞."""
    await message.delete()
    if sp.user["set_class"]:
        await message.answer(
            text=get_home_message(sp.user["class_let"]),
            reply_markup=get_main_keyboard(sp.user["class_let"]),
        )
    else:
        await message.answer(text=SET_CLASS_MESSAGE, reply_markup=PASS_SET_CL_MARKUP)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------------------------------------

@dp.message(Command("set_class"))
async def set_class_command(message: Message, sp: SPMessages) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    sp.reset_user()
    await message.answer(text=SET_CLASS_MESSAGE, reply_markup=PASS_SET_CL_MARKUP)

@dp.message(Command("pass"))
async def pass_handler(message: Message, sp: SPMessages) -> None:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    sp.set_class(None)
    await message.answer(
        text=get_home_message(sp.user["class_let"]),
        reply_markup=get_main_keyboard(sp.user["class_let"]),
    )

# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ -------------------------------------------

@dp.message(Command("sc"))
async def sc_handler(message: Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—é.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∑–∞–∞–Ω –∫–ª–∞—Å—Å.
    """
    if sp.user["class_let"]:
        await message.answer(
            text=sp.send_today_lessons(Intent()),
            reply_markup=get_week_keyboard(sp.user["class_let"]),
        )
    else:
        await message.answer(
            text="‚ö†Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."
        )

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º –±–æ—Ç–∞ ----------------------------------------------

@dp.message(Command("updates"))
async def updates_handler(message: Message, sp: SPMessages) -> None:
    """–û–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
    updates = sp.sc.updates
    markup = get_updates_keyboard(max(len(updates) - 1, 0), updates)
    if len(updates):
        text = send_update(updates[-1])
    else:
        text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    await message.answer(text=text, reply_markup=markup)

@dp.message(Command("counter"))
async def counter_handler(message: Message, sp: SPMessages) -> None:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await message.answer(
        text=get_counter_message(sp.sc, "lessons", "main"),
        reply_markup=get_counter_keyboard(sp.user["class_let"], "lessons", "main"),
    )

@dp.message(Command("notify"))
async def notify_handler(message: Message, sp: SPMessages):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –º–µ–Ω—é—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    enabled = sp.user["notifications"]
    hours = sp.user["hours"]
    await message.answer(
        text=get_notify_message(sp),
        reply_markup=get_notify_keyboard(sp, enabled, hours),
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# =============================

def process_request(sp: SPMessages, request_text: str) -> Optional[str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞–±–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å.
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –ø–æ —É—Ä–æ–∫–∞–º/–∫–∞–±–∏–Ω–µ—Ç–∞–º
    –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        request_text (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    intent = Intent.parse(sp.sc, request_text.split())

    # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç–∞ –≤ –º–∞—à–∏–Ω—É –¥–ª—è —Å–ø–∞–º–∞
    # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫/–∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
    if len(intent.cabinets):
        res = sp.sc.search(list(intent.cabinets)[-1], intent, True)
        text = send_search_res(intent, res)

    elif len(intent.lessons):
        res = sp.sc.search(list(intent.lessons)[-1], intent, False)
        text = send_search_res(intent, res)

    elif intent.cl or intent.days:
        text = sp.send_lessons(intent) if intent.days else sp.send_today_lessons(intent)
    else:
        text = None

    return text

@dp.message()
async def main_handler(message: Message, sp: SPMessages) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–ª—Å—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    """
    if message.text is None:
        return

    text = message.text.strip().lower()

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–∫ –∫–ª–∞—Å—Å -> —Å–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
    if sp.user["set_class"]:
        answer = process_request(sp, text)

        if answer is not None:
            await message.answer(text=answer)
        elif message.chat.type == "private":
            await message.answer(text="üëÄ –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")

    elif text in sp.sc.lessons:
        logger.info("Set class {}", text)
        sp.set_class(text)
        await message.answer(
            text=get_home_message(so.user["class_let"]),
            reply_markup=get_main_keyboard(sp.user["class_let"])
        )

    elif message.chat.type == "private":
        text = "üëÄ –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        text += f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ãe –∫–ª–∞—Å—Å—ã: {', '.join(sp.sc.lessons)}"
        await message.answer(text=text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –∑–∞–ø—Ä–æ—Å–æ–≤
# ============================

@dp.callback_query(F.data == "delete_msg")
async def delete_msg_callback(query: CallbackQuery) -> None:
    await query.message.delete()

@dp.callback_query(F.data == "home")
async def home_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–í–æ–∑–∞—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await query.message.edit_text(
        text=get_home_message(sp.user["class_let"]),
        reply_markup=get_main_keyboard(sp.user["class_let"])
    )

@dp.callback_query(F.data == "other")
async def other_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–æ–ø–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await query.message.edit_text(
        text=get_status_message(sp, _TIMETAG_PATH),
        reply_markup=get_other_keyboard(sp.user["class_let"]),
    )

@dp.callback_query(F.data == "cl_features")
async def restrictions_callback(query: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
    await query.message.edit_text(
        text=CL_FEATURES_MESSAGE, reply_markup=BACK_SET_CL_MARKUP
    )

@dp.callback_query(F.data == "set_class")
async def set_class_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    sp.reset_user()
    await query.message.edit_text(
        text=SET_CLASS_MESSAGE, reply_markup=PASS_SET_CL_MARKUP
    )

@dp.callback_query(F.data == "pass")
async def pass_class_callback(query: CallbackData, sp: SPMessages) -> None:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞."""
    sp.set_class(None)
    await query.message.edit_text(
        text=get_home_message(sp.user["class_let"]),
        reply_markup=get_main_keyboard(sp.user["class_let"])
    )


class ScCallback(CallbackData, prefix="sc"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    cl (str): –ö–ª–∞—Å—Å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    day (str): –î–ª—è –∫–∞–∫–æ–≥–æ –¥–Ω—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

    - 0-5: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—É–±–±–æ—Ç–∞.
    - today: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
    - week: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é."""
    cl: str
    day: str

@dp.callback_query(ScCallback.filter())
async def sc_callback(
    query: CallbackQuery, callback_data: ScCallback, sp: SPMessages
) -> None:
    """–û—Ç–ø–∞—Ä–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    if callback_data.day == "week":
        text = sp.send_lessons(
            Intent.construct(sp.sc, days=[0, 1, 2, 3, 4, 5], cl=callback_data.cl)
        )
        reply_markup = get_sc_keyboard(callback_data.cl)
    elif callback_data.day == "today":
        text = sp.send_today_lessons(Intent.construct(sp.sc, cl=callback_data.cl))
        reply_markup = get_week_keyboard(callback_data.cl)
    else:
        text = sp.send_lessons(
            Intent.construct(sp.sc, cl=callback_data.cl, days=int(callback_data.day))
        )
        reply_markup = get_week_keyboard(callback_data.cl)

    await query.message.edit_text(text=text, reply_markup=reply_markup)


class SelectDayCallback(CallbackData, prefix="select_day"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    cl (str): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    cl: str

@dp.callback_query(SelectDayCallback.filter())
async def select_day_callback(
    query: CallbackQuery, callback_data: ScCallback, sp: SPMessages
) -> None:
    """–û—Ç–æ–±—Ä–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤."""
    await query.message.edit_text(
        text=f"üìÖ –Ω–∞ ...\nüî∂ –î–ª—è {callback_data.cl}:",
        reply_markup=get_select_day_keyboard(callback_data.cl),
    )


class NotifyCallback(CallbackData, prefix="notify"):
    """–ò—Å–ø–æ–ª—å—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    action (str): –ö–∞–∫–æ–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: add, remove, on, off.
    hour (int): –î–ª—è –∫–∞–∫–æ–≥–æ —á–∞—Å–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ.

    - on: –í–∫–ª—é—á–∏—Ç—å —É–≤–¥–æ–º–ª–µ–Ω–∏—è.
    - off: –û—Ç–∫–ø–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    - add: –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å.
    - remove: –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å.
    """
    action: str
    hour: int

@dp.callback_query(F.data == "notify")
async def notify_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–¥–µ–æ–º–ª–µ–Ω–∏–π."""
    enabled = sp.user["notifications"]
    hours = sp.user["hours"]
    await query.message.edit_text(
        text=get_notify_message(sp),
        reply_markup=get_notify_keyboard(sp, enabled, hours),
    )

@dp.callback_query(NotifyCallback.filter())
async def notify_mod_callback(
    query: CallbackQuery, sp: SPMessages, callback_data: NotifyCallback
) -> None:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º."""
    if callback_data.action == "on":
        sp.user["notifications"] = True

    elif callback_data.action == "off":
        sp.user["notifications"] = False

    elif callback_data.action == "add":
        if callback_data.hour not in sp.user["hours"]:
            sp.user["hours"].append(callback_data.hour)

    elif callback_data.action == "remove":
        if callback_data.hour in sp.user["hours"]:
            sp.user["hours"].remove(callback_data.hour)

    elif callback_data.action == "reset":
        sp.user["hours"] = []

    sp.save_user()
    enabled = sp.user["notifications"]
    hours = sp.user["hours"]

    await query.message.edit_text(
        text=get_notify_message(sp),
        reply_markup=get_notify_keyboard(sp, enabled, hours),
    )


class UpdatesCallback(CallbackData, prefix="updates"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    action (str): back, mext, last, switch.

    - back: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥.
    - next: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–ø–µ—Ä—ë–¥.
    - last: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - swith: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –æ–±—â–µ–≥–æ –Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞.

    page (int): –¢–µ–∫—É—â–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    cl (str): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    action: str
    page: int
    cl: str

@dp.callback_query(UpdatesCallback.filter())
async def updates_callback(
    query: CallbackQuery, sp: SPMessages, callback_data: NotifyCallback
) -> None:
    text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "

    # –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∞/–≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–Ω–∏—è
    if callback_data.action == "switch":
        cl = sp.user["class_let"] if callback_data.cl == "None" else None
    else:
        cl = None if callback_data.cl == "None" else callback_data.cl

    # –î–æ–ø–æ–ª–Ω—è–µ–º —à–∞–ø–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if cl is not None and sp.user["class_let"]:
        text += f"–¥–ª—è {cl}:\n"
        intent = Intent.construct(sp.sc, cl)
    else:
        text += "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
        intent = Intent()

    # –ü–æ–ª—á—É–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    updates = sp.sc.get_updates(intent)
    i = max(min(int(callback_data.page), len(updates) - 1), 0)

    if len(updates):
        if callback_data.action in ("last", "switch"):
            i = len(updates) - 1

        elif callback_data.action == "next":
            i = (i + 1) % len(updates)

        elif callback_data.action == "back":
            i = (i - 1) % len(updates)

        update_text = send_update(updates[i], cl=cl)
        if len(update_text) > 4000:
            text += "\n < —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π >"
        else:
            text += update_text

    else:
        text += "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    await query.message.edit_text(
        text=text, reply_markup=get_updates_keyboard(i, updates, cl)
    )


class CounterCallback(CallbackData, prefix="count"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    counter (str): –¢–∏–ø —Å—á—ë—Ç—á–∏–∫–∞.
    target (str): –¶–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞.

    +----------+-------------------------+
    | counter  | targets                 |
    +----------+-------------------------+
    | cl       | days, lessons. cabinets |
    | days     | cl, lessons. cabinets   |
    | lessons  | cl, days, main          |
    | cabinets | cl, days, main          |
    +----------+-------------------------+
    """
    counter: str
    target: str

@dp.callback_query(CounterCallback.filter())
async def counter_callback(
    query: CallbackQuery, sp: SPMessages, callback_data: NotifyCallback
) -> None:
    """–ö–ª–∞–≤–∏—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    counter = callback_data.counter
    target = callback_data.target

    if counter == target:
        target = None

    if counter == "cl" and target == "lessons" and not sp.user["class_let"]:
        target = None

    await query.message.edit_text(
        text=get_counter_message(sp.sc, counter, target),
        reply_markup=get_counter_keyboard(sp.user["class_let"], counter, target),
    )



class TutorlailCallback(CallbackData, prefix="tutorial"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.

    page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∫–∏.
    """
    page: int

@dp.callback_query(TutorlailCallback.filter())
async def tutorail_callback(query: CallbackQuery,
    callback_data: TutorlailCallback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."""
    await query.message.edit_text(
        text=TUTORIAL_MESSAGES[callback_data.page],
        reply_markup=get_tutorial_keyboard(callback_data.page)
    )


@dp.callback_query()
async def callback_handler(query: CallbackQuery) -> None:
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—á–∏–µ callback_data."""
    logger.warning("Unprocessed query - {}", query.data)


@dp.errors()
async def error_handler(exception: ErrorEvent) -> None:
    logger.exception(exception.exception)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

async def main() -> None:
    bot = Bot(TELEGRAM_TOKEN)
    logger.info("Bot started.")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
