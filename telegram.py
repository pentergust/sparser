"""Telegram –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ SPMessages.

–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è BotFather:
sc - –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
updates - –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
counter - –°—á—ë—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
notify - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
set_class - –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å
help - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

TODO: –†–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ–¥ –±–æ—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤

Author: Milinuri Nirvalen
Ver: 1.14-b1 (sp v6.0 +3b)
"""

import os
from contextlib import suppress
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageCantBeDeleted, MessageNotModified
from gotify import AsyncGotify
from loguru import logger
from dotenv import load_dotenv

from sp.counters import (
    cl_counter,
    days_counter,
    group_counter_res,
    index_counter,
)
from sp.intents import Intent
from sp.messages import SPMessages, send_counter, send_search_res, send_update
from sp.parser import Schedule
from sp.utils import load_file


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Middleware
# ======================

class SpMiddleware(BaseMiddleware):
    async def setup_sp(self, data: dict, user: types.User,
        chat: Optional[types.Chat] = None) -> None:
        cid = chat.id if chat else user.id
        sp = SPMessages(str(cid))
        data["sp"] = sp

    async def on_pre_process_message(self, message: types.Message, data: dict):
        await self.setup_sp(data, message.from_user, message.chat)

    async def on_pre_process_callback_query(self, query: types.CallbackQuery, data: dict):
        await self.setup_sp(data, query.from_user, query.message.chat if query.message else None)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∫ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
# ==============================

config = load_file(Path("sp_data/telegram.json"),
    {"token": "YOUR TG API TOKEN",
    "gotify": {
        "enabled": False,
        "base_url": None,
        "app_token": None
    }})

if config["gotify"]["enabled"]:
    gotify = AsyncGotify(
        base_url=config["gotify"]["base_url"],
        app_token=config["gotify"]["app_token"])
else:
    gotify = None

bot = Bot(config["token"])
dp = Dispatcher(bot)
dp.middleware.setup(SpMiddleware())
logger.add("sp_data/telegram.log")
days_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞",
              "—Å—É–±–±–æ—Ç–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è"]


# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# ================

HOME_MESSAGE = """üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
-- 7–≤ 6–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
-- —É—Ä–æ–∫–∏ 6–∞ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å—Ä
-- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è 8–±
-- 312 –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –ø—è—Ç–Ω–∏—Ü—É
-- —Ö–∏–º–∏—è 228 6–∞ –≤—Ç–æ—Ä–Ω–∏–∫

üè´ –í –∑–∞–ø—Ä–æ—Å–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
–£—Ä–æ–∫/–ö–∞–±–∏–Ω–µ—Ç: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.

–ö–ª–∞—Å—Å—ã: –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
-- –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É–∫–∑–∞–∞–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–∞—à –∫–ª–∞—Å—Å.
-- "?": –¥–ª—è —è–≤–Ω–æ–π –ø–æ–¥—Å—Ç–∞–≤–Ω–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.

–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:
-- –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
-- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—É–±–±–æ—Ç–∞ (–ø–Ω-—Å–±).
-- –°–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –Ω–µ–¥–µ–ª—è.

üåü –ü–æ—Ä—è–¥–æ–∫ –∏ —Ñ–æ—Ä–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –≤–∞–∂–Ω—ã, –±–∞–ª—É–π—Ç–µ—Å—å!"""

INFO_MESSAGE = """
‚öôÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.14-b1"""

SET_CLASS_MESSAGE = """
–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –∫–ª–∞—Å—Å.
–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

üåü –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π /pass.
–ù–æ —ç—Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.
–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /restrictions.

–°–ø–æ—Å–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å:
-- –í –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º: —Å–ª–µ–¥—É—é—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å ("1–∞").
-- /set_class –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞—Å—Å–æ–º ("7–∞").
-- /set_class [–∫–ª–∞—Å—Å] -- —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞.

üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º:
-- —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /set_class.
-- –ï—â—ë -> —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å."""

RESTRICTIONS_MESSAGE = """–í—Å—ë –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:

-- –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–ø—Ä–∞–≤–∫–µ.
-- –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö.
-- –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞.
-- –°—á—ë—Ç—á–∏–∫ "–ø–æ –∫–ª–∞—Å—Å–∞–º/—É—Ä–æ–∫–∏".
-- –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üåü –ù–∞ —ç—Ç–æ–º –≤—Å–µ –æ—Ç–ª–∏—á–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è."""


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞
# ==========================

to_home_markup = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home"))

week_markup = [{"home": "üè†", "week {cl}": "–ù–∞ –Ω–µ–¥–µ–ª—é", "select_day {cl}":"‚ñ∑"}]
sc_markup = [{"home": "üè†", "sc {cl}": "–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "select_day {cl}": "‚ñ∑"}]
home_murkup = [{"other": "üîß–ï—â—ë",
                "notify info": "üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "sc {cl}": "üìö–£—Ä–æ–∫–∏ {cl}"}]
other_markup = [{"home": "‚óÅ", "set_class": "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å"},
                {"count lessons main": "üìä–°—á—ë—Ç—á–∏–∫–∏",
                "updates last 0 None": "üìú–ò–∑–º–µ–Ω–µ–Ω–∏—è"}]


def markup_generator(sp: SPMessages, pattern: dict, cl: Optional[str]=None,
        exclude: Optional[str]=None, row_width: Optional[int]=3
        ) -> InlineKeyboardMarkup:
    """–°–æ–±–∏–∞—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —à–∞–±–ª–æ–Ω—É.

    Args:
        sp (SPMessages): –û–ø–∏—Å–∞–Ω–∏–µ
        cl (str, optional): –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data
        pattern (dict): –®–∞–±–ª–æ–Ω –¥–ª—è —Å–±–æ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        exclude (str, optional): –ö–ª—é—á –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        row_width (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    Returns:
        InlineKeyboardMarkup: –°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width)
    cl = cl if cl is not None else sp.user["class_let"]

    for group_row in pattern:
        row = []

        for callback_data, text in group_row.items():
            if exclude is not None and callback_data == exclude:
                continue

            if cl is None and "{cl}" in callback_data:
                continue

            if cl is None and "{cl}" in text:
                continue

            callback_data = callback_data.replace("{cl}", cl or "")
            text = text.replace("{cl}", cl or "")

            row.append(InlineKeyboardButton(text= text, callback_data= callback_data))
        markup.row(*row)

    return markup

def gen_updates_markup(update_index: int, updates: list,
                       cl: Optional[str]=None) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç inline-–∫–ª–≤–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    Args:
        update_index (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        updates (list): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å —Å–æ–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width=4)
    markup_pattern = {
            "home": "üè†",
            "updates back": "‚óÅ",
            "updates switch": f"{update_index+1}/{len(updates)}",
            "updates next": "‚ñ∑",
        }

    for k, v in markup_pattern.items():
        k += f" {update_index} {cl}"
        markup.insert(InlineKeyboardButton(text=v, callback_data=k))

    return markup

def select_day_markup(cl: str) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.

    Args:
        cl (str): –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤—ã–±–∏—Ä–∞—Ç–µ—Å—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

    Returns:
        InlineKeyboardMarkup: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏
    """
    markup = InlineKeyboardMarkup()
    for i, x in enumerate(days_names):
        markup.insert(
            InlineKeyboardButton(text=x, callback_data=f"sc_day {cl} {i}"))
    return markup

def gen_counters_markup(sp: SPMessages, counter: str, target: str) -> InlineKeyboardMarkup:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—á—ë—Ç—á–∏–∫–æ–≤.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        counter (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
        target (str): –ù–∞–∑–≤–∞–Ω–µ–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

    Returns:
        InlineKeyboardMarkup: –°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width=4)

    row = [InlineKeyboardButton(text="‚óÅ", callback_data="home")]
    counters = {"cl": "–ø–æ –∫–ª–∞—Å—Å–∞–º",
                "days": "–ü–æ –¥–Ω—è–º",
                "lessons": "–ü–æ —É—Ä–æ–∫–∞–º",
                "cabinets": "–ü–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º"}

    for k, v in counters.items():
        if counter == k:
            continue

        row.append(InlineKeyboardButton(text=v,
                                        callback_data=f"count {k} {target}"))
    markup.add(*row)

    row = []
    targets = {"cl": "–ö–ª–∞—Å—Å—ã",
               "days": "–¥–Ω–∏",
               "lessons": "–£—Ä–æ–∫–∏",
               "cabinets": "–ö–∞–±–∏–Ω–µ—Ç—ã",
               "main": "–û–±—â–µ–µ"}

    for k, v in targets.items():
        if target == k:
            continue

        if counter == k:
            continue

        if k == "main" and counter not in ["lessons", "cabinets"]:
            continue

        if counter in ["lessons", "cabinets"] and k in ["lessons", "cabinets"]:
            continue

        if counter == "cl" and k == "lessons" and not sp.user["class_let"]:
            continue

        row.append(InlineKeyboardButton(text=v,
                                        callback_data=f"count {counter} {k}"))
    markup.add(*row)

    return markup

def get_notifications_markup(sp: SPMessages, enabled: bool,
        hours: Optional[list[int]] = None) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–µ—Ç—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π—Ü
        enabled (bool): –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        hours (list, optional): –í –∫–∞–∫–æ–π —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    inline_keyboard = [[InlineKeyboardButton(text="‚óÅ", callback_data="home")]]

    if not enabled:
        inline_keyboard[0].append(
            InlineKeyboardButton(text="üîî–í–∫–ª—é—á–∏—Ç—å", callback_data="notify on")
        )

    else:
        inline_keyboard[0].append(
            InlineKeyboardButton(text="üîï–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="notify off")
        )

        if hours:
            inline_keyboard[0].append(
                InlineKeyboardButton(text="‚ùå", callback_data="notify reset")
            )

        hours_line = []
        for i, x in enumerate(range(6, 24)):
            if str(x) in hours:
                continue

            if x % 6 == 0:
                inline_keyboard.append(hours_line)
                hours_line = []

            hours_line.append(
                InlineKeyboardButton(text=x, callback_data=f"notify add {x}")
            )

        if len(hours_line):
            inline_keyboard.append(hours_line)

    return InlineKeyboardMarkup(row_width=6, inline_keyboard=inline_keyboard)

def get_home_markup(sp: SPMessages) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–ª–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏
    """
    cl = sp.user["class_let"]

    if cl is None:
        markup = markup_generator(sp, other_markup, exclude="home")
    else:
        markup = markup_generator(sp, home_murkup)

    return markup


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =======================

def send_notification_message(sp: SPMessages, enabled: bool,
        hours: Optional[list[int]] = None) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        enabled (bool): –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        hours (list[int], optional): –í –∫–∞–∫–æ–∏–µ —á–∞—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.
    """
    message = "–í—ã –ø–æ–ª—É—á–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.\n"

    if enabled:
        message += "\nüîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã."
        message += "\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
        message += "\n–í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞."

        if hours:
            message += "\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: "
            message += ", ".join(map(str, set(hours)))
    else:
        message += "\nüîï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."

    return message

def get_counter_message(sc: Schedule, counter: str, target: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–æ–≤.

    Args:
        sc (Schedule): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
        counter (str): –¢–∏–ø —Å—á—ë—Ç—á–∏–∫–∞
        target (str): –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á—ë—Ç—á–∏–∫–∞

    Returns:
        str: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    intent = Intent.new()

    if counter == "cl":
        if target == "lessons":
            intent = Intent.construct(sc, cl=sc.cl)
        res = cl_counter(sc, intent)
    elif counter == "days":
        res = days_counter(sc, intent)
    elif counter == "lessons":
        res = index_counter(sc, intent)
    else:
        res = index_counter(sc, intent, cabinets_mode=True)

    groups = group_counter_res(res)
    message = f"‚ú® –°—á—ë—Ç—á–∏–∫ {counter}/{target}:"
    message += send_counter(groups, target=target)
    return message

def send_home_message(sp: SPMessages) -> str:
    """–û—Ç–ø–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π

    Returns:
        str: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    cl = sp.user["class_let"]

    if cl:
        message = f"üíé –í–∞—à –∫–ª–∞—Å—Å {cl}."
    elif sp.user["set_class"]:
        message = "üåü –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–ª–∞—Å—Å—É."
    else:
        message = "üëÄ –•–∏—Ç—Ä–æ, –Ω–æ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
        message += "\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /set_class"

    message += "\n\n"
    message += HOME_MESSAGE

    return message

def process_request(sp: SPMessages, request_text: str) -> Optional[str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        request_text (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """
    intent = Intent.parse(sp.sc, request_text.split())

    # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç–∞ –≤ –º–∞—à–∏–Ω—É –¥–ª—è —Å–ø–∞–º–∞
    # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫/–∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
    if len(intent.cabinets):
        res = sp.sc.search(list(intent.cabinets)[-1], intent, True)
        text = send_search_res(intent, res)

    elif len(intent.lessons):
        res = sp.sc.search(list(intent.lessons)[-1], intent, False)
        text = send_search_res(intent, res)

    elif intent.cl or intent.days:
        text = sp.send_lessons(intent) if intent.days else sp.send_today_lessons(intent)
    else:
        text = None

    return text


# –û–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
# ========================

@dp.message_handler(commands=["start", "help"])
async def start_command(message: types.Message, sp: SPMessages) -> None:
    logger.info(message.chat.id)
    with suppress(MessageCantBeDeleted):
        await message.delete()

    if sp.user["set_class"]:
        markup = get_home_markup(sp)
        await message.answer(text=send_home_message(sp), reply_markup=markup)
    else:
        await message.answer(text=SET_CLASS_MESSAGE)

@dp.message_handler(commands=["pass"])
async def pass_commend(message: types.Message, sp: SPMessages) -> None:
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞."""
    logger.info(message.chat.id)
    if not sp.user["set_class"]:
        sp.user["set_class"] = True
        sp.save_user()
        markup = get_home_markup(sp)
        await message.answer(text=send_home_message(sp), reply_markup=markup)

@dp.message_handler(commands=["restrictions"])
async def restrictions_commend(message: types.Message) -> None:
    await message.answer(text=RESTRICTIONS_MESSAGE)

@dp.message_handler(commands=["info"])
async def info_command(message: types.Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±–æ—Ç–∞."""
    await message.answer(text=sp.send_status()+INFO_MESSAGE,
                         reply_markup=to_home_markup)

@dp.message_handler(commands=["updates"])
async def updates_command(message: types.Message, sp: SPMessages) -> None:
    """–û–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
    logger.info(message.chat.id)
    updates = sp.sc.updates
    markup = gen_updates_markup(max(len(updates)-1, 0), updates)
    if len(updates):
        text = send_update(updates[-1])
    else:
        text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    await message.answer(text=text, reply_markup=markup)

@dp.message_handler(commands=["counter"])
async def counter_command(message: types.Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤—è–ª–µ—Ç —Å—á—ë—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤."""
    logger.info(message.chat.id)
    text = get_counter_message(sp.sc, "lessons", "main")
    markup = gen_counters_markup(sp, "lessons", "main")
    await message.answer(text=text, reply_markup=markup)

@dp.message_handler(commands=["sc"])
async def sc_command(message: types.Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."""
    logger.info(message.chat.id)

    if message.reply_to_message and message.reply_to_message.from_user.id != bot.id:
        content = message.reply_to_message.text
    else:
        content = message.get_args()

    if content:
        text = process_request(sp, content)
        await message.answer(text=text)

    elif sp.user["class_let"]:
        await message.answer(text=sp.send_today_lessons(Intent.new()),
                             reply_markup=markup_generator(sp, week_markup))
    else:
        text = "‚ö†Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."
        await message.answer(text=text)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
# ==========================

@dp.message_handler(commands=["set_class"])
async def set_class_command(message: types.Message, sp: SPMessages) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    logger.info(message.chat.id)

    if message.reply_to_message and message.reply_to_message.from_user.id != bot.id:
        content = message.reply_to_message.text
    else:
        content = message.get_args()

    if content:
        if content in sp.sc.lessons:
            sp.set_class(content)
            text = f"‚úèÔ∏è –ö–ª–∞—Å—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {content}"
        else:
            text = "üëÄ –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    else:
        sp.reset_user()
        text = SET_CLASS_MESSAGE

    await message.answer(text=text)

@dp.message_handler(commands=["notify"])
async def notify_command(message: types.Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."""
    logger.info(message.chat.id)

    enabled = sp.user["notifications"]
    hours = sp.user["hours"]

    text = send_notification_message(sp, enabled, hours)
    markup = get_notifications_markup(sp, enabled, hours)
    await message.answer(text=text, reply_markup=markup)


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================

@dp.message_handler()
async def main_handler(message: types.Message, sp: SPMessages) -> None:
    uid = str(message.chat.id)
    text = message.text.strip().lower()
    logger.info("{} {}", uid, text)

    if sp.user["set_class"]:
        answer = process_request(sp, text)

        if answer is not None:
            await message.answer(text=answer)
        elif message.chat.type == "private":
            await message.answer(text="üëÄ –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")

    elif text in sp.sc.lessons:
        logger.info("Set class {}", text)
        sp.set_class(text)
        markup = get_home_markup(sp)
        await message.answer(text=send_home_message(sp), reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
# ========================

@dp.callback_query_handler()
async def callback_handler(callback: types.CallbackQuery, sp: SPMessages) -> None:
    header, *args = callback.data.split()
    uid = str(callback.message.chat.id)
    logger.info("{}: {} -- {}", uid, header, args)

    if header == "home":
        text = send_home_message(sp)
        markup = get_home_markup(sp)

    # –í—ã–∑–æ—ã –º–µ–Ω—é –∏–Ω—Å—Ç—Ä–º–µ–Ω—Ç–æ–≤
    elif header == "other":
        text = sp.send_status() + INFO_MESSAGE
        markup = markup_generator(sp, other_markup)

    # –°—á—ë—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
    elif header == "count":
        if args[0] == args[1]:
            args[1] = None

        if args[0] == "cl" and args[1] == "lessons" and not sp.user["class_let"]:
            args[1] = None

        text = get_counter_message(sp.sc, args[0], args[1])
        markup = gen_counters_markup(sp, args[0], args[1])

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    elif header == "sc":
        text = sp.send_today_lessons(Intent.construct(sp.sc, cl=args[0]))
        markup = markup_generator(sp, week_markup, cl=args[0])

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    elif header == "week":
        intent = Intent.construct(sp.sc, days=[0, 1, 2, 3, 4, 5], cl=args[0])
        text = sp.send_lessons(intent)
        markup = markup_generator(sp, sc_markup, cl=args[0])

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    elif header == "select_day":
        text = f"üìÖ –Ω–∞ ...\nüî∂ –î–ª—è {args[0]}:"
        markup = select_day_markup(args[0])

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ–Ω—å
    elif header == "sc_day":
        day = int(args[1])

        if day == 7:
            day = [0, 1, 2, 3, 4, 5]

        intent = Intent.construct(sp.sc, days=day, cl=args[0])

        if day == 6:
            text = sp.send_today_lessons(intent)
            markup = markup_generator(sp, week_markup, cl=args[0])
        else:
            text = sp.send_lessons(intent)
            markup = markup_generator(sp, sc_markup, cl=args[0])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    elif header == "updates":
        text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "

        # –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∞/–≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–Ω–∏—è
        if args[0] == "switch":
            cl = sp.user["class_let"] if args[2] == "None" else None
        else:
            cl = None if args[2] == "None" else args[2]

        # –î–æ–ø–ª–Ω—è–µ–º —à–∞–ø–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if cl is not None and sp.user["set_class"]:
            text += f"–¥–ª—è {cl}:\n"
            intent = Intent.construct(sp.sc, cl=args[2])
        else:
            text += "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
            intent = Intent.new()

        updates = sp.sc.get_updates(intent)
        i = max(min(int(args[1]), len(updates)-1), 0)

        if len(updates):
            if args[0] in ["last", "switch"]:
                i = len(updates)-1

            elif args[0] == "next":
                i = (i+1) % len(updates)

            elif args[0] == "back":
                i = (i-1) % len(updates)

            text += send_update(updates[i])
        else:
            text += "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

        markup = gen_updates_markup(i, updates, cl)

    # –°–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif header == "set_class":
        sp.reset_user()
        text = SET_CLASS_MESSAGE
        markup = to_home_markup

    elif header == "notify":
        command, *arg_hours = args

        if command == "on":
            sp.user["notifications"] = True
            sp.save_user()
        elif command == "off":
            sp.user["notifications"] = False
            sp.save_user()
        elif command == "add":
            for x in arg_hours:
                if x not in sp.user["hours"]:
                    sp.user["hours"].append(x)

            sp.save_user()

        elif command == "reset":
            sp.user["hours"] = []
            sp.save_user()

        enabled = sp.user["notifications"]
        hours = sp.user["hours"]

        text = send_notification_message(sp, enabled, hours)
        markup = get_notifications_markup(sp, enabled, hours)

    else:
        text = "üëÄ –£–ø—Å, —ç—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∞."
        markup = to_home_markup
        logger.warning("Unknown header - {}", header)

    with suppress(MessageNotModified):
        await callback.message.edit_text(text=text, reply_markup=markup)

    await callback.answer()


@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    logger.exception("Cause exception {} in u:{}", exception, update)
    if gotify is not None:
        await gotify.create_message(
            str(exception), title="Oops!", priority=5
        )
    return True


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
