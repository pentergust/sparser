"""
Telegram –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ SParser.

Author: Milinuri Nirvalen
Ver: 1.3 (sp v4.2)

–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è BotFather:
sc - –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
updates - –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
counter - –°—á—ë—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
set_class - –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å
help - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
info - ‚öô–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
"""

from sp import SPMessages
from sp import Schedule
from sp import load_file

import re

from datetime import datetime
from pathlib import Path
from typing import Optional

from aiogram import types
from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardRemove
from loguru import logger


API_TOKEN = load_file(Path("sp_data/token.json"),
                      {"token": "YOUR TG API TOKEN"})["token"]
bot = Bot(API_TOKEN)
dp = Dispatcher(bot)
logger.add("sp_data/telegram.log")
days_str = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü", "—Å—É–±–±–æ—Ç"]
days_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞",
              "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è"]


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞
# ==========================

to_home_markup = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home"))

week_markup = [{"home": "üè†", "week;{cl}": "–ù–∞ –Ω–µ–¥–µ–ª—é", "select_day;{cl}":"‚ñ∑"}]
sc_markup = [{"home": "üè†", "sc;{cl}": "–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "select_day;{cl}": "‚ñ∑"}]
counter_markup = [{"home": "‚óÅ", "count": "–£—Ä–æ–∫–∏", "count;cl": "–£—Ä–æ–∫–∏ {cl}",
                   "count;cabinets": "–ö–ª–∞—Å—Å—ã",
                   "count;cabinets;cl": "–ö–ª–∞—Å—Å—ã {cl}"}]
home_murkup = [{"other": "üîß", "updates;last;0;{cl}": "üîî", "sc;{cl}": "üìö"}]
other_markup = [{"home": "‚óÅ", "set_class": "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å"},
                {"count": "–°—á—ë—Ç—á–∏–∫",}]


def markup_generator(sp: SPMessages, pattern: dict, cl: Optional[str] = None,
                     exclude: Optional[str] = None,
                     row_width: Optional[int] = 3) -> InlineKeyboardMarkup:
    """–°–æ–±–∏–∞—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —à–∞–±–ª–æ–Ω—É.

    Args:
        sp (SPMessages): –û–ø–∏—Å–∞–Ω–∏–µ
        cl (str, optional): –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data
        pattern (dict): –®–∞–±–ª–æ–Ω –¥–ª—è —Å–±–æ—Ä–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        exclude (str, optional): –ö–ª—é—á –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        row_width (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    Returns:
        InlineKeyboardMarkup: –°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width)
    cl = cl if cl is not None else sp.user["class_let"]

    for group_row in pattern:
        row = []

        for callback_data, text in group_row.items():
            if exclude is not None and callback_data == exclude:
                continue

            callback_data = callback_data.replace("{cl}", cl)
            text = text.replace("{cl}", cl)

            row.append(InlineKeyboardButton(text= text, callback_data= callback_data))
        markup.row(*row)

    return markup

def gen_updates_markup(page: int, pages: list,
                    cl: Optional[str] = None) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(row_width= 4)
    markup_pattern = {
            "home": "üè†",
            "updates;back": "‚óÅ",
            "updates;switch": f"{page+1}/{len(pages)}",
            "updates;next": "‚ñ∑",
        }

    for k, v in markup_pattern.items():
        k += f";{page};{cl}"
        markup.insert(InlineKeyboardButton(text= v, callback_data= k))

    return markup

def gen_select_day_markup(cl: str) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup()

    for i, x in enumerate(days_names):
        markup.insert(InlineKeyboardButton(text= x,
                                           callback_data= f"sc_day;{cl};{i}"))
    return markup


# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
# ================

HOME_MESSAGE = """üè´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
-- –ö–ª–∞—Å—Å: –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
-- –î–Ω–∏: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—É–±–±–æ—Ç–∞, —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –Ω–µ–¥–µ–ª—è.
-- –£—Ä–æ–∫: –≤—Å–µ –µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
-- –ö–∞–±–∏–Ω–µ—Ç: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –µ–≥–æ –ª–∏—Ü–∞
üåü –ü–æ—Ä–∞–¥–æ–∫ –∏ —Ñ–æ—Ä–º–∞ –Ω–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è!

üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
-- 7–≤
-- —É—Ä–æ–∫–∏ 6–∞ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ —Å—Ä–µ–¥—É
-- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è 8–±
-- 312 –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫
-- —Ö–∏–º–∏—è 228"""

INFO_MESSAGE = """
–û –±–æ—Ç–µ:
:: –ê–≤—Ç–æ—Ä: @milinuri
:: –í–µ—Ä—Å–∏—è: 1.3 (üî∂Testing)

üëÄ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @milinuri
"""

SET_CLASS_MESSAGE = """
‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –µ–º—É –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à –∫–ª–∞—Å—Å.
üí° –í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /set_class

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É—é—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å..."""


# –û–ø–µ—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
# ========================

@dp.message_handler(commands= ["start"])
async def start_command(message: types.Message):
    sp = SPMessages(str(message.chat.id), Schedule())
    logger.info(f"U:{message.chat.id}")
    await message.delete()

    if sp.user["set_class"]:
        markup = markup_generator(sp, home_murkup)
        await message.answer(text= HOME_MESSAGE, reply_markup= markup)
    else:
        await message.answer(text= SET_CLASS_MESSAGE)


@dp.message_handler(commands= ["help"])
async def help_command(message: types.Message):
    sp = SPMessages(str(message.chat.id), Schedule())
    logger.info(f"U:{message.chat.id}")
    markup = markup_generator(sp, home_murkup)
    await message.answer(text= HOME_MESSAGE, reply_markup= markup)


@dp.message_handler(commands= ["info"])
async def info_command(message: types.Message):
    logger.info(f"U:{message.chat.id}")
    sp = SPMessages(str(message.chat.id), Schedule())
    await message.answer(text= sp.send_status()+INFO_MESSAGE,
                         reply_markup= to_home_markup)


@dp.message_handler(commands= ["updates"])
async def updates_command(message: types.Message):
    sp = SPMessages(str(message.chat.id), Schedule())
    logger.info(f"U:{message.chat.id}")
    pages = sp.get_updates_pages()
    i = len(pages)-1
    markup = gen_updates_markup(i, pages)

    await message.answer(text= sp.send_updates_page(pages[i]),
                         reply_markup= markup)


@dp.message_handler(commands= ["counter"])
async def lessons_command(message: types.Message):
    sp = SPMessages(str(message.chat.id), Schedule())
    logger.info(f"U:{message.chat.id}")
    markup = markup_generator(sp, counter_markup,
                              exclude= "count", row_width= 4)
    await message.answer(text= sp.count_lessons(),
                         reply_markup= markup)


@dp.message_handler(commands= ["set_class"])
async def set_class_command(message: types.Message):
    sp = SPMessages(str(message.chat.id), Schedule())
    logger.info(f"U:{message.chat.id}")
    sp.user["set_class"] = False
    sp.save_user()
    await message.answer(text= SET_CLASS_MESSAGE)


@dp.message_handler(commands= ["sc"])
async def sc_command(message: types.Message):
    sp = SPMessages(str(message.chat.id), Schedule())
    logger.info(f"U:{message.chat.id}")

    if sp.user["set_class"]:
        await message.answer(text= sp.send_today_lessons(),
                             reply_markup= markup_generator(sp, week_markup))
    else:
        await message.answer(text= SET_CLASS_MESSAGE)


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================

@dp.message_handler()
async def main_handler(message: types.Message):
    uid = str(message.chat.id)
    sc = Schedule()
    sp = SPMessages(uid, sc)
    logger.info(f"{uid} {message.text}")

    if sp.user["set_class"]:
        args = message.text.lower().strip().split()
        weekday = datetime.today().weekday()
        days = []
        cl = None
        lesson = None
        cabinet = None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # -----------------------------

        for arg in args:
            if arg == "—Å–µ–≥–æ–¥–Ω—è":
                days.append(weekday)

            elif arg == "–∑–∞–≤—Ç—Ä–∞":
                days.append(datetime.today().weekday()+1)

            elif arg.startswith("–Ω–µ–¥–µ–ª"):
                days = [0, 1, 2, 3, 4, 5]

            elif arg in sc.lessons:
                cl = arg

            elif arg in sc.l_index:
                lesson = arg

            elif arg in sc.c_index:
                cabinet = arg

            else:
                # –ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –ø—è—Ç–Ω–∏—Ü... -–∞, -—É, -—ã...
                days += [i for i, k in enumerate(days_str) if arg.startswith(k)]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # ------------------

        logger.info(f"answer c:{cabinet} l:{lesson} d:{days} cl:{cl}")
        if cabinet:
            res = sp.search_cabinet(cabinet, lesson, days, cl)
            await message.answer(text= res, reply_markup= to_home_markup)

        elif lesson:
            res = sp.search_lesson(lesson, days, cl)
            await message.answer(text= res, reply_markup= to_home_markup)

        elif cl or days:
            markup = markup_generator(sp, week_markup, cl= cl)
            if days:
                await message.answer(text= sp.send_lessons(days= days, cl= cl),
                                     reply_markup= markup)
            else:
                await message.answer(text= sp.send_today_lessons(cl= cl),
                                     reply_markup= markup)
        else:
            await message.answer(text= "üëÄ –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...?")


    # –£—Å—Ç–∞–µ–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # ==============================

    else:
        text = message.text.lower()
        await message.answer(text= sp.set_class(text))

        if text in sc.lessons:
            logger.info(f"set_class(cl:{text})")
            markup = markup_generator(sp, home_murkup)
            await message.answer(text= HOME_MESSAGE, reply_markup= markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
# ========================

@dp.callback_query_handler()
async def callback_handler(callback: types.CallbackQuery):
    header, *args = callback.data.split(";")
    uid = str(callback.message.chat.id)
    sp = SPMessages(uid, Schedule())
    logger.info("U:{} {} {}", uid, header, args)

    # –í—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏
    if header == "home":
        markup = markup_generator(sp, home_murkup)
        await callback.message.edit_text(text=HOME_MESSAGE, reply_markup= markup)

    if header == "count":
        cabinets = True if "cabinets" in args else False
        cl = sp.user["class_let"] if "cl" in args else None
        text = sp.count_lessons(cabinets= cabinets, cl= cl)
        markup = markup_generator(sp, counter_markup, exclude= "count",
                                  row_width= 4)
        await callback.message.edit_text(text= text, reply_markup=markup)

    if header == "sc":
        text = sp.send_today_lessons(cl= args[0])
        markup = markup_generator(sp, week_markup, cl= args[0])
        await callback.message.edit_text(text= text, reply_markup= markup)

    if header == "week":
        text = sp.send_lessons(days= [0, 1, 2, 3, 4, 5], cl= args[0])
        markup = markup_generator(sp, sc_markup, cl= args[0])
        await callback.message.edit_text(text= text, reply_markup= markup)

    if header == "select_day":
        markup = gen_select_day_markup(args[0])
        await callback.message.edit_text(text= f"üè´ –î–ª—è {args[0]}: ...",
                                         reply_markup= markup)

    if header == "sc_day":
        cl = args[0]
        day = int(args[1])

        if day == 6:
            text = sp.send_today_lessons(cl= cl)
        elif day == 7:
            text = sp.send_lessons(days=[0, 1, 2, 3, 4, 5], cl= cl)
        else:
            text = sp.send_lessons(days= [day], cl=cl)

        markup = markup_generator(sp, sc_markup, cl= cl)
        await callback.message.edit_text(text= text, reply_markup= markup)

    if header == "updates":
        cl = args[2]
        i = int(args[1])
        text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è"

        if cl != "None":
            pages = sp.get_updates_pages(cl= cl)
        else:
            pages = sp.get_updates_pages()

        if args[0] == "switch":
            cl = None if args[2] != "None" else sp.user["class_let"]
            pages = sp.get_updates_pages(cl= cl)
            i = len(pages)-1

        elif args[0] == "next":
            i = (i+1) % len(pages)

        elif args[0] == "back":
            i = (i-1) % len(pages)

        elif args[0] == "last":
            i = len(pages)-1

        text += f" –¥–ª—è {cl}:\n" if cl else ":\n"
        text += sp.send_updates_page(pages[i])
        markup = gen_updates_markup(i, pages, cl)
        await callback.message.edit_text(text= text, reply_markup= markup)

    if header == "other":
        text = sp.send_status() + INFO_MESSAGE
        markup = markup_generator(sp, other_markup)
        await callback.message.edit_text(text= text, reply_markup= markup)

    if header == "set_class":
        sp.user["set_class"] = False
        sp.save_user()
        await callback.message.edit_text(text= SET_CLASS_MESSAGE)

    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

if __name__ == "__main__":
    executor.start_polling(dp)
