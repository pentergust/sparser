"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Schedule.

Auyhor: Milinuri Nirvalen
"""
from .filters import Filters
from .filters import construct_filters
from .utils import load_file
from .utils import save_file
from .parser import Schedule

from collections import Counter
from datetime import datetime
from datetime import time
from pathlib import Path
from typing import Optional

from loguru import logger


users_path = "sp_data/users.json"
default_user_data = {"class_let":None, "set_class": False, "last_parse": 0,
             "check_updates": 0}
days_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É"]

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤: –Ω–∞—á–∞–ª–æ (—á–∞—Å, –º–∏–Ω—É—Ç—ã), –∫–æ–Ω–µ—Ü (—á–∞—Å, –º–∏–Ω—É—Ç—ã)
timetable = [
    [8, 0, 8, 45], [8, 55, 9, 40], [9, 55, 10, 40], [10, 55, 11, 40],
    [11, 50, 12, 35], [12, 45, 13, 30], [13, 40, 14, 25], [14, 35, 15, 20],
]


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ====================================

def get_complited_lessons() -> list[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤."""
    now = datetime.now().time()
    first_lesson = time(*timetable[0][:1])
    last_lesson = time(*timetable[-1][2:])

    if now >= last_lesson or now < first_lesson:
        return [-1]

    return [i for i, x in enumerate(timetable) if now >= time(x[0], x[1])]

def send_cl_updates(cl_updates: list) -> str:
    """–í–æ–∑–≤—Ä–∞—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.

    Args:
        cl_updates (list): –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞
    """
    message = ""
    for u in cl_updates:
        if str(u[1]) == "None":
            message += f"{u[0]}: ++{u[2]}\n"
            continue

        message += f"{u[0]}: "
        ol, oc = str(u[1]).split(':')
        l, c = str(u[2]).split(':')

        if ol == "---":
            message += f"++{u[2]}\n"
        elif l == "---":
            message += f"--{u[1]}\n"
        elif oc == c:
            message += f"{ol} -> {l}:{c}\n"
        elif ol == l:
            message += f"{l}: ({oc} -> {c})\n"
        else:
            message += f"{u[1]} -> {u[2]}\n"

    return message

def send_update(update: dict) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    Args:
        update (–¢–ò–ü): –°–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        cl (str, optional): –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

    Returns:
        –¢–ò–ü: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    """
    t = datetime.fromtimestamp(update["time"]).strftime("%d.%m %H:%M")
    message = f"‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ {t}:\n"

    for day, day_updates in enumerate(update["updates"]):
        if not day_updates:
            continue

        message += f"\nüî∑ –ù–∞ {days_names[day]}\n"
        for u_cl, cl_updates in day_updates.items():
            message += f"üî∏ –î–ª—è {u_cl}:"
            message += "\n" if len(cl_updates) > 1 else " "
            message += send_cl_updates(cl_updates)

    return message

def send_day_lessons(lessons: list) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.

    Args:
        lessons (list): –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –¥–µ–Ω—å
    """
    message = ""
    complited_lessons = get_complited_lessons()

    for i, x in enumerate(lessons):
        cursor = "üîπ" if i == complited_lessons[-1] else f"{i+1}."
        message += f"\n{cursor}"

        tt = timetable[i]
        if i not in complited_lessons:
            message += time(tt[0], tt[1]).strftime(" %H:%M -")
        message += time(tt[2], tt[3]).strftime(" %H:%M")

        if i == complited_lessons[-1]:
            message += " > "
        elif i in complited_lessons:
            message += " ‚îÉ "
        else:
            message += " ‚îÇ "

        message += "; ".join(x) if isinstance(x, list) else x

    return message

def send_search_res(flt: Filters, res: dict) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    Args:
        flt (Filters): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ–∏–ª—å—Å—Ç—Ä–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
        res (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏

    Returns:
        str: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = f"üîé –ø–æ–∏—Å–∫ "
    if flt.cabinets:
        message += f" [{', '.join(flt.cabinets)}]"
    if flt.cl:
        message += f" ({', '.join(flt.cl)})"
    if flt.lessons:
        message += f" ({', '.join(flt.lessons)})"
    if flt.days:
        message += f"\n* –ù–∞: {', '.join(map(lambda x: days_names[x], flt.days))}"

    for day, lessons in enumerate(res):
        if not lessons:
            continue

        while lessons and not lessons[-1]:
            del lessons[-1]

        message += f"\n\nüìÖ –ù–∞ {days_names[day]}:"
        message += send_day_lessons(lessons)

    return message


class SPMessages:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Schedule."""

    def __init__(self, uid: str):
        """
        Args:
            uid (str): –ö—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            sc (Schedule): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
            users_path (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        super(SPMessages, self).__init__()

        self.uid = uid
        self._users_path = Path(users_path)
        self.user = self.get_user()
        self.sc = Schedule(self.user["class_let"])

    def send_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—É–∏—é –æ –ø–∞—Ä—Å–µ—Ä–µ."""
        last_parse = datetime.fromtimestamp(self.sc.schedule["last_parse"])
        next_update = datetime.fromtimestamp(self.sc.schedule["next_update"])

        res = "–í–µ—Ä—Å–∏—è sp: 5.1-Beta (63)"
        res += f"\n:: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(load_file(self._users_path))}"
        res += "\n:: –ê–≤—Ç–æ—Ä: Milinuri Nirvalen (@milinuri)"
        res += f"\n:: –ö–ª–∞—Å—Å: {self.user['class_let']}"
        res += f"\n:: –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_parse.strftime('%d %h –≤ %H:%M')}"
        res += f"\n:: –ü—Ä–æ–≤–µ—Ä–∫–∞: {next_update.strftime('%d %h –≤ %H:%M')}"
        res += f"\n:: –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ~{len(self.sc.l_index)}"
        res += f"\n:: –ö–∞–±–∏–Ω–µ—Ç–æ–≤: ~{len(self.sc.c_index)}"
        res += f"\n:: –ö–ª–∞—Å—Å—ã: {', '.join(self.sc.lessons)}"
        return res


    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # ===============================

    def get_user(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return load_file(self._users_path).get(self.uid, default_user_data)

    def save_user(self) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ self._users_path."""
        users = load_file(self._users_path, {})
        users.update({self.uid: self.user})
        save_file(self._users_path, users)
        logger.info("Save user: {}", self.uid)

    def reset_user(self) -> None:
        """–¶–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω—ã–Ω–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        users = load_file(self._users_path, {})
        users.update({self.uid: default_user_data})
        save_file(self._users_path, users)
        logger.info("Reset user: {}", self.uid)

    def set_class(self, cl: str) -> None:
        """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            cl (str): –¶–µ–ª–µ–≤–æ–π –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if cl in self.sc.lessons:
            self.user["class_let"] = cl
            self.user["set_class"] = True
            self.user["last_parse"] = self.sc.schedule["last_parse"]
            self.save_user()

    def get_lessons_updates(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
        if self.sc.schedule["last_parse"] == self.user["last_parse"]:
            return []

        logger.info("Get lessons updates")
        flt = construct_filters(self.sc, cl=self.user["class_let"])
        updates = self.sc.get_updates(flt, self.user["last_parse"])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.user["last_parse"] = self.sc.schedule["last_parse"]
        self.save_user()
        return updates


    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ======================

    def send_lessons(self, flt: Filters) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.

        Args:
            flt (Filters): –ù–∞–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è

        Returns:
            str: –°–æ–æ–±–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
        """
        cl = flt.cl or [self.user["class_let"]]
        lessons = {x: self.sc.get_lessons(x) for x in cl}
        message = ""
        for day in flt.days:
            message += f"\nüìÖ –ù–∞ {days_names[day]}:"
            for cl, cl_lessons in lessons.items():
                message += f"\nüî∂ –î–ª—è {cl}:"
                message += f"{send_day_lessons(cl_lessons[day])}"
            message += "\n"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏–∏
        updates = self.get_lessons_updates()
        if updates:
            message += f"\n–£ –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! üéâ"
            for update in updates:
                message += f"\n{send_update(update)}"
        return message

    def send_today_lessons(self, flt: Filters) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
        –ï—Å–æ–∏ —É—Ä–æ–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.

        Args:
            cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞

        Returns:
            str: –°–æ–æ–±—â—ã–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        """

        now = datetime.now()
        today = min(now.weekday(), 5)
        cl = flt.cl or [self.user["class_let"]]
        lessons = max(map(lambda x: len(self.sc.get_lessons(x)), cl))
        hour = timetable[lessons-1][2]

        if now.hour >= hour:
            today += 1

        if today > 5:
            today = 0

        flt = construct_filters(self.sc, cl=flt.cl, days=today)
        return self.send_lessons(flt)

    def search_lesson(self, lesson: str, flt: Filters) -> str:
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± —É—Ä–æ–∫–µ. –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        res = self.sc.search(lesson, flt)
        return send_search_res(flt, res)

    def search_cabinet(self, cabinet: str, flt: Filters) -> str:
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–∞–±–∏–Ω–µ—Ç–µ. –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        res = self.sc.search(cabinet, flt, cabinets_mode=True)
        return send_search_res(flt, res)


    def count_lessons(self, cabinets: Optional[bool] = False, cl: Optional[str] = None) -> str:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤.

        Args:
            cabinets (bool, optional): –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã
                –≤–º–µ—Å—Ç–æ —É—Ä–æ–∫–æ–≤
            cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–¥—Å—á—ë—Ç

        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if cl:
            cl = self.sc.get_class(cl)

        index = self.sc.c_index if cabinets else self.sc.l_index
        res = {}

        for obj, days in index.items():
            cnt = Counter()
            for day, another in enumerate(days):
                for a_k, a_v in another.items():
                    if cl:
                        cnt[a_k] += len(a_v.get(cl, []))
                    else:
                        cnt[a_k] += sum(map(len, a_v.values()))

            c = sum(cnt.values())
            if c:
                if str(c) not in res:
                    res[str(c)] = {}

                res[str(c)][obj] = cnt


        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # ------------------

        message = "‚ú® –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ "
        if cabinets:
            message += "–∫–∞–±–∏–Ω–µ—Ç—ã"
        else:
            message += "—É—Ä–æ–∫–∏"

        if cl:
            message += f" —É {cl}"


        for k, v in sorted(res.items(), key=lambda x: int(x[0]), reverse=True):
            message += f"\n\nüîò {k} —Ä–∞–∑(–∞):"

            for obj, another in v.items():
                another = {k:v for k, v in another.items() if v != 0}

                if len(v) > 1:
                    message += "\n--"

                message += f" {obj}"

                for c, n in sorted(another.items(), key=lambda x: x[1], reverse=True):
                    if n == 1 and len(another) > 1:
                        message += f" üî∏{c}"
                    elif n > 1 and len(another) > 1:
                        message += f" üîπ{c}:{n}"
                    else:
                        message += f" {c}"

        return message
