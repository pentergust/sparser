"""Собрание всех перечисления расписания.

Одна из причин вынесения перечислений - решение циклической зависимости
для некоторых компонентов.
А также будет удобно хранить все перечисления в одном месте, не так ли?
Благодяря этому файлы компонентов могут сконцентрироваться на том,
чтобы писать абстрактные классы, а также их реализации, не задумываясь
о перечислениях.
"""

from enum import IntEnum

# Дни недели
# ==========

DAY_NAMES = ("понедельник", "вторник", "среда", "четверг", "пятница", "суббота")
SHORT_DAY_NAMES = ("пн", "вт", "ср", "чт", "пт", "сб")

class WeekDays(IntEnum):
    """Все доступные дни недели.

    Если вас смущает что вместе дней недели указаы просто цифры, то
    это перечисление для вас.
    Также оно решает проблему магическиех чисел в условиях.
    """

    MONDAY = 0
    TUESDAY = 1
    WEDNESDAY = 2
    THURSDAY = 3
    FRIDAY = 4
    SATURDAY = 5

    def to_str(self) -> str:
        """Преобразует индекс дня недели в названия дня недели."""
        return DAY_NAMES[self.value]

    def to_short_str(self) -> str:
        """Преобразует индекс дня недели в короткую строку."""
        return SHORT_DAY_NAMES[self.value]


# Расписание
# ==========

class ScheduleObject(IntEnum):
    """Описывает все доступные элементы расписания.

    - ``LESSON``: Название урока в расписании.
    - ``CLASS``: Для какого класса проводится урок.
    - ``LOCATION``: В каком кабинете проводится урок.
    - ``TEACHER``: Какое преподаватель проводит урок.
    - ``WEEKDAY``: В какой день недели проводится урок.
    - ``METADATA``: Дополнительная информация о занятии.
    - ``INDEX``: Положение урока относительно дня.

    Значение перечисления расставлены в соостветсвии с индексами
    урока.
    При упаковке намерения вторая цифра означает ключ.
    """

    LESSON = 0   # name
    CLASS = 1    # cl
    LOCATION = 2 # location
    TEACHER = 3  # teacher
    WEEKDAY = 4  # weekday
    METADATA = 5 # metadata
    INDEX = 6 # index


# Намерения
# =========

class IntentType(IntEnum):
    """Описывает типы намерений.

    Тип намерения определяет как намерение будет взаимодействовать
    с уроком и другими намерениями.

    - ``AND`` (по умолчанию): Не пропускает. если хотя бы одно умловие
        в цепочке не соответствует.
    - ``NOT``: Обратное действие. Пропускает все условия значения,
        которые отличаются от данного.

    При упаковке тип намерения указывается первым числом.
    """

    AND = 0
    OR = 1
    NOT = 2
