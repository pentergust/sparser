"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ Schedule.

–Ø–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –ø–µ—Ä–≤–æ–≥–æ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
–Ø–≤—è–ª–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–ª–æ–µ–º –º–µ–∂–¥—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã
–º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Schedule.
–í—ã—Ö–æ–¥–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω—è–∏ —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏.
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —á–∞—Ç-–±–æ—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä Telegram.
"""

from collections import Counter, defaultdict
from datetime import datetime, time
from typing import Iterable, NamedTuple, Optional, Union

from sp.enums import DAY_NAMES, SHORT_DAY_NAMES, WeekDay

from .counter import CounterTarget, reverse_counter
from .intents import Intent
from .parser import Schedule
from .users.storage import CountedUsers, User
from .utils import get_str_timedelta, plural_form

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =========

_EMPTY_LESSONS = ("---", "None")

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–±–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ (2 –¥–Ω—è)
_UPDATE_DELTA = 172800
# –ú–∞—Å—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–º–æ–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (24 —á–∞—Å–∞)
_MAX_UPDATE_SINCE = 86400

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤: –Ω–∞—á–∞–ª–æ (—á–∞—Å, –º–∏–Ω—É—Ç—ã), –∫–æ–Ω–µ—Ü (—á–∞—Å, –º–∏–Ω—É—Ç—ã)
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (22.01) –∏  –¥–æ –∫–æ–Ω—Ü–∞ —É—á. –≥–æ–¥–∞.
# 1. 8.00-8.45
# 2. 8.50-9.35
# 3. 9.50-10.35
# 4. 10.50-11.35
# 5. 11.50-12.35
# 6. 12.45-13.30
# 7. 13.40-14.25
# TODO: –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—ã—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–≤–æ–Ω–∫–æ–≤

timetable = [
    [8, 0, 8, 45], [8, 50, 9, 35], [9, 50, 10, 35], [10, 50, 11, 35],
    [11, 50, 12, 35], [12, 45, 13, 30], [13, 40, 14, 25], [14, 35, 15, 20],
]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ====================================

class LessonTime(NamedTuple):
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞.

    –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±—É–¥—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –î–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω —Å–æ –≤—Ä–º–µ–Ω–µ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∫–∑–∞–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫.

    :param start: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞.
    :type start: time
    :oaram end: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞.
    :type end: time
    :param index: –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞.
    :type index: int
    """

    start: time
    end: time
    index: int


def time_to_seconds(now: time) -> int:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç datetime.time –≤ –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —ç—Ç–æ–≥–æ –¥–Ω—è."""
    return now.hour * 3600 + now.minute * 60 + now.second

def seconds_to_time(now: int) -> time:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ datetime.time."""
    h, d = divmod(now, 3600)
    m, s = divmod(d, 60)
    return time(h, m, s)

def get_current_lesson(now: time) -> Optional[LessonTime]:
    """–í–æ–∑–∞—Ä–∞—â–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫.

    –ò—á–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å.
    –ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∑–∞–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫.

    –ï—Å–ª–∏ —É—Ä–æ–∫–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å –∏–ª–∏ —É–∂–µ –∫–æ–Ω—á–∏–ª–∏—Å—å -> None.

    :return: –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    :rtype: LessonTime | None
    """
    l_end_time = None
    for i, lesson in enumerate(timetable):
        start_time = time(lesson[0], lesson[1])
        end_time = time(lesson[2], lesson[3])

        if l_end_time is not None and now >= l_end_time and now < start_time:
            return LessonTime(l_end_time, start_time, i)
        elif now >= start_time and now < end_time:
            return LessonTime(start_time, end_time, i)

        l_end_time = end_time
    return None


# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ====================================

def _send_cl_updates(
    cl_updates: list[Optional[list[str]]]
) -> str:
    """–í–æ–∑–≤—Ä–∞—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞.

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.

    **–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è**:

    - `{l}` - –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞.
    - `{c}` - –ö–∞–±–Ω–µ—Ç —É—Ä–æ–∫–∞.
    - `{ol}` - –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    - `{oc}` - –ö–∞–±–Ω–µ—Ç —É—Ä–æ–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    **–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π**:

    - `++{ol}:{oc}` - –î–æ–±–∞–≤–ª–∏—Å—è —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - `--{ol}:{oc}` - –£—Ä–æ–∫ —É–±—Ä–∞–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - `{ol} -> {l}:{c}` - –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫, –±–µ–∑ –∫–∞–±–∏–Ω–µ—Ç–∞.
    - `{l}:({oc} -> {c})` - –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–±–∏–Ω–µ—Ç, –±–µ–∑ —É—Ä–æ–∫–∞.
    - `{ol}:{oc} -> {l}:{c}` - –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –≤—Å—ë (–ø—Ä–æ—á–∏–π —Å–ª—É—á–∞–π).

    :param cl_updates: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞.
    :type cl_updates: list[Optional[list[str]]]
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–ª–∞—Å—Å–∞.
    :rtype: str
    """
    message = ""
    for i, u in enumerate(cl_updates):
        if u is None:
            continue

        # –ï—Å–ª–∏ —Å–∏–∞–ø—ã–π —É—Ä–æ–∫ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
        if str(u[0]) == "None":
            message += f"{i+1}: ++{u[1]}\n"
            continue

        message += f"{i+1}: "
        ol, oc = str(u[0]).split(':')
        l, c = str(u[1]).split(':') # noqa: E741

        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª—Å—è —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if ol in _EMPTY_LESSONS:
            message += f"++{u[1]}\n"
        # –ï—Å–ª–∏ —É—Ä–æ–∫ —É–¥–∞–ª–∏–ª—Å—è
        elif l in _EMPTY_LESSONS:
            message += f"--{u[0]}\n"
        # –ï—Å–ª–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫
        elif oc == c:
            message += f"{ol} ‚ûú {l}:{c}\n"
        # –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫, –±–µ–∑ –∫–∞–±–∏–Ω–µ—Ç–∞
        elif ol == l:
            message += f"{l}: ({oc} ‚ûú {c})\n"
        else:
            message += f"{u[0]} ‚ûú {u[1]}\n"

    return message

def _get_update_header(
    update: dict[str, Union[int, list[dict]]],
    exstend_info: Optional[bool]=True
) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∏–Ω–æ–º–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –ó–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤
    —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞**:

    > 16.02 23:37 ‚ûú 18.02 19:49 [üóò 44:12:02]

    **–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç**:

    - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    - –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.

    –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞, –∞ —Ç–∞–∫–∂–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–µ–¥—à–µ–µ —Å
    –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    :param update: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å–∏.
    :type update: dict[str, Union[int, dict]]
    :param exstend_info: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —à–∞–ø–∫–µ.
    :type exstend_info: Optional[bool]
    :return: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    :rtype: str
    """
    # –ü–æ–ª—É—á–∞–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    end_timestamp = update.get("end_time", 0)
    if not isinstance(end_timestamp, int):
        raise ValueError("End update timestanp value must be integer")

    start_timespamp = update.get("start_time", end_timestamp)
    if not isinstance(start_timespamp, int):
        raise ValueError("Start update timestanp value must be integer")

    etime = datetime.fromtimestamp(end_timestamp)
    stime = datetime.fromtimestamp(start_timespamp)
    message = f"üìÄ {stime.strftime('%d.%m %H:%M')} "

    t = etime.strftime("%d.%m %H:%M" if stime.day != etime.day else "%H:%M")
    message += f"‚ûú {t}"

    if exstend_info:
        update_delta = int(end_timestamp - start_timespamp)
        now_delta = int(datetime.now().timestamp() - end_timestamp)
        extend_message = ""

        if update_delta <= _UPDATE_DELTA:
            extend_message += f"üóò {get_str_timedelta(update_delta, hours=True)}"

        if now_delta <= _MAX_UPDATE_SINCE:
            extend_message += f" ‚≠Ø {get_str_timedelta(now_delta, hours=True)}"

        if extend_message:
            message += f" [{extend_message}]"

    return message


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ===================================

def send_day_lessons(lessons: Iterable[Union[list[str], str]]) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±–µ—â–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.
    –ü–æ–º–∏–º–æ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –ø—Ä–æ—à–ª–∏ –∏ –∫–∞–∫–∏–µ –µ—â—ë
    –±—É–¥—É.
    –¢–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤.

    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –≠—Ç–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–æ–∏—Å–∫–∞ –≤
    —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    :param lessons: –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤.
    :type lessons: Iterable[Union[list[str], str]]
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.
    :rtype: str
    """
    now = datetime.now().time()
    current_lesson = get_current_lesson(now)
    message = ""

    for i, x in enumerate(lessons):
        if current_lesson is not None:
            if current_lesson.index == i and now > current_lesson.start:
                cursor = "ü†ó"
            elif current_lesson.index == i:
                cursor = "‚ûú"
            else:
                cursor = f"{i+1}."
        else:
            cursor = f"{i+1}."

        message += f"\n{cursor}"

        tt = timetable[i]
        if current_lesson is not None and current_lesson.index < i:
            message += time(tt[0], tt[1]).strftime(" %H:%M -")

        message += time(tt[2], tt[3]).strftime(" %H:%M")

        if current_lesson is not None and current_lesson.index < i:
            message += " ‚îÇ "
        else:
            message += " ‚îÉ "

        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤—Å–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        if isinstance(x, list):
            message += "; ".join(x)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–∫
        elif len(x) > 0 and x.split(":")[0] not in ("None", "---"):
            message += x

    return message

def send_search_res(intent: Intent, res: list) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    –Ø–≤–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –æ–±—ë—Ä—Ç–∫–æ–π –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π send_day_lessons.
    –°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    –ø–æ–∏—Å–∫–∞.
    –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å—é–¥–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.
    –ü–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–∞–∫–∂–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞.

    :oaram intent: –ù–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    :type intent: Intent
    :param res: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    :type res: list[list[list[str]]]
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    :rtype: str
    """
    message = "üîé –ü–æ–∏—Å–∫ "
    if intent.cabinets:
        message += f" [{', '.join(intent.cabinets)}]"
    if intent.cl:
        message += f" ({', '.join(intent.cl)})"
    if intent.lessons:
        message += f" ({', '.join(intent.lessons)})"

    for day, lessons in enumerate(res):
        while lessons and not lessons[-1]:
            lessons.pop()

        if not lessons:
            continue

        message += f"\n\nüìÖ –ù–∞ {DAY_NAMES[day]}:"
        message += send_day_lessons(lessons)

    return message


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
# =====================================================

def _get_next_update_str(time: datetime, now: Optional[datetime]=None) -> str:
    if now is None:
        now = datetime.now()

    if now.day == time.day:
        res = time.strftime("–≤ %H:%M")
    else:
        res = time.strftime("%d %h –≤ %H:%M")

    return res

def _get_cl_counter_str(cl_counter: Counter) -> str:
    groups = defaultdict(list)
    for k, v in cl_counter.items():
        groups[v].append(k)

    res = ""
    for k, v in sorted(groups.items(), key=lambda x: int(x[0])):
        res += f" üîπ{k} ({', '.join(sorted(map(str, v)))})"

    return res

def _get_hour_counter_str(hour_counter: Counter) -> Optional[str]:
    groups = defaultdict(list)
    for k, v in hour_counter.items():
        groups[v].append(k)

    res = ""
    for k, v in sorted(groups.items(), key=lambda x: x[0]):
        if k == 1:
            res += f" üî∏{', '.join(map(str, sorted(v)))}"
        else:
            res += f" üîπ{k} ({', '.join(map(str, sorted(v)))})"

    return res


class SPMessages:
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.

    –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã Schedule, –¥–∞–Ω–Ω—ã–π
    –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–≤–æ–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏.
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —á–∞—Ç-–±–æ—Ç–∞—Ö, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    **API –í–µ—Ä—Å–∏—è**: 1
    """

    API_VERSION = 1

    def __init__(
        self,
    ) -> None:
        #: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.sc: Schedule = Schedule()

    def send_status(self, storage_users: CountedUsers, user: User) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.

        –≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ —Ä–∞–±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞, –≤—Ä–µ–º–µ–Ω–∏
        –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—á–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
        —Å –ø–∞—Ä—Å–µ—Ä–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

        :param storage_user: –ü–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :type storage_users: CountedUsers
        :param user: –ö–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        :type user: User
        :return: –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        :rtype: str
        """
        now = datetime.now()
        next_update = datetime.fromtimestamp(
            float(self.sc.schedule["next_parse"])
        )
        last_parse = datetime.fromtimestamp(
            float(self.sc.schedule["last_parse"])
        )

        nu_str = _get_next_update_str(next_update, now)
        lp_str = _get_next_update_str(last_parse, now)

        nu_delta = get_str_timedelta(
            int((next_update - now).total_seconds()),
            hours=False
        )
        lp_delta = get_str_timedelta(int((now - last_parse).total_seconds()))

        active_pr = round((storage_users.active / storage_users.total)*100, 2)

        res = (
            "üåü –í–µ—Ä—Å–∏—è sp: 6.0.1 +33 (217)"
            "\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Milinuri Nirvalen (@milinuri)"
            f"\n\nüå≥ [{nu_delta}] {nu_str} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
            f"\nüå≥ {lp_str} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ({lp_delta} –Ω–∞–∑–∞–¥)"
            f"\nüå≥ {user.data.cl} –∫–ª–∞—Å—Å"
            f"\nüå≥ ~{len(self.sc.l_index)} –ø—Ä. ~{len(self.sc.c_index)} –∫–∞–±."
            f"\nüå≥ {storage_users.total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({storage_users.notify}üîî)"
            f"\nüå≥ –∏–∑ –Ω–∏—Ö {storage_users.active} –∞–∫—Ç–∏–≤–Ω—ã ({active_pr}%)"
            f"\n{_get_cl_counter_str(storage_users.cl)}"
        )

        other_cl = sorted(set(self.sc.lessons) - set(storage_users.cl))
        if other_cl:
            res += f" üî∏{', '.join(other_cl)}"
        if len(storage_users.hour) > 0:
            res += "\nüå≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
            res += f"\n{_get_hour_counter_str(storage_users.hour)}"

        return res


    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ======================

    def send_lessons(self, intent: Intent) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.

        –û–±—Ä—ë—Ç–∫–∞ –Ω–∞–¥ –º–µ—Ç–æ–¥–æ–º –∫–ª–∞—Å—Å–∞ Schedule –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é send_day_lessons.

        :param intent: –ù–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :type intent: Intent
        :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.
        :rtype: str
        """
        lessons = {x: self.sc.get_lessons(x) for x in intent.cl}
        message = ""
        for day in intent.days:
            message += f"\nüìÖ –ù–∞ {DAY_NAMES[day]}:"
            for cl, cl_lessons in lessons.items():
                message += f"\nüî∂ –î–ª—è {cl}:"
                message += f"{send_day_lessons(cl_lessons[day])}"
            message += "\n"
        return message

    def get_current_day(self, intent: Intent) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å.

        –†–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —Ç–∞–∫, –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –µ—â—ë –Ω–µ –∫–æ–Ω—á–∏–ª–∏—Å—å,
        —Ç–æ –≤–µ—Ä–Ω—ë—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è.
        –ò–Ω–∞—á–µ –∂–µ –ø—Ä–∏–±–∞–≤–∏—Ç +1 –∫ —Ç–µ–∫—É—â–µ–º—É –Ω–æ–º–µ—Ä –¥–Ω—è.
        –¢–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–¥–≤–∏–≥ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —É–º–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏.

        :param intent: –ù–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        :type intent: Intent
        :return: –ù–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        :rtype: int
        """
        now = datetime.now()
        today = now.weekday()

        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        # –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ –∂–µ –Ω–µ—Ç—É —É—Ä–æ–∫–æ–≤?
        if today == WeekDay.SATURDAY+1:
            return 0

        if len(intent.cl) == 0:
            raise ValueError("Intent must contain at least one class let")
        max_lessons = max(map(lambda x: len(self.sc.get_lessons(x)), intent.cl))
        hour = timetable[max_lessons-1][2]

        if now.hour >= hour:
            today += 1

        return 0 if today > WeekDay.SATURDAY else today

    def send_today_lessons(self, intent: Intent) -> str:
        """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.

        –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ send_lessons.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ —É—Ä–æ–∫–∏
        –µ—à—ë –∏–¥—É—Ç.
        –û—Ç–ø—Ä–≤—è–ª–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ
        –∫–æ–Ω—á–∏–ª–∏—Å—å.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        –û–¥–Ω–∞–∫–æ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏.
        –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ send_lessons.

        :param intent: –ù–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :type intent: Intent
        :return: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
        :rtype: str
        """
        return self.send_lessons(intent.reconstruct(
            self.sc, days=self.get_current_day(intent)
        ))


    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    # ===============================

    def search(
        self, target: str, intent: Intent, cabinets: bool=False
    ) -> str:
        """–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞ —É—Ä–æ–∫–∞/–∫–∞–±–∏–Ω–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        –ê –ø–æ—Å–ª–µ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.

        –ü–æ–∏—Å–∫ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.

        .. table::

            +----------+---------+---------+
            | cabinets | obj     | another |
            +==========+=========+=========+
            | false    | lesson  | cabinet |
            +----------+---------+---------+
            | true     | cabinet | lesson  |
            +----------+---------+---------+

        :param target: –¶–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞, —É—Ä–æ–∫ –∏–ª–∏ –∫–∞–±–∏–Ω–µ—Ç.
        :type target: str
        :param intent: –ù–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
        :type intent: Intent
        :param cabinets: –ß—Ç–æ –∏—â—ë–º, —É—Ä–æ–∫ –∏–ª–∏ –∫–∞–±–∏–Ω–µ—Ç. –û–±—ã—á–Ω–æ —É—Ä–æ–∫.
        :type cabinets: bool
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        :rtype: str
        """
        return send_search_res(
            intent, self.sc.search(target, intent, cabinets)
        )

    def send_update(
        self,
        update: dict[str, Union[int, list[dict]]],
        hide_cl: Optional[str]=None
    ) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
        –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ—Å–≤–æ–∫ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

        –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤ ``hide_cl`` –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤
        –∑–∞–≥–æ–ª–æ–≤–∫–µ –∫–ª–∞—Å—Å–æ–≤.
        –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ
        –∫–ª–∞—Å—Å–∞.

        –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π:

        .. code-block:: text

            üìÄ 21.05 16:00 ‚ûú 05.06 18:47
            üî∑ –ù–∞ —á–µ—Ç–≤–µ—Ä–≥
            üî∏ –î–ª—è 5–±:
            2: --—Ñ–∏–∑–∫—É–ª—å—Ç:330

        –ï—Å–ª–∏ ``hide_cl="5–±"``:

        .. code-block:: text

            üìÄ 21.05 16:00 ‚ûú 05.06 18:47
            üî∑ –ù–∞ —á–µ—Ç–≤–µ—Ä–≥
            2: --—Ñ–∏–∑–∫—É–ª—å—Ç:330

        :param update: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        :type update: dict[str, Union[int, list[dict]]]
        :param hide_cl: –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ–ø—É—Å–∫–∞—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.
        :type hide_cl: Optional[str]
        :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        :rtype: str
        """
        message = _get_update_header(update)
        updates = update.get("updates", [])
        if not isinstance(updates, (list)):
            raise ValueError("Updates must be a list of lessons")
        for day, day_updates in enumerate(updates):
            if not day_updates:
                continue

            message += f"\nüî∑ –ù–∞ {DAY_NAMES[day]}"
            for u_cl, cl_updates in day_updates.items():
                if hide_cl is None or hide_cl is not None and hide_cl != u_cl:
                    message += f"\nüî∏ –î–ª—è {u_cl}:"

                message += "\n" if len(cl_updates) > 1 else " "
                message += _send_cl_updates(cl_updates)

        return message

    def check_updates(self, user: User) -> str | None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç
        —Å–∂–∞—Ç—É—é –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        :param user: –î–ª—è –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è –ø—Ä–æ–≤—Ä–µ–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        :type user: User
        :returns: –°–æ–æ–±—â–µ–Ω–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç—É.
        :rtype: str | None
        """
        update = user.get_updates(self.sc)
        if update is None:
            return None

        return (
            "üéâ –£ –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n"
            f"{self.send_update(update, user.data.cl)}"
        )


    def send_counter( # noqa: PLR0912
        self,
        groups: dict[int, dict[str, dict]],
        target: CounterTarget | None=None,
        days_counter: bool=False
    ) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.

        –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç –±–æ–ª—å—à–µ–≥–æ
        –∫ –º–µ–Ω—å—à–µ–º—É.
        –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—É (target), —Ç–æ –æ–Ω–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.

        :param groups: –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.
        :type groups: dict[int, dict[str, dict]]
        :param target: –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :type target: CounterTarget | None
        :param days_counter: –ó–∞–º–µ–Ω—è—Ç—å –∏–º–µ–Ω–∞ –≥—Ä—É–ø–ø –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
        :type days_counter: bool
        :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–æ–≤.
        :rtype: str
        """
        message = ""

        for group, res in sorted(
            groups.items(),
            key=lambda x: x[0],
            reverse=True
        ):
            group_plural_form = plural_form(group, ("—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑"))
            message += f"\nüîò {group} {group_plural_form}:"

            # –î–æ–∞–±–≤–ª—è–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—É
            if target is not None or target is CounterTarget.NONE:
                for obj, cnt in res.items():
                    if len(res) > 1:
                        message += "\n--"

                    # –ó–∞–º–µ–Ω—è–º —á–∏—Å–ª–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—á—ë—Ç—á–∫–∞ –ø–æ –¥–Ω—è–º
                    # –ü–æ–¥—É–º–∞–π—Ç–µ —Å–∞–º–∏, —á—Ç–æ –ª—É—á—à–µ, 1 –∏–ª–∏ –≤—Ç.
                    if days_counter:
                        message += f" {SHORT_DAY_NAMES[int(obj)]}:"
                    else:
                        message += f" {obj}:"

                    cnt_groups = reverse_counter(cnt.get(target.value, {}))

                    for cnt_group, k in sorted(cnt_groups.items(),
                                        key=lambda x: x[0], reverse=True):
                        # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ–¥–≥—Ä—É–ø–ø—É —Å—á—ë—Ç—á–∏–∫–∞
                        if target == CounterTarget.DAYS:
                            count_items = " ".join((
                                SHORT_DAY_NAMES[int(x)] for x in k
                            ))
                        else:
                            count_items = " ".join(k)

                        if cnt_group == 1:
                            message += f" üî∏{count_items}"
                        elif cnt_group == group:
                            message += f" üîπ{count_items}"
                        else:
                            message += f" üîπ{cnt_group}:{count_items}"

                message += "\n"

            # –ó–∞–º–µ–Ω—è–º —á–∏—Å–ª–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—á—ë—Ç—á–∫–∞ –ø–æ –¥–Ω—è–º
            elif days_counter:
                message += f" {', '.join([SHORT_DAY_NAMES[int(x)] for x in res])}" # noqa: E501
            else:
                message += f" {', '.join(res)}"

        return message
