"""–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ Schedule.

–Ø–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –ø–µ—Ä–≤–æ–≥–æ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
–Ø–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–ª–æ–µ–º –º–µ–∂–¥—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã
–º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Schedule.
–í—ã—Ö–æ–¥–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏.
–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —á–∞—Ç-–±–æ—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä Telegram.
"""

from collections import Counter, defaultdict
from collections.abc import Iterable
from datetime import UTC, datetime, time
from typing import NamedTuple

from loguru import logger

from sp.counter import CounterTarget, reverse_counter
from sp.db import User
from sp.enums import DAY_NAMES, SHORT_DAY_NAMES, WeekDay
from sp.intents import Intent
from sp.parser import Schedule
from sp.updates import UpdateData
from sp.version import (
    PROJECT_VERSION,
    UPDATES_URL,
    VersionInfo,
    VersionOrd,
    check_updates,
)
from sp.view.base import View

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =========

_EMPTY_LESSONS = ("---", "None")

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ (2 –¥–Ω—è)
_UPDATE_DELTA = 172800
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (24 —á–∞—Å–∞)
_MAX_UPDATE_SINCE = 86400

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤: –Ω–∞—á–∞–ª–æ (—á–∞—Å, –º–∏–Ω—É—Ç—ã), –∫–æ–Ω–µ—Ü (—á–∞—Å, –º–∏–Ω—É—Ç—ã)
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (22.01) –∏  –¥–æ –∫–æ–Ω—Ü–∞ —É—á. –≥–æ–¥–∞.
# TODO: –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–≤–æ–Ω–∫–æ–≤
timetable = [
    [8, 0, 8, 45],
    [8, 55, 9, 40],
    [10, 0, 10, 45],
    [11, 5, 11, 50],
    [12, 0, 12, 45],
    [12, 55, 13, 40],
    [13, 50, 14, 35],
    [14, 45, 15, 30],
]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ===================================


class LessonTime(NamedTuple):
    """–û–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞.

    –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –±—É–¥—É—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –î–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫.
    """

    start: time
    end: time
    lesson_index: int


def time_to_seconds(now: time) -> int:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç datetime.time –≤ –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —ç—Ç–æ–≥–æ –¥–Ω—è."""
    return now.hour * 3600 + now.minute * 60 + now.second


def seconds_to_time(now: int) -> time:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ datetime.time."""
    h, d = divmod(now, 3600)
    m, s = divmod(d, 60)
    return time(h, m, s)


def get_current_lesson(now: time) -> LessonTime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å.
    –ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫.

    –ï—Å–ª–∏ —É—Ä–æ–∫–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å –∏–ª–∏ —É–∂–µ –∫–æ–Ω—á–∏–ª–∏—Å—å -> None.
    """
    l_end_time = None
    for i, lesson in enumerate(timetable):
        start_time = time(lesson[0], lesson[1])
        end_time = time(lesson[2], lesson[3])

        if l_end_time is not None and now >= l_end_time and now < start_time:
            return LessonTime(l_end_time, start_time, i)
        if now >= start_time and now < end_time:
            return LessonTime(start_time, end_time, i)

        l_end_time = end_time

    # –ö–æ—Å—Ç—ã–ª—å –Ω–æ–º–µ—Ä #46
    # –õ—É—á—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞, —á–µ–º –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ
    # –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
    return LessonTime(
        time(timetable[0][0], timetable[0][1]),
        time(timetable[0][2], timetable[0][3]),
        lesson_index=0,
    )


# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ====================================


def plural_form(n: int, v: tuple[str, str, str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "–¥–ª—è –æ–¥–Ω–æ–≥–æ", "–¥–ª—è –¥–≤—É—Ö",
    "–¥–ª—è –ø—è—Ç–∏" –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    return v[2 if (4 < n % 100 < 20) else (2, 0, 1, 1, 1, 2)[min(n % 10, 5)]]


def get_str_timedelta(s: int, hours: bool | None = True) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.

    –ï—Å–ª–∏ hours = False -> –ú–ú:SS.
    –ï—Å–ª–∏ hours = True -> HH:MM:SS.
    """
    if hours:
        h, r = divmod(s, 3600)
        m, s = divmod(r, 60)
        return f"{h:02}:{m:02}:{s:02}"
    m, s = divmod(s, 60)
    return f"{m:02}:{s:02}"


def _send_cl_updates(cl_updates: list[list[str] | None]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞.

    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.

    **–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è**:

    - `{l}` - –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞.
    - `{c}` - –ö–∞–±–∏–Ω–µ—Ç —É—Ä–æ–∫–∞.
    - `{ol}` - –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    - `{oc}` - –ö–∞–±–∏–Ω–µ—Ç —É—Ä–æ–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    **–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π**:

    - `++{ol}:{oc}` - –î–æ–±–∞–≤–ª–µ–Ω —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - `--{ol}:{oc}` - –£—Ä–æ–∫ —É–±—Ä–∞–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - `{ol} -> {l}:{c}` - –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫, –±–µ–∑ –∫–∞–±–∏–Ω–µ—Ç–∞.
    - `{l}:({oc} -> {c})` - –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–±–∏–Ω–µ—Ç, –±–µ–∑ —É—Ä–æ–∫–∞.
    - `{ol}:{oc} -> {l}:{c}` - –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –≤—Å—ë (–ø—Ä–æ—á–∏–π —Å–ª—É—á–∞–π).
    """
    message = ""
    for i, u in enumerate(cl_updates):
        if u is None:
            continue

        # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
        if str(u[0]) == "None":
            message += f"{i + 1}: ++{u[1]}\n"
            continue

        message += f"{i + 1}: "
        ol, oc = str(u[0]).split(":")
        l, c = str(u[1]).split(":")  # noqa: E741

        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª—Å—è —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if ol in _EMPTY_LESSONS:
            message += f"++{u[1]}\n"
        # –ï—Å–ª–∏ —É—Ä–æ–∫ —É–¥–∞–ª–∏–ª—Å—è
        elif l in _EMPTY_LESSONS:
            message += f"--{u[0]}\n"
        # –ï—Å–ª–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫
        elif oc == c:
            message += f"{ol} ‚ûú {l}:{c}\n"
        # –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫, –±–µ–∑ –∫–∞–±–∏–Ω–µ—Ç–∞
        elif ol == l:
            message += f"{l}: ({oc} ‚ûú {c})\n"
        else:
            message += f"{u[0]} ‚ûú {u[1]}\n"

    return message


def _get_update_header(
    update: UpdateData, extend_info: bool | None = True
) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ —Å–ø–∏—Å–∫–µ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –ó–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤
    —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    **–ü—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞**:

    > 16.02 23:37 ‚ûú 18.02 19:49 [üóò 44:12:02]

    **–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç**:

    - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    - –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞.
    - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.

    –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞, –∞ —Ç–∞–∫–∂–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–µ–¥—à–µ–µ —Å
    –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø–∏—Å–∏ —è–≤–ª—è—é—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    end_timestamp = update.get("end_time", 0)
    if not isinstance(end_timestamp, int):
        raise ValueError("End update timestamp value must be integer")

    start_timestamp = update.get("start_time", end_timestamp)
    if not isinstance(start_timestamp, int):
        raise ValueError("Start update timestamp value must be integer")

    e_time = datetime.fromtimestamp(end_timestamp, UTC)
    s_time = datetime.fromtimestamp(start_timestamp, UTC)
    message = f"üìÄ {s_time.strftime('%d.%m %H:%M')} "

    t = e_time.strftime("%d.%m %H:%M" if s_time.day != e_time.day else "%H:%M")
    message += f"‚ûú {t}"

    if extend_info:
        update_delta = int(end_timestamp - start_timestamp)
        now_delta = int(datetime.now().timestamp() - end_timestamp)
        extend_message = ""

        if update_delta <= _UPDATE_DELTA:
            extend_message += f"üóò {get_str_timedelta(update_delta, hours=True)}"

        if now_delta <= _MAX_UPDATE_SINCE:
            extend_message += f" ‚≠Ø {get_str_timedelta(now_delta, hours=True)}"

        if extend_message:
            message += f" [{extend_message}]"

    return message


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ===================================


def send_day_lessons(lessons: Iterable[list[str] | str]) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.
    –ü–æ–º–∏–º–æ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –ø—Ä–æ—à–ª–∏ –∏ –∫–∞–∫–∏–µ –µ—â—ë
    –±—É–¥—É.
    –¢–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–æ–≤.

    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –≠—Ç–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤
    —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    """
    now = datetime.now(UTC).time()
    current_lesson = get_current_lesson(now)
    message = ""

    for i, x in enumerate(lessons):
        if current_lesson.lesson_index == i and now > current_lesson.start:
            cursor = "ü†ó"
        elif current_lesson.lesson_index == i:
            cursor = "‚ûú"
        else:
            cursor = f"{i + 1}."

        message += f"\n{cursor}"

        tt = timetable[i]
        if current_lesson.lesson_index <= i:
            message += time(tt[0], tt[1]).strftime(" %H:%M -")

        message += time(tt[2], tt[3]).strftime(" %H:%M")
        message += " ‚îÇ " if current_lesson.lesson_index < i else " ‚îÉ "

        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤, –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤—Å–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
        if isinstance(x, list):
            message += "; ".join(x)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–∫
        elif len(x) > 0 and x.split(":")[0] not in _EMPTY_LESSONS:
            message += x

    return message


def send_search_res(intent: Intent, res: list) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    –Ø–≤–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –æ–±—ë—Ä—Ç–∫–æ–π –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π send_day_lessons.
    –°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    –ø–æ–∏—Å–∫–∞.
    –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å—é–¥–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.
    –ü–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–∞–∫–∂–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    message = "üîé –ü–æ–∏—Å–∫ "
    if intent.cabinets:
        message += f" [{', '.join(intent.cabinets)}]"
    if intent.cl:
        message += f" ({', '.join(intent.cl)})"
    if intent.lessons:
        message += f" ({', '.join(intent.lessons)})"

    for day, lessons in enumerate(res):
        while lessons and not lessons[-1]:
            lessons.pop()

        if not lessons:
            continue

        message += f"\n\nüìÖ –ù–∞ {DAY_NAMES[day]}:"
        message += send_day_lessons(lessons)

    return message


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞
# =====================================================


def _get_next_update_str(time: datetime, now: datetime | None = None) -> str:
    if now is None:
        now = datetime.now(UTC)

    if now.day == time.day:
        res = time.strftime("–≤ %H:%M")
    else:
        res = time.strftime("%d %h –≤ %H:%M")

    return res


def _get_cl_counter_str(cl_counter: Counter[str]) -> str:
    groups = defaultdict(list)
    for k, v in cl_counter.items():
        groups[v].append(str(k))

    res = []
    for k, v in sorted(groups.items(), key=lambda x: int(x[0])):
        res.append(f" üîπ{k} ({', '.join(v)})")

    return "".join(res)


def _get_hour_counter_str(hour_counter: Counter[int]) -> str:
    groups: dict[int, list[str]] = defaultdict(list)
    for k, v in hour_counter.items():
        groups[v].append(str(k))

    res = []
    for k, v in groups.items():
        if k == 1:
            res.append(f" üî∏{', '.join(v)}")
        else:
            res.append(f" üîπ{k} ({', '.join(v)})")

    return "".join(res)


def _get_ver_str(cur_ver: VersionInfo, dest_url: str) -> str:
    res = cur_ver.full
    try:
        vs = check_updates(cur_ver, dest_url)
    except Exception as e:
        logger.error("Error while check updates: {}", e)
        vs = None

    if vs is None:
        res += "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.."
    elif vs.status == VersionOrd.LT:
        res += f"\nüç∞ –£—Ä–∞ —É—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {vs.git_ver.full}"
    elif vs.status == VersionOrd.GT:
        res += "\nüé© –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞."

    return res


class MessagesView(View[str]):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.

    –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã Schedule, –¥–∞–Ω–Ω—ã–π
    –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–≤–æ–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏.
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —á–∞—Ç-–±–æ—Ç–∞—Ö, –ø–æ—Å–∫–æ–ª—å–∫—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –ø–æ–∂–∞–ª—É–π –ø—Ä–æ—Å—Ç–æ –∫–æ—Å—Ç—ã–ª—å, –Ω–æ —á—Ç–æ —É–∂ –ø–æ–¥–µ–ª–∞—Ç—å
    version = PROJECT_VERSION

    def __init__(
        self,
    ) -> None:
        #: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.sc: Schedule = Schedule()

    async def get_status(
        self, user: User, platform_version: VersionInfo
    ) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.

        –≠—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ —Ä–∞–±–æ—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞, –≤—Ä–µ–º–µ–Ω–∏
        –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—á–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
        —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
        """
        storage_users = await User.get_stats(self.sc)
        now = datetime.now(UTC)
        # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –º—ã –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if self.sc.next_parse is None:
            next_update = now
        else:
            next_update = datetime.fromtimestamp(float(self.sc.next_parse), UTC)

        last_parse = datetime.fromtimestamp(
            float(self.sc.schedule["last_parse"]), UTC
        )

        nu_str = _get_next_update_str(next_update, now)
        lp_str = _get_next_update_str(last_parse, now)

        nu_delta = get_str_timedelta(
            int((next_update - now).total_seconds()), hours=False
        )
        lp_delta = get_str_timedelta(int((now - last_parse).total_seconds()))

        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ —É –Ω–∞—Å –µ—â—ë –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if storage_users.total > 0:
            active_pr = round(
                (storage_users.active / storage_users.total) * 100, 2
            )
        else:
            active_pr = 0

        res = (
            f"üåü SPlatform {_get_ver_str(self.version, UPDATES_URL)}"
            f"\n‚òï –í–µ—Ä—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_version.full}"
            "\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Milinuri Nirvalen (@milinuri)"
            f"\n\nüå≥ [{nu_delta}] {nu_str} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
            f"\nüå≥ {lp_str} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ({lp_delta} –Ω–∞–∑–∞–¥)"
            f"\nüå≥ {user.cl} –∫–ª–∞—Å—Å"
            f"\nüå≥ ~{len(self.sc.l_index)} –ø—Ä. ~{len(self.sc.c_index)} –∫–∞–±."
            f"\nüå≥ {storage_users.total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({storage_users.notify}üîî)"
            f"\nüå≥ –∏–∑ –Ω–∏—Ö {storage_users.active} –∞–∫—Ç–∏–≤–Ω—ã ({active_pr}%)"
            f"\n{_get_cl_counter_str(storage_users.cl)}"
        )

        other_cl = sorted(set(self.sc.lessons) - set(storage_users.cl))
        if other_cl:
            res += f" üî∏{', '.join(other_cl)}"
        if len(storage_users.hour) > 0:
            res += "\nüå≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
            res += f"\n{_get_hour_counter_str(storage_users.hour)}"

        return res

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ======================

    def lessons(self, intent: Intent) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.

        –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –º–µ—Ç–æ–¥–æ–º –∫–ª–∞—Å—Å–∞ Schedule –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é send_day_lessons.
        """
        lessons = {x: self.sc.lessons(x) for x in intent.cl}
        message = ""
        for day in intent.days:
            message += f"\nüìÖ –ù–∞ {DAY_NAMES[day]}:"
            for cl, cl_lessons in lessons.items():
                message += f"\nüî∂ –î–ª—è {cl}:"
                message += f"{send_day_lessons(cl_lessons[day])}"
            message += "\n"
        return message

    def current_day(self, intent: Intent) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å.

        –†–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —Ç–∞–∫, –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –µ—â—ë –Ω–µ –∫–æ–Ω—á–∏–ª–∏—Å—å,
        —Ç–æ –≤–µ—Ä–Ω—ë—Ç –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è.
        –ò–Ω–∞—á–µ –∂–µ –ø—Ä–∏–±–∞–≤–∏—Ç +1 –∫ —Ç–µ–∫—É—â–µ–º—É –Ω–æ–º–µ—Ä –¥–Ω—è.
        –¢–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–¥–≤–∏–≥ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —É–º–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏.
        """
        now = datetime.now(UTC)
        today = now.weekday()

        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        # –í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ –∂–µ –Ω–µ—Ç—É —É—Ä–æ–∫–æ–≤?
        if today == WeekDay.SATURDAY + 1:
            return 0

        if len(intent.cl) == 0:
            raise ValueError("Intent must contain at least one class let")
        max_lessons = max(map(lambda x: len(self.sc.lessons(x)), intent.cl))
        hour = timetable[max_lessons - 1][2]

        if now.hour >= hour:
            today += 1

        return 0 if today > WeekDay.SATURDAY else today

    def _get_day_str(self, today: int, relative_day: int) -> str:
        if relative_day == today:
            return "–°–µ–≥–æ–¥–Ω—è"
        if relative_day == today + 1:
            return "–ó–∞–≤—Ç—Ä–∞"
        return WeekDay(relative_day).to_short_str()

    def relative_day(self, user: User) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞/–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
        –ø—Ä–æ—à–µ–¥—à–∏—Ö —É—Ä–æ–∫–æ–≤.

        –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è
        –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        today = datetime.now(UTC).today().weekday()
        tomorrow = today + 1
        if tomorrow > WeekDay.SATURDAY:
            tomorrow = 0

        if user.cl == "":
            return "–°–µ–≥–æ–¥–Ω—è"

        current_day = self.current_day(
            intent=self.sc.construct_intent(cl=user.cl, days=today)
        )
        return self._get_day_str(today, current_day)

    def today_lessons(self, intent: Intent) -> str:
        """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.

        –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ lessons.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ —É—Ä–æ–∫–∏
        –µ—à—ë –∏–¥—É—Ç.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ
        –∫–æ–Ω—á–∏–ª–∏—Å—å.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        –û–¥–Ω–∞–∫–æ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏.
        –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ lessons.
        """
        return self.lessons(
            intent.reconstruct(self.sc, days=self.current_day(intent))
        )

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    # ===============================

    def search(
        self, target: str, intent: Intent, cabinets: bool = False
    ) -> str:
        """–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞ —É—Ä–æ–∫–∞/–∫–∞–±–∏–Ω–µ—Ç–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        –ê –ø–æ—Å–ª–µ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.

        –ü–æ–∏—Å–∫ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.

        +----------+---------+---------+
        | cabinets | obj     | another |
        +==========+=========+=========+
        | false    | lesson  | cabinet |
        +----------+---------+---------+
        | true     | cabinet | lesson  |
        +----------+---------+---------+
        """
        return send_search_res(intent, self.sc.search(target, intent, cabinets))

    def update(self, update: UpdateData, hide_cl: str | None = None) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.
        –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

        –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤ ``hide_cl`` –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤
        –∑–∞–≥–æ–ª–æ–≤–∫–µ –∫–ª–∞—Å—Å–æ–≤.
        –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ
        –∫–ª–∞—Å—Å–∞.

        –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π:

        ```
        üìÄ 21.05 16:00 ‚ûú 05.06 18:47
        üî∑ –ù–∞ —á–µ—Ç–≤–µ—Ä–≥
        üî∏ –î–ª—è 5–±:
        2: --—Ñ–∏–∑–∫—É–ª—å—Ç:330
        ```

        –ï—Å–ª–∏ `hide_cl="5–±"`:

        ```
        üìÄ 21.05 16:00 ‚ûú 05.06 18:47
        üî∑ –ù–∞ —á–µ—Ç–≤–µ—Ä–≥
        2: --—Ñ–∏–∑–∫—É–ª—å—Ç:330
        ```
        """
        message = _get_update_header(update)
        updates = update.get("updates", [])
        if not isinstance(updates, (list)):
            raise ValueError("Updates must be a list of lessons")
        for day, day_updates in enumerate(updates):
            if not day_updates:
                continue

            message += f"\nüî∑ –ù–∞ {DAY_NAMES[day]}"
            for u_cl, cl_updates in day_updates.items():
                if hide_cl is None or hide_cl is not None and hide_cl != u_cl:
                    message += f"\nüî∏ –î–ª—è {u_cl}:"

                message += "\n" if len(cl_updates) > 1 else " "
                message += _send_cl_updates(cl_updates)

        return message

    async def check_updates(self, user: User) -> str | None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç
        —Å–∂–∞—Ç—É—é –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        """
        update = await user.get_updates(self.sc)
        if update is None:
            return None

        return (
            f"üéâ –£ –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n{self.update(update, user.cl)}"
        )

    def counter(  # noqa: PLR0912
        self,
        groups: dict[int, dict[str, dict]],
        target: CounterTarget | None = None,
        days_counter: bool = False,
    ) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.

        –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç –±–æ–ª—å—à–µ–≥–æ
        –∫ –º–µ–Ω—å—à–µ–º—É.
        –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—É (target), —Ç–æ –æ–Ω–∞ —Ç–∞–∫–∂–µ –±—É–¥–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—á—ë—Ç—á–∏–∫–∞.
        """
        message = ""

        for group, res in sorted(
            groups.items(), key=lambda x: x[0], reverse=True
        ):
            group_plural_form = plural_form(group, ("—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑"))
            message += f"\nüîò {group} {group_plural_form}:"

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—É
            if target is not None or target is CounterTarget.NONE:
                for obj, cnt in res.items():
                    if len(res) > 1:
                        message += "\n--"

                    # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ –¥–Ω–µ–π.
                    # –ü–æ–¥—É–º–∞–π—Ç–µ —Å–∞–º–∏, —á—Ç–æ –ª—É—á—à–µ, 1 –∏–ª–∏ –≤—Ç.
                    if days_counter:
                        message += f" {SHORT_DAY_NAMES[int(obj)]}:"
                    else:
                        message += f" {obj}:"

                    cnt_groups = reverse_counter(cnt.get(target.value, {}))

                    for cnt_group, k in sorted(
                        cnt_groups.items(), key=lambda x: x[0], reverse=True
                    ):
                        # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ–¥–≥—Ä—É–ø–ø—É —Å—á—ë—Ç—á–∏–∫–∞
                        if target == CounterTarget.DAYS:
                            count_items = " ".join(
                                SHORT_DAY_NAMES[int(x)] for x in k
                            )
                        else:
                            count_items = " ".join(k)

                        if cnt_group == 1:
                            message += f" üî∏{count_items}"
                        elif cnt_group == group:
                            message += f" üîπ{count_items}"
                        else:
                            message += f" üîπ{cnt_group}:{count_items}"

                message += "\n"

            # –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ –¥–Ω—è–º
            elif days_counter:
                message += (
                    f" {', '.join([SHORT_DAY_NAMES[int(x)] for x in res])}"
                )
            else:
                message += f" {', '.join(res)}"

        return message
