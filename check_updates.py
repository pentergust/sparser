"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

–†–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞—Ä–µ —Å Telegram –±–æ—Ç–æ–º.
–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ env —Ñ–∞–π–ª–∞.

- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
- –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
- –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

TODO: –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pydantic-settings
TODO: –°–¥–µ–ª–∞—Ç—å —á–∞—Å—Ç—å—é Telegram –±–æ—Ç–∞
TODO: –•—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ redis

Author: Milinuri Nirvalen
Ver: 0.12.1 (sp v6.5, telegram v2.7)
"""

import asyncio
from datetime import UTC, datetime
from os import getenv
from pathlib import Path

from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from loguru import logger

from sp.db import User
from sp.view.messages import MessagesView

_TIMETAG_PATH = Path("sp_data/last_update")
CHAT_MIGRATE_MESSAGE = (
    "‚ö†Ô∏è –£ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å–º–µ–Ω–∏–ª—Å—è ID.\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã."
)


def _week_markup(cl: str) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.

    –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–æ–¥—É–ª—é ``sptg``.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè†–î–æ–º–æ–π", callback_data="home"),
                InlineKeyboardButton(
                    text="–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"sc:{cl}:week"
                ),
                InlineKeyboardButton(
                    text="‚ñ∑", callback_data=f"select_day:{cl}"
                ),
            ]
        ]
    )


def _updates_markup(cl: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–æ–¥—É–ª—é ``sptg``.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚óÅ", callback_data="home"),
                InlineKeyboardButton(
                    text="–ò–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"updates:last:0:{cl}:"
                ),
                InlineKeyboardButton(
                    text="–£—Ä–æ–∫–∏", callback_data=f"sc:{cl}:today"
                ),
            ]
        ]
    )


def _update_last_check(path: Path, timestamp: int) -> None:
    """–û—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    path.parent.mkdir(parents=True, exist_ok=True)
    with path.open("w") as f:
        f.write(str(timestamp))


async def _wrap_update(
    bot: Bot, hour: int, view: MessagesView, user: User
) -> None:
    try:
        logger.debug("Process {}", user)
        await process_update(bot, hour, view, user)

    except TelegramForbiddenError:
        await user.delete()

    except Exception as e:  # noqa: BLE001 —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª—Å—è
        logger.exception(e)


async def process_update(
    bot: Bot, hour: int, view: MessagesView, user: User
) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —á–∞—Ç–∞).

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å –∏–ª–∏
    —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.
    """
    if user.get_hour(hour):
        logger.debug("Send schedule")
        await bot.send_message(
            user.id,
            text=view.today_lessons(await user.get_intent()),
            reply_markup=_week_markup(user.cl),
        )

    updates = await view.check_updates(user)
    if updates is None:
        return

    logger.debug("Send compare updates message")
    await bot.send_message(
        user.id, text=updates, reply_markup=_updates_markup(user.cl)
    )


async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
    """
    load_dotenv()
    bot = Bot(getenv("TELEGRAM_TOKEN"))  # pyright: ignore[reportArgumentType]
    view = MessagesView()

    logger.add("sp_data/updates.log")
    now = datetime.now(UTC)

    logger.info("Start of the update process...")
    tasks: list[asyncio.Future[None]] = []
    for user in await User.all():
        if not user.notify or not user.cl:
            continue

        tasks.append(
            asyncio.create_task(_wrap_update(bot, now.hour, view, user))
        )
    await asyncio.gather(*tasks)
    _update_last_check(_TIMETAG_PATH, int(now.timestamp()))


# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# =========================

if __name__ == "__main__":
    asyncio.run(main())
