"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–†–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞—Ä–µ —Å Teleram –±–æ—Ç–æ–º.

- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
- –†–∞—Å—Å—ã–ª–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–ø—Å–ø–∏—Å–ø–Ω–∏–∏.
- –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å.
- –£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

Author: Milinuri Nirvalen
Ver: 0.5 (sp 5.7+2b, telegram 1.14-b4)
"""

from datetime import datetime
from pathlib import Path

from aiogram import Dispatcher, executor
from aiogram.utils.exceptions import BotBlocked, BotKicked, MigrateToChat
from loguru import logger

from sp.intents import Intent
from sp.messages import SPMessages, send_update, users_path
from sp.utils import load_file, save_file
from telegram import bot, markup_generator, week_markup


dp = Dispatcher(bot)
logger.add("sp_data/updates.log")

CHAT_MIGRATE_MESSAGE = """‚ö†Ô∏è –£ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å–º–µ–Ω–∏–ª—Å—è ID.
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã.."""


async def process_update(bot, hour: int, sp: SPMessages) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —á–∞—Ç–∞).

    Args:
        bot (bot): –≠–∫–∑–µ–º–ø–ª—è—Ä aiogram –±–æ—Ç–∞.
        hour (int): –¢–µ–∫—É—â–∏–π —á–∞—Å.
        uid (str): ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        sp (SPMessages): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã
    if str(hour) in sp.user["hours"]:
        message = sp.send_today_lessons(Intent.new())
        markup = markup_generator(sp, week_markup)
        await bot.send_message(sp.uid, text=message, reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    updates = sp.get_lessons_updates()
    if updates:
        message = "üéâ –£ –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
        for update in updates:
            message += f"\n{send_update(update, cl=sp.user['class_let'])}"

        await bot.send_message(sp.uid, text=message)


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
# =======================

async def main() -> None:
    hour = datetime.now().hour
    users = load_file(Path(users_path), {})
    logger.info("Start of the update process...")
    edited = False

    for k, v in list(users.items()):
        # –ï—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—è –∏–ª–∏ –Ω–µ —É–∫–∑–∞–∞–Ω –∫–ª–∞—Å—Å
        if not v.get("notifications") or not v.get("class_let"):
            continue

        sp = SPMessages(k, v)
        logger.info("User: {}", k)
        try:
           await process_update(bot, hour, sp)

        # –ï—Å–ª–∏ —á–∞—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
        except MigrateToChat as e:
            logger.info("Migrate to chat: {}", e)
            new_id = e.migrate_to_chat_id
            users[new_id] = users[k]
            del users[k]
            await bot.send_message(new_id, CHAT_MIGRATE_MESSAGE)
            edited = True

        # –ï—Å–ª–∏ –±–æ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –∏–ª–∏ –∏—Å–∫–ª—é—á–∏–ª–∏
        except (BotKicked, BotBlocked):
            logger.info("Remove user {}", k)
            edited = True
            del users[k]

        # –í—Å–µ –ø—Ä–æ—á–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        except Exception as e:
            logger.exception(e)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if edited:
        logger.info("Save changed users file")
        save_file(Path(users_path), users)


# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
# ==============

if __name__ == '__main__':
    executor.start(dp, main())
