"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–†–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞—Ä–µ —Å Teleram –±–æ—Ç–æ–º.

- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
- –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
- –†–∞—Å—Å—ã–ª–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
- –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

Author: Milinuri Nirvalen
Ver: 0.8 (sp 5.7+2b, telegram 1.14 +b5)
"""

from datetime import datetime
from pathlib import Path

from aiogram import Dispatcher, executor
from aiogram.utils.exceptions import BotBlocked, BotKicked, MigrateToChat, UserDeactivated
from loguru import logger

from sp.intents import Intent
from sp.messages import SPMessages, send_update, users_path
from sp.utils import load_file, save_file
from telegram import bot, markup_generator, week_markup


# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–ª–µ–¥—Å—Ç–≤–∏–∏ .
CHAT_MIGRATE_MESSAGE = """‚ö†Ô∏è –£ –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å–º–µ–Ω–∏–ª—Å—è ID.
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã.."""

dp = Dispatcher(bot)
logger.add("sp_data/updates.log")
_TIMETAG_PATH = Path("sp_data/last_update")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ==========================================

async def process_update(bot, hour: int, sp: SPMessages) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —á–∞—Ç–∞).

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Å –∏–ª–∏
    —Å–ø–∏—Å–æ–∫ –∏–∑–º–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏.

    Args:
        bot (bot): –≠–∫–∑–µ–º–ø–ª—è—Ä aiogram –±–æ—Ç–∞.
        hour (int): –¢–µ–∫—É—â–∏–π —á–∞—Å.
        uid (str): ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        sp (SPMessages): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã.
    if str(hour) in sp.user["hours"]:
        await bot.send_message(sp.uid,
            text=sp.send_today_lessons(Intent.new()),
            reply_markup=markup_generator(sp, week_markup)
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    updates = sp.get_lessons_updates()
    if updates:
        message = "üéâ –£ –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"
        for update in updates:
            message += f"\n{send_update(update, cl=sp.user['class_let'])}"

        await bot.send_message(sp.uid, text=message)

async def migrate_users(migrate_ids: list[tuple[str, str]]) -> None:
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∞—Ç–æ–≤) –Ω–∞ –Ω–æ–≤—ã–π ID.

    –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–º–µ—â–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É.

    Args:
        migrate_ids (list[tuple[str, str]]): ID –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    logger.info("Start migrate users...")
    users = load_file(Path(users_path), {})
    for old, new in migrate_ids:
        logger.info("Migrate {} -> {}". old, new)
        users[new] = users[old]
        del users[k]
        await bot.send_message(new, CHAT_MIGRATE_MESSAGE)
    save_file(Path(users_path), users)

async def remove_users(remove_ids: list[str]):
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∞—Ç–∞).

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.
    –ï—Å–ª–∏ –±–æ—Ç–∞ –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ —á–∞—Ç–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç.

    Args:
        remove_ids (list[str]) –°–ø–∏—Å–æ–∫ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    logger.info("Start remove users...")
    users = load_file(Path(users_path), {})
    for x in remove_ids:
        logger.info("Remove {}". x)
        del users[x]
    save_file(Path(users_path), users)


def set_timetag(path: Path, timestamp: int) -> None:
    """–û—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–ª–≤–µ–Ω–∏—è.

    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É.
    –ú–µ—Ç–∫–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–≤–∞—Ç—å–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–∞—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

    Args:
        path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏.
        timestamp (int): –í—Ä–µ–º–µ–Ω–Ω–∞—è UNIXtime –º–µ—Ç–∫–∞.
    """

    if not path.exists():
        path.parent.mkdir(parents=True, exist_ok=True)

    with open(path, "w") as f:
        f.write(str(timestamp))


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
# =======================

async def main() -> None:
    now = datetime.now()
    users = load_file(Path(users_path), {})
    remove_ids = []
    migrate_ids = []

    logger.info("Start of the update process...")
    for k, v in list(users.items()):
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        # –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é -> –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
        if not v.get("notifications") or not v.get("class_let"):
            continue

        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ª–ø—Ä—è –≥–µ–Ω—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # TODO: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–æ–≤—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞
        # –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        sp = SPMessages(k, v)
        logger.info("User: {}", k)
        try:
            await process_update(bot, now.hour, sp)

        # –ï—Å–ª–∏ —á–∞—Ç —Å–º–µ–Ω–∏–ª —Å–≤–æ–π ID.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–ª –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.
        except MigrateToChat as e:
            migrate_ids.append((k, e.migrate_to_chat_id))

        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –∏—Å–∫–ª—é—á–∏–ª –∏–∑ —á–∞—Ç–∞, –∏—Å—á–µ–∑ —Å–∞–º ->
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Ç) –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.
        except (BotKicked, BotBlocked, UserDeactivated):
            remove_ids.append(k)

        # –õ–æ–≤–∏–º –≤—Å–µ –ø—Ä–æ—á–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∂–∞–µ–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
        except Exception as e:
            logger.exception(e)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    if remove_ids:
        await remove_users(remove_ids)
    if migrate_ids:
        await migrate_users(migrate_ids)

    # –û—Å—Ç–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    set_timetag(_TIMETAG_PATH, int(now.timestamp()))


# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# =========================

if __name__ == '__main__':
    executor.start(dp, main())
