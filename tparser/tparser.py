"""
–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–£–º–µ–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

Author: Milinuri Nirvalen
Ver: 1.1

Modules:
    os: –ü—Ä–æ–≤–µ–Ω—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    json: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
    csv: –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    requests: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    hashlib: –†–∞–±–æ—Ç–∞ —Å —Ö–µ—à-—Å—É–º–º–∞–º–∏
    datetime: –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π
"""

import os
import json
import csv
import hashlib
import requests
from datetime import datetime


"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
------------------
    url       : –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É CSV —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    users_path: –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é–∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sc_path   : –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫ —Ñ–∞–π–ª—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    user_data : –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""

url = "https://docs.google.com/spreadsheets/d/1pP_qEHh4PBk5Rsb7Wk9iVbJtTA11O9nTQbo1JFjnrGU/export?format=csv"
users_path = "users.json"
sc_path = "sc.json"
user_data = {"class_let":"9–≥", "day_hashes":[None, None, None, None, None, None]}
days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É",
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"]


# –£–ø—Ä–∞–≤–æ–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
# ============================

def save_file(path, data):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏
    :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª

    :return: data"""

    with open(path, 'w') as f:
        f.write(json.dumps(data, indent=4))
    return data

def load_file(path, data=None):
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.

    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è
    :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ø—Ä–∏ –µ–≥–æ –æ—Ç—Ü—É–∫—Ü—Ç–≤–∏–∏

    :return: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ data"""

    if os.path.isfile(path):
        with open(path) as f:
            return json.loads(f.read())
    
    elif data is not None:
        return save_file(path, data)

    else:
        return {}

def log(text):
    now = datetime.now().strftime("%H:%M:%S")
    print(f'\033[90m{now} \033[93m[SP] \033[32m{text}\033[0m')


class ScheduledParser:
    """–ö–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    :param uid: User ID, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    :param custom_sc_path: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    :param custom_users_path: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å* –∫ —Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    def __init__(self, uid, custom_sc_path=sc_path,
                 custom_users_path=users_path):
        super(ScheduledParser, self).__init__()
        self.uid = uid
        self.sc_path = custom_sc_path
        self.users_path = custom_users_path

        self.user = self.get_user()
        self.schedule = self.get_schedule()


    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ======================

    def get_user(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :returns: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        users = load_file(self.users_path, {})
        return users.get(self.uid, user_data)

    def save_user(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ self.users_path."""

        users = load_file(self.users_path, {})
        users[self.uid] = self.user
        save_file(self.users_path, users)
        log(f'save user: {self.uid}')

    def parse_schedule(self, update=False):
        """–•—Ä—É–ø–∫–∏–π –ø–∞—Ä—Å–µ—Ä —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–µ–∏—Å–∞–Ω–∏—è."""
        
        log('Get schedule file...')
        res = load_file(self.sc_path, {})
        
        r = requests.get(url).content
        h = hashlib.md5(r).hexdigest()
        
        res["updated"] = datetime.now().hour

        if res.get("hash", "") == h and not update:
            log('Schedule is uptime!')
            return res

        res["hash"] = h
        
        # –í—Å–ø–æ–º–æ–≥—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        # -------------------------
        # class_index: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ –∏—Ö —Å—Ç–æ–ª–±—Ü–∞–º –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        #   sc: –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è sc[–ö–õ–ê–°–°][–î–ï–ù–¨][–£–†–û–ö]
        #   dlines: –£–∫–∞–∑–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–Ω–µ–π
        # lessons: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—Ä–æ–∫–µ–æ–≤ –≤ –¥–µ–Ω—å
        #     lt_line: –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–º –∑–≤–æ–Ω–∫–æ–≤
        #          lt: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ [[–ù–∞—á–∞–ª–æ, –ö–æ–Ω–µ—Ü], [...], ...]
        class_index = {}
        sc = {}
        dlines = [3, 11, 19, 27, 35, 43, 49]
        lessons = 8
        lt_line = 52

        
        log('-> Read CSV file...')
        reader = csv.reader(r.decode("utf-8").splitlines(), delimiter=',')

        # –ü–æ—Å—Ç—Ä–æ—á–Ω–æ —á–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        d = 0
        # i - –Ω–æ–º–µ—Ä (–∏–Ω–¥–µ–∫—Å) —Å—Ç—Ä–æ–∫–∏, row - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏
        for i, row in enumerate(list(reader)):
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞—Å—Å–º–∏
            if i == 1:
                log('-> Get class_index...')
                # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—Ç—Ä–æ–∫–∏
                for v, k in enumerate(row):
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –∏ –∏–Ω–¥–µ–∫—Å
                    if k.replace(' ', ''):
                        class_index[k.lower()] = v


            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
            # --------------------------

            if d < len(dlines)-2 and i == dlines[d]+lessons:    
                d += 1 

            if i >= dlines[d] and i < min(dlines[d]+lessons, dlines[-1]):
                    
                # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –∫–ª–∞—Å–∞–∞–º
                for k, v in class_index.items():
                        
                    # –ï—Å–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    if k not in sc:
                        sc[k] = [{"lessons":["" for x in range(lessons)],
                                        "hash": None} for x in range(6)]

                    sc[k][d]["lessons"][i-dlines[d]] = f"{row[v]} | {row[v+1]}"

        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–µ–π –¥–Ω–µ–π
        # ====================

        log('-> Get day hsshes...')
        for class_let, days in sc.items():
            n_days = []
            
            for day in days:
                

                h = hashlib.md5(bytearray(f";".join(day["lessons"]),
                                          'utf-8')).hexdigest()
                day["hash"] = h
                n_days.append(day)
            sc[class_let] = n_days

        res["schedule"] = sc
        
        return res

    def get_schedule(self, update=False):
        """–ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""

        t = load_file(self.sc_path)
        hour = datetime.now().hour
        
        if not t or t.get('updated', 0) != hour or update:
            t = self.parse_schedule(update)
            if t is not None:
                save_file(self.sc_path, t)
               
        return t

    def get_day_hashes(self, class_let=None):
        """–ü–æ–ª—É—á—á–∞–µ—Ç —Ö–µ—à–∏ —É—Ä–æ–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.

        :param class_let: –ö–ª–∞—Å—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à–∏

        :returns: –°–∞–ø–∏—Å–æ–∫ —Ö–µ—à–µ–π —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è"""

        if class_let is None:
            class_let = self.user["class_let"]

        return list(map(lambda x: x["hash"],
                        self.schedule["schedule"][class_let]))

    def get_diff_day_hashes(self, class_let=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ö–µ—à–∞—Ö –¥–Ω–µ–π.

        :returns: –°–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""

        res = ""
        day_hashes = self.get_day_hashes(class_let)

        for i, x in enumerate(self.user["day_hashes"]):
            if x != day_hashes[i]:
                if x is not None:
                    res += f'\n- –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {days[i]}!'

                self.user["day_hashes"][i] = day_hashes[i]

        if res:
            res = "\n\n–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:" + res
            self.save_user()

        return res

    def set_class(self, class_let=None):
        """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param class_let: –ö–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å

        :returns: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∫–ª–∞—Å—Å–∞"""
        
        if class_let in self.schedule["schedule"]:
            self.user["class_let"] = class_let
            self.user["day_hashes"] = self.get_day_hashes()
            self.save_user()
            return f"‚úè –ö–ª–∞—Å—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ \"{class_let}\"!"
        
        else:
            return f"""‚ùó–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ!
‚úè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É!
üîé –í–≤–µ–¥–∏–∏–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"1–ê\"

üè´ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(self.schedule['schedule'])}"""

    def get_lessons(self, today=0, class_let=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å."""


        if today > 5:
            today = 0
        
        if class_let is None or class_let not in self.schedule["schedule"]:
            class_let = self.user["class_let"]

        weekday = days[today]
        lessons = self.schedule["schedule"][class_let][today]["lessons"]
        res = f"üè´ {class_let} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {weekday}:\n"

        for i, x in enumerate(lessons):
            if not x:
                continue

            if x.strip() == "|":
                x = "---"

            res += f'\n{i+1}. {x}'

        if class_let == self.user["class_let"]:
            res += self.get_diff_day_hashes(class_let)

        return res

