"""
–ü–ª–∞–≥–∏–Ω –ß–∏–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ ScheduleParser

Author: Milinuri Nirvalen
Ver: sp 2.4.1
"""

from core import Plugin, Config
from sparser.sparser import ScheduleParser

from datetime import datetime


p = Plugin('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', desc='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤')

days_str = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü", "—Å—É–±–±–æ—Ç"]
set_class_message = f"""\n\n‚ö†Ô∏è –ü–æ–∞–∂–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /–∫–ª–∞—Å—Å [–í–∞—à –∫–ª–∞—Å—Å]"""

config_path = "data/sparser_autopost.toml"
user_base = {"autopost_hour":17, "hour":0, "day":0}


@p.eventHandler('after')
async def _(event, ctx):
    p.log('Check sparser_autopost')

    c = Config(filepath=config_path)
    day = int(datetime.today().strftime('%j'))
    hour = datetime.now().hour
    updated = False
    autopost_targets = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
    # -----------------

    for k, v in c.file_data.items():
        if day != v["day"] and hour >= v["autopost_hour"]:
            updated = True
            autopost_targets.append(k)
            v["day"] = day
            v["hour"] = hour
            c.file_data[k] = v

    if updated:
        c.save()
        p.log("Save autopost file")


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ===================

    for x in autopost_targets:
        sp = ScheduleParser(x)
        await ctx.message(sp.print_today_lessons(), peer_id=x)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞
# ===================

@p.command("–∞–≤—Ç–æ–ø–æ—Å—Ç", usage="–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç")
async def autopost(event, ctx):
    uid = str(event.get("to.id"))
    c = Config(filepath=config_path)

    res = "–ê–≤—Ç–æ–ø–æ—Å—Ç: "

    if ctx.sargs.lower().startswith("–≤—ã–∫–ª"):
        if uid in c.file_data:
            del c.file_data[uid]
            c.save()
    
    elif ctx.sargs.isdigit():
        user = c.file_data.get(uid, user_base)
        user["autopost_hour"] = min(max(int(ctx.sargs), 0), 23)
        c.file_data[uid] = user
        c.save()

    autopost_status = ""
    autopost_command = ""

    if uid not in c.file_data:
        res += f'üîï –í—ã–∫–ª—é—á–µ–Ω'
        autopost_command = "\nüî∑ /–∞–≤—Ç–æ–ø–æ—Å—Ç [—á–∞—Å] - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç"
    else:
        res += f"üîî –í {c.file_data[uid]['autopost_hour']}:00"
        autopost_command = "\nüî∂ /–∞–≤—Ç–æ–ø–æ—Å—Ç –≤—ã–∫–ª - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç"

    res += "\n\n–í —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    res += "\n‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –∑–∞–ø–æ–∑–¥–∞–Ω–∏–µ–º (–º–æ–≥—É—Ç –∏ –Ω–µ –ø—Ä–∏–¥—Ç–∏), –Ω–µ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å —Å–∏–ª—å–Ω–æ –Ω–∞ –Ω–∏—Ö."
    res += autopost_command

    await ctx.message(res)


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# ================

@p.command('–∫–ª–∞—Å—Å', usage='[class_let] —Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
async def setClass(event, ctx):
    sp = ScheduleParser(str(event.get('to.id')))
    await ctx.message(sp.set_class(ctx.sargs.lower()))


@p.command("—É—Ä–æ–∫–∏", usage="[class_let; day] —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å")
async def lessons(event, ctx):
    uid = str(event.get("to.id"))
    sp = ScheduleParser(uid)
    lindex = sp.get_lessons_index()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∞
    # ---------------------------

    c = Config(filepath=config_path)
    if uid in c.file_data:
        c.file_data[uid]["day"] = int(datetime.today().strftime('%j'))
        c.file_data[uid]["hour"] = datetime.now().hour
        c.save()


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    # --------------------

    class_let = None
    lesson = None
    days = []
    
    for x in ctx.args:
        x = x.lower()

        if x in sp.lessons:
            class_let = x

        if x in lindex:
            lesson = x

        for i, d in enumerate(days_str):
            if x.startswith(d) and i not in days:
                days.append(i) 

        if x == "—Å–µ–≥–æ–¥–Ω—è":
            days.append(datetime.today().weekday())

        if x == "–∑–∞–≤—Ç—Ä–∞":
            days.append(datetime.today().weekday()+1)


    # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    # ----------------

    if lesson:
        res = sp.search_lesson(lesson, days)
    elif days:
        res = sp.print_lessons(days, class_let)
    else:
        res = sp.print_today_lessons(class_let)

    if not class_let and not sp.user["set_class"]:
        res += set_class_message

    await ctx.message(res)
  
@p.command("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", usage= "[class_let] —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def schedule(event, ctx):
    uid = str(event.get("to.id"))
    sp = ScheduleParser(uid)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∞
    # ---------------------------

    c = Config(filepath=config_path)
    if uid in c.file_data:
        c.file_data[uid]["day"] = int(datetime.today().strftime('%j'))
        c.file_data[uid]["hour"] = datetime.now().hour
        c.save()


    if ctx.sargs.lower() in ["changes", "–∏–∑–º–µ–Ω–µ–Ω–∏—è"]:
        res = sp.print_sc_changes()
    else:
        res = sp.print_lessons([0, 1, 2, 3, 4, 5], ctx.sargs.lower())
        res += f'\n\n/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —á—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏'

    if not ctx.sargs and not sp.user["set_class"]:
        res += set_class_message

    await ctx.message(res)



# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
# ===================

@p.command('sparser', usage='–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
async def sparserStatus(event, ctx):
    sp = ScheduleParser(str(event.get('to.id')))
    await ctx.message(sp.print_status())

@p.command('<lesson(s) c(ount)>', usage='[class_let] —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —É—Ä–æ–∫–∏')
async def countLessons(event, ctx):
    sp = ScheduleParser(str(event.get('to.id')))
    await ctx.message(sp.count_lessons(ctx.sargs or None))
