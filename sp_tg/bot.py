"""–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SPlatform.

–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º SPMessages.
–ù–µ —Å—á–∏—Ç–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ "–Ω–∞–º–µ—Ä–µ–Ω–∏–π" (Intents).
–¢–∞–∫–∂–µ —ç—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.
–Ø–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

–≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å —Å–∞–º—ã–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
–° —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ
–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
-------------

- /start /help (home): –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.
- /info: –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –±–æ—Ç–∞.
- delete_msg: –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª.
"""

from collections.abc import Awaitable, Callable
from datetime import datetime
from os import getenv
from pathlib import Path
from sys import exit
from typing import Any

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from aiogram.filters import Command
from aiogram.types import CallbackQuery, ErrorEvent, Message, Update
from dotenv import load_dotenv
from loguru import logger

from sp.exceptions import ViewCompatibleError
from sp.messages import SPMessages
from sp.platform import Platform
from sp.users.storage import User
from sp.utils import get_str_timedelta
from sp.version import VersionInfo
from sp_tg.handlers import routers
from sp_tg.keyboards import (
    PASS_SET_CL_MARKUP,
    get_main_keyboard,
    get_other_keyboard,
)
from sp_tg.messages import SET_CLASS_MESSAGE, get_home_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# =====================

load_dotenv()
TELEGRAM_TOKEN = getenv("TELEGRAM_TOKEN", "")
_TIMETAG_PATH = Path("sp_data/last_update")
# –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
_DEBUG_MODE = getenv("DEBUG_MODE")
_ADMIN_ID = getenv("ADMIN_ID")

# –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
_BOT_VERSION = "v2.5.1"
_ALERT_AUTO_UPDATE_AFTER_SECONDS = 3600


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
# ===================

platform = Platform(
    pid=1, # RESERVED FOR TELEGRAM
    name="Telegram",
    version=VersionInfo(_BOT_VERSION, 0, 6),
)

try:
    platform.view = SPMessages()
except ViewCompatibleError as e:
    logger.exception(e)
    exit()


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
# ==========================

dp = Dispatcher(
    platform=platform,
    sp=platform.view
)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Middleware
# =====================

@dp.message.middleware()
@dp.callback_query.middleware()
@dp.error.middleware()
async def user_middleware(
    handler: Callable[[Update, dict[str, Any]], Awaitable[Any]],
    event: Message | CallbackQuery | ErrorEvent,
    data: dict[str, Any],
) -> Awaitable[Any]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π."""
    # –≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∫–æ—Å—Ç—ã–ª—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫ –∂–µ
    if isinstance(event, ErrorEvent):
        if event.update.callback_query is not None:
            uid = event.update.callback_query.message.chat.id
        else:
            uid = event.update.message.chat.id
    elif isinstance(event, CallbackQuery):
        uid = event.message.chat.id
    else:
        uid = event.chat.id

    data["user"] = platform.get_user(str(uid))
    data["intents"] = platform.get_intents(uid)

    return await handler(event, data)

# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –≤ –±–æ—Ç–µ
# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
@dp.message.middleware()
@dp.callback_query.middleware()
async def log_middleware(
    handler: Callable[[Update, dict[str, Any]], Awaitable[Any]],
    event: Message | CallbackQuery,
    data: dict[str, Any],
) -> Awaitable[Any]:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback query."""
    if isinstance(event, CallbackQuery):
        logger.info("[c] {}: {}", event.message.chat.id, event.data)
    else:
        logger.info("[m] {}: {}", event.chat.id, event.text)

    return await handler(event, data)


# –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
# =================

def get_update_timetag(path: Path) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –¥–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞,
    —Ç–æ —ç—Ç–æ –ø–æ–≤–æ–¥ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.

    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    :type path: Path
    :return: UNIXtime –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    :rtype: int
    """
    try:
        with open(path) as f:
            return int(f.read())
    except (ValueError, FileNotFoundError):
        return 0

def get_status_message(
    platform: Platform, timetag_path: Path, user: User
) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞.

    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    –ö –ø—Ä–∏–º–µ—Ä—É –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
    –∫–ª–∞—Å—Å–æ–≤ –∏ –ø—Ä–æ—á–µ–µ.
    –¢–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ï—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.

    :param view: –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :type view: SPMessages
    :param timetag_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    :type timetag_path: Path
    :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :rtype: str
    """
    message = platform.status(user)
    message += f"\n‚öôÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {_BOT_VERSION}\nüõ†Ô∏è –¢–µ—Å—Ç–µ—Ä @micronuri"

    timetag = get_update_timetag(timetag_path)
    timedelta = int(datetime.now().timestamp()) - timetag
    message += f"\nüìÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ {get_str_timedelta(timedelta)} –Ω–∞–∑–∞–¥"

    if timedelta > _ALERT_AUTO_UPDATE_AFTER_SECONDS:
        message += "\n ‚îó –ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å?.."

    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==================

@dp.message(Command("info"))
async def info_handler(
    message: Message, platform: Platform, user: User
) -> None:
    """–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    await message.answer(
        text=get_status_message(platform, _TIMETAG_PATH, user),
        reply_markup=get_other_keyboard(user.data.cl),
    )

@dp.message(Command("help", "start"))
async def start_handler(
    message: Message, user: User, platform: Platform
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∫–ª–∞—Å—Å–∞.
    """
    if not user.data.set_class:
        return await message.answer(
            SET_CLASS_MESSAGE,
            reply_markup=PASS_SET_CL_MARKUP
        )

    await message.delete()
    relative_day = platform.relative_day(user)
    await message.answer(
        text=get_home_message(user.data.cl),
        reply_markup=get_main_keyboard(user.data.cl, relative_day),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –∑–∞–ø—Ä–æ—Å–æ–≤
# ============================

@dp.callback_query(F.data == "delete_msg")
async def delete_msg_callback(
    query: CallbackQuery, user: User, platform: Platform
) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        await query.message.delete()
    except TelegramBadRequest:
        relative_day = platform.relative_day(user)
        await query.message.edit_text(
            text=get_home_message(user.data.cl),
            reply_markup=get_main_keyboard(user.data.cl, relative_day)
    )

@dp.callback_query(F.data == "home")
async def home_callback(
    query: CallbackQuery, user: User, platform: Platform
) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª."""
    relative_day = platform.relative_day(user)
    await query.message.edit_text(
        text=get_home_message(user.data.cl),
        reply_markup=get_main_keyboard(user.data.cl, relative_day)
    )

@dp.callback_query(F.data == "other")
async def other_callback(
    query: CallbackQuery, platform: Platform, user: User
) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

    –¢–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏.
    """
    await query.message.edit_text(
        text=get_status_message(platform, _TIMETAG_PATH, user),
        reply_markup=get_other_keyboard(user.data.cl),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
# ====================

def send_error_message(exception: ErrorEvent, user: User) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:

    - new => –ö–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    - user_name => –ö—Ç–æ –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    - user_id => –ö–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    - class_let => –ö –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å –æ—Ç–Ω–æ—Å–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    - set_class => –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∫–ª–∞—Å—Å.
    - chat_id => –ì–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞.
    - exception => –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    - action => Callback data –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É.

    :param exception: –°–æ–±—ã—Ç–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ aiogram.
    :type exception: ErrorEvent
    :param sp: –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type sp: SPMessages
    :return: –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –≤ –±–æ—Ç–µ.
    :rtype: str
    """
    if exception.update.callback_query is not None:
        action = f"-- –î–∞–Ω–Ω—ã–µ: {exception.update.callback_query.data}"
        message = exception.update.callback_query.message
    else:
        action = f"-- –¢–µ–∫—Å—Ç: {exception.update.message.text}"
        message = exception.update.message

    user_name = message.from_user.first_name
    chat_id = message.chat.id
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S") # 2024-08-23 21:12:40.383
    set_class_flag = "–¥–∞" if user.data.set_class else "–Ω–µ—Ç"

    return ("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."
        f"\n-- –í–µ—Ä—Å–∏—è: {_BOT_VERSION}"
        f"\n-- –í—Ä–µ–º—è: {now}"
        "\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        f"\n-- –ò–º—è: {user_name}"
        f"\n-- –ö–ª–∞—Å—Å: {user.data.cl} (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {set_class_flag})"
        f"\n-- ID: {chat_id}"
        f"\n{action}"
        f"\n\nüö´ –í–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ  {exception.exception.__class__.__name__}:"
        f"\n-- {exception.exception}"
        "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @milinuri –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        "\n–≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ."
    )

@dp.errors()
async def error_handler(exception: ErrorEvent, user: User) -> None:
    """–õ–æ–≤–∏—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –ù–µ–∫–æ—Ç–æ—Ä–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–¥–∞–≤–ª—è—Ç—å—Å—è, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç
    –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.
    """
    if isinstance(exception.exception, TelegramBadRequest | TelegramNetworkError
    ):
        return logger.error(exception)

    logger.exception(exception.exception)
    if exception.update.callback_query is not None:
        message = exception.update.callback_query.message
    else:
        message = exception.update.message

    # –ù–µ –∏—Å–∫–ª—é—á–µ–Ω–æ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    if message is None:
        return None

    await message.answer(
        send_error_message(exception, user)
    )
    if not _DEBUG_MODE and _ADMIN_ID is not None:
        await message.bot.send_message(
            chat_id=_ADMIN_ID,
            text=send_error_message(exception, user)
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π.
    """
    bot = Bot(TELEGRAM_TOKEN)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    for r in routers:
        logger.info("Include router: {} ...", r.name)
        dp.include_router(r)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
    logger.info("Start polling ...")
    await dp.start_polling(bot)
