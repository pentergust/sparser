"""Telegram-–±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ SPMessages.

–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º SPMessages.
–ù–µ —Å—á–∏—Ç–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ "–Ω–∞–º–µ—Ä–µ–Ω–∏–π" (Intents).

–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–æ–±–∞.
"""

import sqlite3
from datetime import datetime
from os import getenv
from pathlib import Path
from typing import Any, Awaitable, Callable, Dict, Union

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import CallbackQuery, ErrorEvent, Message, Update
from dotenv import load_dotenv
from loguru import logger

from sp.messages import SPMessages
from sp.utils import get_str_timedelta
from sp_tg.handlers import routers
from sp_tg.keyboards import (PASS_SET_CL_MARKUP, get_main_keyboard,
                             get_other_keyboard)
from sp_tg.messages import SET_CLASS_MESSAGE, get_home_message
from sp_tg.utils.intents import UserIntents

# –ù–∞—Å—Ç—Ä–æ–π–∫–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ======================

load_dotenv()
TELEGRAM_TOKEN = getenv("TELEGRAM_TOKEN", "")
dp = Dispatcher()
_TIMETAG_PATH = Path("sp_data/last_update")
DB_CONN = sqlite3.connect("sp_data/tg.db")

# –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
_BOT_VERSION = "v2.3.1"
_ALERT_AUTOUPDATE_AFTER_SECONDS = 3600


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Middleware
# =====================

@dp.message.middleware()
@dp.callback_query.middleware()
@dp.error.middleware()
async def user_middleware(
    handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
    event: Union[Update, CallbackQuery, ErrorEvent],
    data: Dict[str, Any],
) -> Any:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä SPMessages –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if isinstance(event, ErrorEvent):
        if event.update.callback_query is not None:
            uid = event.update.callback_query.message.chat.id
        else:
            uid = event.update.message.chat.id
    elif isinstance(event, CallbackQuery):
        uid = event.message.chat.id
    else:
        uid = event.chat.id

    data["sp"] = SPMessages(str(uid))
    data["intents"] = UserIntents(DB_CONN, uid)
    return await handler(event, data)

# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–æ—Ç–µ
# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∞–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
@dp.message.middleware()
@dp.callback_query.middleware()
async def log_middleware(
    handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
    event: Update,
    data: Dict[str, Any],
) -> Any:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback query."""
    if isinstance(event, CallbackQuery):
        logger.info("[c] {}: {}", event.message.chat.id, event.data)
    else:
        logger.info("[m] {}: {}", event.chat.id, event.text)

    return await handler(event, data)


def get_update_timetag(path: Path) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–ª–≤–µ–Ω–∏–π.

    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    –í—Ä–µ–º—è —É—Å–ø–µ—à–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –¥–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞,
    —Ç–æ —ç—Ç–æ –ø–æ–≤–æ–¥ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.

    Args:
        path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

    Returns:
        int: UNIXtime –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    
    """
    try:
        with open(path) as f:
            return int(f.read())
    except (ValueError, FileNotFoundError):
        return 0

def get_status_message(sp: SPMessages, timetag_path: Path) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ —Å–æ—Å–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞.

    –ò–Ω—Ñ–æ–º–∞—Ä—Ü–∏–æ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–∞–±–æ—Ç–∞—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    –ö –ø—Ä–∏–º–µ—Ä—É –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
    –∫–ª–∞—Å—Å–æ–≤ –∏ –ø—Ä–æ—á–µ–µ.
    –¢–∞–∫–∂–µ –æ—Å–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ï—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π - –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        timetag_path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    """
    message = sp.send_status()
    message += f"\n‚öôÔ∏è –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {_BOT_VERSION}\nüõ†Ô∏è –¢–µ—Å—Ç–µ—Ä @sp6510"

    timetag = get_update_timetag(timetag_path)
    timedelta = int(datetime.now().timestamp()) - timetag
    message += f"\nüìÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ {get_str_timedelta(timedelta)} –Ω–∞–∑–∞–¥"

    if timedelta > _ALERT_AUTOUPDATE_AFTER_SECONDS:
        message += ("\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥."
            "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞."
        )

    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ==================

@dp.message(Command("info"))
async def info_handler(message: Message, sp: SPMessages) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±—Ç—ã –±–æ—Ç–∞ –∏ –ø–∞—Ä—Å–µ—Ä–∞."""
    await message.answer(
        text=get_status_message(sp, _TIMETAG_PATH),
        reply_markup=get_other_keyboard(sp.user["class_let"]),
    )

@dp.message(Command("help", "start"))
async def start_handler(message: Message, sp: SPMessages) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞.
    """
    await message.delete()
    if sp.user["set_class"]:
        await message.answer(
            text=get_home_message(sp.user["class_let"]),
            reply_markup=get_main_keyboard(sp.user["class_let"]),
        )
    else:
        await message.answer(SET_CLASS_MESSAGE, reply_markup=PASS_SET_CL_MARKUP)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –∑–∞–ø—Ä–æ—Å–æ–≤
# ============================

@dp.callback_query(F.data == "delete_msg")
async def delete_msg_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.

    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–Ω—ã–π —Ä–∞–∑–¥–µ–ª.
    """
    try:
        await query.message.delete()
    except TelegramBadRequest:
        await query.message.edit_text(
            text=get_home_message(sp.user["class_let"]),
            reply_markup=get_main_keyboard(sp.user["class_let"])
    )

@dp.callback_query(F.data == "home")
async def home_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–í–æ–∑–∞—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª."""
    await query.message.edit_text(
        text=get_home_message(sp.user["class_let"]),
        reply_markup=get_main_keyboard(sp.user["class_let"])
    )

@dp.callback_query(F.data == "other")
async def other_callback(query: CallbackQuery, sp: SPMessages) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–æ–ø–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await query.message.edit_text(
        text=get_status_message(sp, _TIMETAG_PATH),
        reply_markup=get_other_keyboard(sp.user["class_let"]),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
# ====================

def send_error_messsage(exception: ErrorEvent, sp: SPMessages) -> str:
    """–û—Ç–ø—Ä–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Data:
        user_name => –ö—Ç–æ –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É.
        user_id => –ö–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É.
        class_let => –ö –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å –æ—Ç–Ω–æ—Å–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        chat_id => –ì–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞.
        exception => –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏.
        action => Callback data –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É.

    Args:
        exception (ErrorEvent): –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ aiogram.
        sp (SPMessage): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—à–∏–±–∫–µ –≤ –±–æ—Ç–µ.
    
    """
    if exception.update.callback_query is not None:
        action = f"-- –î–∞–Ω–Ω—ã–µ: {exception.update.callback_query.data}"
        message = exception.update.callback_query.message
    else:
        action = f"-- –¢–µ–∫—Å—Ç: {exception.update.message.text}"
        message = exception.update.message

    user_name = message.from_user.first_name
    chat_id = message.chat.id

    return ("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."
        f"\n-- –í–µ—Ä—Å–∏—è: {_BOT_VERSION}"
        "\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        f"\n-- –ò–º—è: {user_name}"
        f"\n-- –ö–ª–∞—Å—Å: {sp.user['class_let']}"
        f"\n-- ID: {chat_id}"
        "\n\nüö´ –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:"
        f"\n-- {exception.exception}"
        "\n\nüîç –î–æ–ø–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞–∏—Ü–∏—è"
        f"\n{action}"
        "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @milinuri –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
    )

@dp.errors()
async def error_handler(exception: ErrorEvent, sp: SPMessages) -> None:
    """–õ–æ–≤–∏—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    logger.exception(exception.exception)
    if exception.update.callback_query is not None:
        await exception.update.callback_query.message.answer(
            send_error_messsage(exception, sp)
        )
    else:
        await exception.update.message.answer(
            send_error_messsage(exception, sp)
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========

async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = Bot(TELEGRAM_TOKEN)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    for r in routers:
        logger.info("Include router: {} ...", r.name)
        dp.include_router(r)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
    logger.info("Start polling ...")
    await dp.start_polling(bot)
