"""–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏.

–°–û–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π
–Ω–∞–º–µ—Ä–µ–Ω–∏–π.
–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∏–∑–µ–Ω—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å—Ç–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è
–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–∂–µ –ø–æ—Å–ª–µ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—á–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –±–æ—Ç–∞.
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from sp.intents import Intent
from sp.messages import SPMessages
from sp_tg.messages import get_intent_status
from sp_tg.utils.intents import IntentObject, UserIntents

router = Router(name=__name__)

days_names = ("–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±")
_MAX_INTENTS = 9
_MIN_INTENT_NAME = 3
_MAX_INTENT_NAME = 15


# –°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏ -----------------------------------------------

INTENTS_INFO_MESSAGE = ("–≠—Ç–æ –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è."
    "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞."
    "\n–ù–∞–ø—Ä–∏–º–µ—Ä –≤ —Å—á—ë—Ç—á–∏–∫–∞—Ö –∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    "\n–û–Ω–∏ –±—É–¥—É—Ç –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Å—è –∑–¥–µ—Å—å –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞."
)

SET_INTENT_NAME_MESSAGE = ("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –¥–∞–π—Ç–µ –∏–º—è –≤–∞—à–µ–º—É –Ω–∞–º–µ—Ä–µ–Ω–∏—é."
    "\n–¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ª–∏—á–∞—Ç—å –µ–≥–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ."
    "\n–¢–∞–∫–∂–µ —ç—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
    "\n–î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º —á—Ç–æ-–Ω–±–∏—É–¥—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –æ—Ç 3-—Ö –¥–æ 15-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤."
    "\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel."
)

PARSE_INTENT_MESSAGE = ("‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø–∏—à–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è."
    "\n–í—ã –ø–æ–º–Ω–∏—Ç–µ –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã?"
    "\n–¢—É—Ç —Ç–∞–∫–æ–π –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø. –í—ã —Å–ª–æ–≤–Ω–æ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ."
    "\n–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞—Å—Å–∞–º–∏, —É—Ä–æ–∫–∞–º–∏, –¥–Ω—è–º–∏, –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏."
    "\n\nüî∂ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã:"
    "\n-- –í—Ç–æ—Ä–Ω–∏–∫ –º–∞—Ç–µ–º"
    "\n-- 9–≤ 312"
    "\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∑–∞–±—ã–ª–∏ –∫–∞–∫ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã - /tutorial"
    "\n/cancel - –ï—Å–ª–∏ –≤—ã –ü–µ—Ä–µ–¥—É–º–∞–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ."
)

INTENTS_REMOVE_MANY_MESSAGE = ("üßπ –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π"
    "\n–í–∞–º –Ω–∞–¥–æ–µ–ª–∏ –≤—Å–µ –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –≤—ã –±—ã—Å—Ç—Ä–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫?"
    "\n–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å!"
    "\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –æ–Ω–æ –∏—Å—á–µ–∑–Ω–µ—Ç."
    "\n–¢–∞–∫–∂–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë."
    "\n–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã."
    "\n\n–ù–∞–∂–º–∏—Ç–µ \"–∑–∞–≤–µ—Ä—à–∏—Ç—å\" –∫–∞–∫ –Ω–∞–∏–≥—Ä–∞–µ—Ç–µ—Å—å."
)

INTENTS_LIMIT_MESSAGE = ("üíº –≠—Ç–æ –≤–∞—à –ø—Ä–µ–¥–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π."
    "\nüßπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–∞–ª–∏—Ç–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è,"
    "–ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é."
    "\n\n/remove_intents - –î–ª—è –±—ã—Å—Ç—Ä–æ–π —á–∏—Å—Ç–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"
    "\n–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ."
)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π ----------------------------------------------------------

def get_intents_keyboard(intents: list[IntentObject]) -> InlineKeyboardMarkup:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É –Ω–∞–º–µ—Ä–µ–Ω–∏—é.
    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–º –ª–∏–º–∏—Ç.
    –ò–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.

    Buttons:
        intent:show:{name} => –ü–æ–∫–∑–∞–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏.
        intents:remove_mode => –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
        intent:add: => –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.
        home => –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.

    Args:
        intents (list[IntentObject]): –ù–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    
    """
    inlene_keyboard = [[]]

    if len(intents):
        for i, x in enumerate(intents):
            if i % 3 == 0:
                inlene_keyboard.append([])

            inlene_keyboard[-1].append(InlineKeyboardButton(
                    text=x.name, callback_data=f"intent:show:{x.name}"
                )
            )

        inlene_keyboard.append([InlineKeyboardButton(
                text="üßπ —É–¥–∞–ª–∏—Ç—å", callback_data="intents:remove_mode"
            )
        ])

    if len(intents) < _MAX_INTENTS:
        inlene_keyboard[-1].append(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="intent:add:"
            )
        )
    inlene_keyboard[-1].append(
        InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home")
    )
    return InlineKeyboardMarkup(inline_keyboard=inlene_keyboard)

def get_edit_intent_keyboard(intent_name: str) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    –ò—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.

    Buttons:
        intent:reparse:{name} => –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
        intent:remove:{name} => –£–¥–∞–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.
        intents => –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–º–µ—Ä–µ–Ω–∏–π.

    Args:
        intent_name (str): –ò–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
    
    """
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"intent:reparse:{intent_name}"
            )
    ],
    [
        InlineKeyboardButton(text="<", callback_data="intents"),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"intent:remove:{intent_name}"
        )
    ]])

def get_remove_intents_keyboard(intents: list[IntentObject]
) -> InlineKeyboardMarkup:
    """–í–æ–∑–∞—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –º–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    –¢–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Buttons:
        intent:remove_many:{name} => –£–¥–∞–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        intents => –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
        intents:remove_all => –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        intents (list[IntentObject]): –°–ø–∏—Å–æ–∫ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    
    """
    inlene_keyboard = [[]]
    if len(intents):
        for i, x in enumerate(intents):
            if i % 3 == 0:
                inlene_keyboard.append([])
            inlene_keyboard[-1].append(
                InlineKeyboardButton(
                    text=x.name, callback_data=f"intent:remove_many:{x.name}"
                )
            )
        inlene_keyboard.append([
            InlineKeyboardButton(
                text="üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="intents:remove_all"
            )
        ])

    inlene_keyboard[-1].append(
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="intents")
    )
    return InlineKeyboardMarkup(inline_keyboard=inlene_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π ----------------------------------------------------------

def get_intent_info(name: str, i: Intent) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    Args:
        name (str): –ò–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
        i (Intent): –≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    Returns:
    str: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏.
    
    """
    return (f"üíº –ù–∞–º–µ—Ä–µ–Ω–∏–µ \"{name}\":"
        f"\n\nüî∏ –ö–ª–∞—Å—Å—ã: {', '.join(i.cl)}"
        f"\nüî∏ –î–Ω–∏: {', '.join([days_names[x] for x in i.days])}"
        f"\nüî∏ –£—Ä–æ–∫–∏: {', '.join(i.lessons)}"
        f"\nüî∏ –ö–∞–±–∏–Ω–µ—Ç—ã: {', '.join(i.cabinets)}"
    )

def get_intents_message(intents: list[IntentObject]) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.

    –û–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    –î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.

    Args:
        intents (list[IntentObject]): –°–ø–∏—Å–æ–∫ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        str: –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    
    """
    message = f"üíº –í–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.\n\n{INTENTS_INFO_MESSAGE}\n"

    if len(intents) == 0:
        message += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π."

    else:
        for x in intents:
            message += f"\nüî∏ {x.name}: {get_intent_status(x.intent)}"

    if len(intents) < _MAX_INTENTS:
        message += ("\n\n‚úèÔ∏è /add_intent - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ."
            "\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )

    return message




@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """C–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")


class EditIntentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    States:
        name => –í—ã–±–æ—Ä –∏–º–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
        parse => –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ–Ω—Ç–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
    """

    name = State()
    parse = State()


class IntentCallback(CallbackData, prefix="intent"):
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º.

    action (str): –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º.
    name (str): –ò–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    Artions:
        add => –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.
        show => –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏.
        reparse => –ò–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
        remove => –£–¥–∞–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.
    """

    action: str
    name: str


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π ---------------------------------------------------

@router.message(Command("intents"))
async def manage_intents_handler(message: Message,
    intents: UserIntents
) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await message.answer(
        text=get_intents_message(intents.get()),
        reply_markup=get_intents_keyboard(intents.get())
    )

@router.callback_query(F.data=="intents")
async def intents_callback(query: CallbackQuery, intents: UserIntents) -> None:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await query.message.edit_text(
        text=get_intents_message(intents.get()),
        reply_markup=get_intents_keyboard(intents.get())
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è --------------------------------------------------

@router.callback_query(IntentCallback.filter(F.action=="add"))
async def add_intent_callback(query: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ."""
    await state.set_state(EditIntentStates.name)
    await query.message.edit_text(SET_INTENT_NAME_MESSAGE)

@router.message(Command("add_intent"))
async def add_intent_handler(
    message: Message, state: FSMContext, intents: UserIntents
) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–µ–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    """
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    if len(intents.get()) >= _MAX_INTENTS:
        await message.answer(INTENTS_LIMIT_MESSAGE,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üóëÔ∏è —É–¥–∞–ª–∏—Ç—å", callback_data="intents:remove_mode")
        ]]))
    else:
        await state.set_state(EditIntentStates.name)
        await message.answer(SET_INTENT_NAME_MESSAGE)

@router.message(EditIntentStates.name)
async def intent_name_handler(message: Message, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è."""
    name = message.text.lower().strip()

    # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω—É–∂–Ω–æ–π
    if len(name) < _MIN_INTENT_NAME or len(name) > _MAX_INTENT_NAME:
        await message.answer(
            text="–ò–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3-—Ö –¥–æ 15-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤."
        )

    else:
        await state.update_data(name=name)
        await state.set_state(EditIntentStates.parse)
        await message.answer(text=PARSE_INTENT_MESSAGE)

@router.message(EditIntentStates.parse)
async def parse_intent_handler(
    message: Message, state: FSMContext, intents: UserIntents, sp: SPMessages
) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ä—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è."""
    i = Intent.parse(sp.sc, message.text.lower().strip().split())
    name = (await state.get_data())["name"]
    intents.add(name, i)
    await state.clear()
    await message.answer(
        text=get_intents_message(intents.get()),
        reply_markup=get_intents_keyboard(intents.get())
    )

# –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è ----------------------------------------------------

@router.callback_query(IntentCallback.filter(F.action=="show"))
async def show_intent_callback(
    query: CallbackQuery, intents: UserIntents, callback_data: IntentCallback
) -> None:
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏."""
    intent = intents.get_intent(callback_data.name)
    if intent is None:
        await query.message.edit_text(text="‚ö†Ô∏è –ù–µ–ø—Ä–∞–∏–≤–ª—å–Ω–æ–µ –∏–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è")
    else:
        await query.message.edit_text(
            text=get_intent_info(callback_data.name, intent),
            reply_markup=get_edit_intent_keyboard(callback_data.name)
        )

@router.callback_query(IntentCallback.filter(F.action=="remove"))
async def remove_intent_callback(
    query: CallbackQuery, intents: UserIntents, callback_data: IntentCallback
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏."""
    intents.remove(callback_data.name)
    await query.message.edit_text(
        text=get_intents_message(intents.get()),
        reply_markup=get_intents_keyboard(intents.get())
    )

@router.callback_query(IntentCallback.filter(F.action=="reparse"))
async def reparse_intent_callback(
    query: CallbackQuery, intents: UserIntents, callback_data: IntentCallback,
    state: FSMContext
) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏—è."""
    await state.set_state(EditIntentStates.parse)
    await state.update_data(name=callback_data.name)
    await query.message.edit_text(text=PARSE_INTENT_MESSAGE)


# –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π -----------------------------------------------------

@router.message(Command("remove_intents"))
async def intents_remove_mode_handler(
    message: Message, intents: UserIntents
) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π."""
    await message.answer(
        text=INTENTS_REMOVE_MANY_MESSAGE,
        reply_markup=get_remove_intents_keyboard(intents.get())
    )

@router.callback_query(F.data=="intents:remove_mode")
async def intents_remove_mode_callback(
    query: CallbackQuery, intents: UserIntents
) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤ —Ä–µ–∂–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π."""
    await query.message.edit_text(
        text=INTENTS_REMOVE_MANY_MESSAGE,
        reply_markup=get_remove_intents_keyboard(intents.get())
    )

@router.callback_query(IntentCallback.filter(F.action=="remove_many"))
async def remove_many_intent_callback(
    query: CallbackQuery, intents: UserIntents, callback_data: IntentCallback
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è."""
    intents.remove(callback_data.name)
    await query.message.edit_text(
        text=INTENTS_REMOVE_MANY_MESSAGE,
        reply_markup=get_remove_intents_keyboard(intents.get())
    )

@router.callback_query(F.data=="intents:remove_all")
async def intents_set_remove_mode_callback(
    query: CallbackQuery, intents: UserIntents
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ–Ω –∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è."""
    intents.remove_all()
    await query.message.edit_text(
        text=get_intents_message(intents.get()),
        reply_markup=get_intents_keyboard(intents.get())
    )
