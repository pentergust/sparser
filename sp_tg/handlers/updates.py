"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
–ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–µ–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
"""

from typing import Optional, Union

from aiogram import Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from sp.intents import Intent
from sp.messages import SPMessages, send_update
from sp.users.storage import User
from sp_tg.messages import get_intent_status
from sp_tg.utils.intents import UserIntents

router = Router(name=__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
_MAX_UPDATE_MESSAGE_LENGTHT = 4000


class UpdatesCallback(CallbackData, prefix="updates"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    action (str): back, mext, last, switch.

    - back: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥.
    - next: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–ø–µ—Ä—ë–¥.
    - last: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - swith: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –æ–±—â–µ–≥–æ –Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞.

    page (int): –¢–µ–∫—É—â–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    cl (str): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    intent (str): –ò–º—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    action: str
    page: int
    cl: str
    intent: str


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =======================

def get_updates_keyboard(
    page: int,
    updates: list[dict],
    cl: Optional[str],
    intents: UserIntents,
    intent_name: str = ""
) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å –æ–±—â–µ–≥–æ –Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    Buttons:

    - home => –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—è –±–æ—Ç–∞.
    - updates:back:{page}:{cl} => –ü–µ—Ä–µ—â–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥.
    - updates:switch:0:{cl} => –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    - updates:next:{page}:{cl} => –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–ø–µ—Ä—ë–¥.
    - updates:last:0:{cl} => –ü–µ—Ä–µ—Ä–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.

    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    :type page: int
    :param update: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    :type update: list[dict]
    :param cl: –ö–∞–∫–æ–π –∫–ª–∞—Å—Å –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :type cl: str
    :param intents: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :type intents: UserIntents
    :param intent_name: –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
    :type intent_name: Optional[intent]
    :return: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    :rtype: InlineKeyboardMarkup
    """
    # –±–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    inline_keyboard = [
        [
            InlineKeyboardButton(text="üè†", callback_data="home"),
            InlineKeyboardButton(
                text="‚óÅ",
                callback_data=f"updates:back:{page}:{cl}:{intent_name}"
            ),
            InlineKeyboardButton(
                text=f"{page+1}/{len(updates)}",
                callback_data=f"updates:switch:0:{cl}:{intent_name}",
            ),
            InlineKeyboardButton(
                text="‚ñ∑",
                callback_data=f"updates:next:{page}:{cl}:{intent_name}"
            ),
        ]
    ]

    # –î–æ–ø–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    for i, x in enumerate(intents.get()):
        if i % 3 == 0:
            inline_keyboard.append([])

        if x.name == intent_name:
            inline_keyboard[-1].append(InlineKeyboardButton(
                text=f"‚úÖ {x.name}", callback_data=f"updates:last:0:{cl}:")
            )
        else:
            inline_keyboard[-1].append(InlineKeyboardButton(
                text=f"‚öôÔ∏è {x.name}",
                callback_data=f"updates:last:0:{cl}:{x.name}"
                )
            )

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def get_updates_message(
    update: Optional[dict[str, Union[int, list[dict]]]]=None,
    cl: Optional[str]=None,
    intent: Optional[Intent]=None
) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é send_update –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∞–ø–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    –Ω–∞–º–µ—Ä–µ–Ω–∏—è.

    :param update: –°—Ç—Ä–∞–Ω—Ü–∏–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–π–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    :type update: Optional[dict[str, Union[int, list[dict]]]]
    :param cl: –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    :type cl: Optional[str]
    :param intent: –≠–∫–∑–µ–º–ø–ª—è—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    :type intent: Optional[Intent]
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    :rtype: str
    """
    message = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "
    message += " –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n" if cl is None else f" –¥–ª—è {cl}:\n"
    if intent is not None:
        message += f"‚öôÔ∏è {get_intent_status(intent)}\n"

    if update is not None:
        update_text = send_update(update, cl=cl)

        if len(update_text) > _MAX_UPDATE_MESSAGE_LENGTHT:
            message += "\nüìö –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        else:
            message += update_text
    else:
        message += "‚ú® –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    return message


# –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
# ===============

@router.message(Command("updates"))
async def updates_handler(message: Message, sp: SPMessages,
    intents: UserIntents
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

    –ê —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    updates = sp.sc.updates
    await message.answer(
        text=get_updates_message(updates[-1] if len(updates) else None),
        reply_markup=get_updates_keyboard(max(len(updates) - 1, 0),
            updates, None, intents
        )
    )


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ====================

@router.callback_query(UpdatesCallback.filter())
async def updates_callback(
    query: CallbackQuery, sp: SPMessages, callback_data: UpdatesCallback,
    intents: UserIntents, user: User
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Å–º—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç–∞—Ä —Å –æ–±—â–µ–≥–æ –Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞.
    - –ü–µ–µ—Ä–º–µ—â–∞–µ—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ—à–∞—Ç—å—Å—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥.
    """
    # –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∞/–≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–Ω–∏—è
    if callback_data.action == "switch":
        cl = user.data.cl if callback_data.cl == "None" else None
    else:
        cl = None if callback_data.cl == "None" else callback_data.cl

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    intent = intents.get_intent(callback_data.intent)

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–ª–∞—Å—Å –∏ –≤—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if cl is not None and user.data.cl:
        if intent is not None:
            intent = intent.reconstruct(sp.sc, cl=cl)
        else:
            intent = sp.sc.construct_intent(cl=cl)

    # –ï—Å–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if intent is None:
        updates = sp.sc.updates
    # –ï—Å–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω—Ä, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    else:
        updates = sp.sc.get_updates(intent)
    i = max(min(int(callback_data.page), len(updates) - 1), 0)

    # –ï—Å–ª–∏ –≤ —Ä—É–∑–µ–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if len(updates):
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—É—é –∑–∞–ø–∏—Å—å
        if callback_data.action in ("last", "switch"):
            i = len(updates) - 1

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å
        elif callback_data.action == "next":
            i = (i + 1) % len(updates)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—à—É—é –∑–∞–ø–∏—Å—å
        elif callback_data.action == "back":
            i = (i - 1) % len(updates)

        update = updates[i]
    else:
        update = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.edit_text(
        text=get_updates_message(update, cl, intent),
        reply_markup=get_updates_keyboard(
            i, updates, cl, intents, callback_data.intent
        )
    )
