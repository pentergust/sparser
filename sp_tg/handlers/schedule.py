"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–Ω–∞–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ
–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
"""

from datetime import datetime

from aiogram import Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message

from sp.intents import Intent
from sp.messages import SPMessages
from sp.users.storage import User
from sp_tg.keyboards import (
    get_sc_keyboard,
    get_select_day_keyboard,
    get_week_keyboard,
)
from sp_tg.utils.days import get_relative_day

router = Router(name=__name__)


# Callback –¥–∞–Ω–Ω—ã–µ
# ===============

class ScCallback(CallbackData, prefix="sc"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    cl (str): –ö–ª–∞—Å—Å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    day (str): –î–ª—è –∫–∞–∫–æ–≥–æ –¥–Ω—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

    - 0-5: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—É–±–±–æ—Ç–∞.
    - today: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
    - week: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
    """

    cl: str
    day: str

class SelectDayCallback(CallbackData, prefix="select_day"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    cl (str): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """

    cl: str


# –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
# ===============

@router.message(Command("week"))
async def week_sc_command(message: Message, sp: SPMessages, user: User):
    """–ü–æ–ª—É—á–∞—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    today = datetime.today().weekday()
    tomorrow = sp.get_current_day(sp.sc.construct_intent(days=today). user)
    relative_day = get_relative_day(today, tomorrow)
    await message.answer(
        text=sp.send_lessons(
            Intent.construct(
                sp.sc, days=[0, 1, 2, 3, 4, 5], cl=user.data.cl
            ),
            user
        ),

        reply_markup=get_sc_keyboard(user.data.cl, relative_day)
    )


# –û–ø–∏—Å–∞–Ω–∏—è Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# ==============================

@router.callback_query(ScCallback.filter())
async def sc_callback(
    query: CallbackQuery, callback_data: ScCallback, sp: SPMessages,
    user: User
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    if callback_data.day == "week":
        text = sp.send_lessons(
            Intent.construct(
                sp.sc, days=[0, 1, 2, 3, 4, 5], cl=callback_data.cl
            ),
            user
        )
        today = datetime.today().weekday()
        tomorrow = sp.get_current_day(sp.sc.construct_intent(days=today), user)
        relative_day = get_relative_day(today, tomorrow)
        reply_markup = get_sc_keyboard(callback_data.cl, relative_day)

    # –†–∞—Å–∏–ø—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
    elif callback_data.day == "today":
        text = sp.send_today_lessons(
            Intent.construct(sp.sc,
                cl=callback_data.cl
            ),
            user
        )
        reply_markup = get_week_keyboard(callback_data.cl)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    else:
        text = sp.send_lessons(
            Intent.construct(
                sp.sc, cl=callback_data.cl, days=int(callback_data.day)
            ),
            user
        )
        reply_markup = get_week_keyboard(callback_data.cl)

    await query.message.edit_text(text=text, reply_markup=reply_markup)

@router.callback_query(SelectDayCallback.filter())
async def select_day_callback(
    query: CallbackQuery, callback_data: ScCallback, sp: SPMessages,
    user: User
):
    """–û—Ç–æ–±—Ä–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤."""
    today = datetime.today().weekday()
    tomorrow = sp.get_current_day(sp.sc.construct_intent(days=today), user)
    relative_day = get_relative_day(today, tomorrow)
    await query.message.edit_text(
        text=f"üìÖ –Ω–∞ ...\nüî∂ –î–ª—è {callback_data.cl}:",
        reply_markup=get_select_day_keyboard(callback_data.cl, relative_day),
    )
