"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ
–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
"""

from aiogram import Router
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message

from sp.db import User
from sp.platform import Platform
from sp_tg.keyboards import (
    get_sc_keyboard,
    get_select_day_keyboard,
    get_week_keyboard,
)

router = Router(name=__name__)


# Callback –¥–∞–Ω–Ω—ã–µ
# ===============


class ScCallback(CallbackData, prefix="sc"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    cl (str): –ö–ª–∞—Å—Å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    day (str): –î–ª—è –∫–∞–∫–æ–≥–æ –¥–Ω—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

    - 0-5: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—É–±–±–æ—Ç–∞.
    - today: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
    - week: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é.
    """

    cl: str
    day: str


class SelectDayCallback(CallbackData, prefix="select_day"):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""

    cl: str


# –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
# ===============


@router.message(Command("week"))
async def week_sc_command(
    message: Message, user: User, platform: Platform
) -> None:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    relative_day = platform.relative_day(user)
    await message.answer(
        text=platform.lessons(
            user,
            platform.view.sc.construct_intent(
                days=[0, 1, 2, 3, 4, 5], cl=user.cl
            ),
        ),
        reply_markup=get_sc_keyboard(user.cl, relative_day),
    )


# –û–ø–∏—Å–∞–Ω–∏—è Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# ==============================


@router.callback_query(ScCallback.filter())
async def sc_callback(
    query: CallbackQuery,
    callback_data: ScCallback,
    user: User,
    platform: Platform,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å."""
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    if callback_data.day == "week":
        text = platform.lessons(
            user,
            platform.view.sc.construct_intent(
                days=[0, 1, 2, 3, 4, 5], cl=user.cl
            ),
        )
        relative_day = platform.relative_day(user)
        reply_markup = get_sc_keyboard(callback_data.cl, relative_day)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
    elif callback_data.day == "today":
        text = platform.today_lessons(
            user, platform.view.sc.construct_intent(cl=callback_data.cl)
        )
        reply_markup = get_week_keyboard(callback_data.cl)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    else:
        text = platform.lessons(
            user,
            platform.view.sc.construct_intent(
                cl=callback_data.cl, days=int(callback_data.day)
            ),
        )
        reply_markup = get_week_keyboard(callback_data.cl)

    await query.message.edit_text(text=text, reply_markup=reply_markup)


@router.callback_query(SelectDayCallback.filter())
async def select_day_callback(
    query: CallbackQuery,
    callback_data: ScCallback,
    user: User,
    platform: Platform,
) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤."""
    relative_day = platform.relative_day(user)
    await query.message.edit_text(
        text=f"üìÖ –Ω–∞ ...\nüî∂ –î–ª—è {callback_data.cl}:",
        reply_markup=get_select_day_keyboard(callback_data.cl, relative_day),
    )
