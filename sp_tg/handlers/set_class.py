"""–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ
–∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

–ö–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–≤—Å–µ–º–µ—Å—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–æ–µ–ª–µ —É–¥–æ–±–Ω–æ–≥–æ
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–± –±–æ—Ç–∞.
"""

from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command, CommandObject
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from sp.messages import SPMessages
from sp.users.storage import User
from sp_tg.keyboards import PASS_SET_CL_MARKUP, get_main_keyboard
from sp_tg.messages import SET_CLASS_MESSAGE, get_home_message
from sp_tg.utils.days import get_relative_day

router = Router(name=__name__)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞
# pass => –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É –∫–ª–∞—Å—Å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å None
# cl_features => –°–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å
BACK_SET_CL_MARKUP = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÅ", callback_data="set_class"),
            InlineKeyboardButton(text="–ë–µ–∑ –∫–ª–∞—Å—Å–∞", callback_data="pass"),
        ]
    ]
)


# –ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞–≤—à–∏–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–±—É–∂–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∫–∞—â—ã–≤–∞–∏—Ç —Å–≤–æ–π –∫–ª–∞—Å—Å
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
CL_FEATURES_MESSAGE = ("üåü –ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–µ—Ç–µ –∫–ª–∞—Å—Å, —Ç–æ —Å–º–æ–∂–µ—Ç–µ:"
    "\n\n-- –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞, –∫–Ω–æ–ø–∫–æ–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    "\n-- –ù–µ —É–∫–∑–∞—ã–≤–∞—Ç—å –≤–∞—à –∫–ª–∞—Å—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö (–ø—Ä–∏–º. \"–ø–Ω\")."
    "\n-- –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞."
    "\n-- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞."
    "\n-- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—á—ë—Ç—á–∏–∫ cl/lessons."
    "\n\nüíé –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è."
)


# –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
# ===============

@router.message(Command("cl_features"))
async def restrictions_handler(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º—É—â–µ—Å—Ç–≤ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ."""
    await message.answer(text=CL_FEATURES_MESSAGE)

@router.message(Command("set_class"))
async def set_class_command(message: Message, sp: SPMessages, user: User,
    command: CommandObject
):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.

    - –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      –∫–ª–∞—Å—Å–æ–≤.
    - –£–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∞—Å—Å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
    - –ï—Å–ª–∏ –Ω–µ —É–∫–∑–∞–∞—Ç—å –∫–ª–∞—Å—Å, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏
      –ø–µ–ø–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞.
    """
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –∫–ª–∞—Å—Å –≤ –∫–æ–º–∞–Ω–¥–µ
    if command.args is not None:
        if user.set_class(command.args, sp.sc):
            today = datetime.today().weekday()
            tomorrow = sp.get_current_day(sp.sc.construct_intent(days=today))
            relative_day = get_relative_day(today, tomorrow)
            await message.answer(
                text=get_home_message(command.args),
                reply_markup=get_main_keyboard(command.args, relative_day)
            )
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        else:
            text = "üëÄ –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            text += f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ãe –∫–ª–∞—Å—Å—ã: {', '.join(sp.sc.lessons)}"
            await message.answer(text=text)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    else:
        user.unset_class()
        await message.answer(
            text=SET_CLASS_MESSAGE,
            reply_markup=PASS_SET_CL_MARKUP
        )

@router.message(Command("pass"))
async def pass_handler(message: Message, sp: SPMessages, user: User):
    """–û—Ç–≤—è–∑–∞—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    –ï—Å–ª–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–ª—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤
    None –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    today = datetime.today().weekday()
    tomorrow = sp.get_current_day(sp.sc.construct_intent(days=today))
    relative_day = get_relative_day(today, tomorrow)
    user.set_class(None, sp.sc)
    await message.answer(
        text=get_home_message(user.data.cl),
        reply_markup=get_main_keyboard(user.data.cl, relative_day),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ===============================

@router.callback_query(F.data == "cl_features")
async def cl_features_callback(query: CallbackData, sp: SPMessages):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
    await query.message.edit_text(
        text=CL_FEATURES_MESSAGE,
        reply_markup=BACK_SET_CL_MARKUP
    )

@router.callback_query(F.data == "set_class")
async def set_class_callback(query: CallbackQuery, user: User):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    –∫–ª–∞—Å—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    user.unset_class()
    await query.message.edit_text(
        text=SET_CLASS_MESSAGE, reply_markup=PASS_SET_CL_MARKUP
    )

@router.callback_query(F.data == "pass")
async def pass_class_callback(query: CallbackData, sp: SPMessages, user: User):
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞.

    –ö–∞–∫ –∏ –≤ —Å–ª—É—á–∞–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /pass.
    –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–≤–æ—Ç–µ–ª—è –≤ None –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±–æ—Ç–∞.
    """
    today = datetime.today().weekday()
    tomorrow = sp.get_current_day(sp.sc.construct_intent(days=today))
    relative_day = get_relative_day(today, tomorrow)
    user.set_class(None, sp.sc)
    await query.message.edit_text(
        text=get_home_message(user.data.cl),
        reply_markup=get_main_keyboard(user.data.cl, relative_day)
    )
