"""–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞—Å–ø–∏—Å–Ω–∞–∏—é.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—è–ª–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
–≠—Ç–æ –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–æ—Ç–∞.
–¢–µ–∫—Å—Ç–æ—ã–≤–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ.
–û–Ω–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–Ω–∞–∏–µ, —Ç–∞–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫
–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
"""

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from loguru import logger

from sp.platform import Platform
from sp.users.storage import User
from sp_tg.keyboards import get_main_keyboard, get_week_keyboard
from sp_tg.messages import get_home_message

router = Router(name=__name__)


def process_request(
    user: User, platform: Platform, request_text: str
) -> str | None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞–±–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å.
    –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫ –ø–æ —É—Ä–æ–∫–∞–º/–∫–∞–±–∏–Ω–µ—Ç–∞–º
    –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–π.

    :param user: –ö—Ç–æ –∑–∞—Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    :type user: User
    :param platform: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    :type platform: Platform
    :param request_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–∞—Å–ø–∏—Å–Ω–∞–∏—é.
    :type requets_text: str
    :return: –û—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    :rtype: str | None
    """
    intent = platform.view.sc.parse_intent(request_text.split())

    # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç–∞ –≤ –º–∞—à–∏–Ω—É –¥–ª—è —Å–ø–∞–º–∞
    # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫/–∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
    if len(intent.cabinets):
        text = platform.search(list(intent.cabinets)[-1], intent, True)

    elif len(intent.lessons):
        text = platform.search(list(intent.lessons)[-1], intent, False)

    elif intent.cl or intent.days:
        if intent.days:
            text = platform.lessons(user, intent)
        else:
            text = platform.today_lessons(user, intent)
    else:
        text = None

    return text


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
# ================


@router.message(Command("sc"))
async def sc_handler(
    message: Message, command: CommandObject, user: User, platform: Platform
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—é.

    –ü–æ–∑–≤–æ—è–ª–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –ø–æ—Å–ª–µ ``/sc [–∑–∞–ø—Ä–æ—Å]``.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∑–∞–∞–Ω –∫–ª–∞—Å—Å.
    """
    if command.args is not None:
        answer = process_request(user, platform, command.args)
        if answer is not None:
            await message.answer(text=answer)
        else:
            await message.answer(text="üëÄ –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")

    elif user.data.cl is not None:
        await message.answer(
            text=platform.today_lessons(user),
            reply_markup=get_week_keyboard(user.data.cl),
        )
    else:
        await message.answer(
            text="‚ö†Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."
        )


@router.message()
async def main_handler(
    message: Message, user: User, platform: Platform
) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.

    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    –í –ª–∏—á–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö.
    """
    if message.text is None:
        return

    text = message.text.strip().lower()

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–∫ –∫–ª–∞—Å—Å -> —Å–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
    if user.data.set_class:
        answer = process_request(user, platform, text)

        if answer is not None:
            await message.answer(text=answer)
        elif message.chat.type == "private":
            await message.answer(text="üëÄ –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–≤—ë–ª –∫–ª–∞—Å—Å
    elif text in platform.view.sc.lessons:
        logger.info("Set class {}", text)
        user.set_class(text, platform.view.sc)
        relative_day = platform.relative_day(user)
        await message.answer(
            text=get_home_message(user.data.cl),
            reply_markup=get_main_keyboard(user.data.cl, relative_day),
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤, –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    elif message.chat.type == "private":
        text = "üëÄ –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        text += f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ãe –∫–ª–∞—Å—Å—ã: {', '.join(platform.view.sc.lessons)}"
        await message.answer(text=text)
