"""
–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤.

Author: Milinuri Nirvalen
Ver: 4.3.1

Modules:
     csv: –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 hashlib: –†–∞–±–æ—Ç–∞ —Å —Ö–µ—à-—Å—É–º–º–∞–º–∏
    json: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
requests: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    Path: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
datetime: –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
  loguru: –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –æ—Ç–ª–∞–¥–∫–∏
"""

import csv
import hashlib
import json
import requests

from pathlib import Path
from datetime import datetime
from typing import Optional

from loguru import logger


url = "https://docs.google.com/spreadsheets/d/1pP_qEHh4PBk5Rsb7Wk9iVbJtTA11O9nTQbo1JFjnrGU/export?format=csv"
users_path = "sp_data/users.json"
sc_path = "sp_data/sc.json"
sc_updates_path = "sp_data/updates.json"
index_path = "sp_data/index.json"
user_data = {"class_let":"9–≥", "set_class": False, "last_parse": 0,
             "check_updates": 0}
timetable = [["08:00", "08:45"],
             ["08:55", "09:40"],
             ["09:55", "10:40"],
             ["10:55", "11:40"],
             ["11:50", "12:35"],
             ["12:45", "13:30"],
             ["13:40", "14:25"],
             ["14:35", "15:20"]]

days_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É"]


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
# ==================

def save_file(path: Path, data: dict) -> dict:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª.

    Args:
        path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        data (dict): –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    """

    if not path.exists():
        path.parents[0].mkdir(parents=True, exist_ok=True)

    with open(path, 'w') as f:
        f.write(json.dumps(data, indent=4, ensure_ascii=False))
    return data

def load_file(path: Path, data: Optional[dict] = {}):
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.

    Args:
        path (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è
        data (dict, optional): –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ—Ç—Ü—É—Ü—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞/–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    """

    if path.is_file():
        with open(path) as f:
            return json.loads(f.read())

    elif data is not None:
        return save_file(path, data)

    else:
        return {}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =======================

def get_day_hash(day_lessons: list) -> str:
    return hashlib.md5(("".join(day_lessons)).encode()).hexdigest()

def get_sc_updates(a: dict, b: dict) -> list:
    """–î–µ–ª–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è B –∏ A.

    –§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
        [–∫–ª–∞—Å—Å][–¥–µ–Ω—å] [–Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞, —Å—Ç–∞—Ä—ã–π —É—Ä–æ–∫, –Ω–æ–≤—ã–π —É—Ä–æ–∫]

    Args:
        a (dict): –ü–µ—Ä–≤–æ–µ (—Å—Ç–∞—Ä–æ–µ) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        b (dict): –í—Ç–æ—Ä–æ–µ (–Ω–æ–≤–æ–µ) —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    """

    # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –Ω–æ–≤–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    updates = [{} for x in range(6)]
    for k, v in b.items():
        if not k in a:
            continue

        # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –≤ –Ω–æ–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        av = a[k]
        for day, lessons in enumerate(v):
            if get_day_hash(lessons[1:]) == get_day_hash(av[day][1:]):
                continue

            a_lessons = av[day][1:]
            for i, l in enumerate(lessons[1:]):
                al = a_lessons[i] if i <= len(a_lessons)-1 else None
                if l != al:
                    if k not in updates[day]:
                        updates[day][k] = []

                    updates[day][k].append([i, al, l])
    return updates

def get_index(sp_lessons: dict, lessons_mode: Optional[bool] = True) -> dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤.

    –ò–Ω–¥e–∫—Å–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –≥–¥–µ –∫–∞–∫ –∫–ª—é—á –≤–º–µ—Å—Ç–æ
    –∫–ª–∞—Å—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Å—è –∫–∞–±–∏–Ω–µ—Ç—ã/—É—Ä–æ–∫–∏.

    –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: [–ö–ª–∞—Å—Å][–î–µ–Ω—å][–£—Ä–æ–∫–∏]
    l_index (l_mode True): [–£—Ä–æ–∫][–ö–∞–±–∏–Ω–µ—Ç][–ö–ª–∞—Å—Å][–î–µ–Ω—å][–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞]
    c_index (l_mode False): [–ö–∞–±–∏–Ω–µ—Ç][–£—Ä–æ–∫][–ö–ª–∞—Å—Å][–î–µ–Ω—å][–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞]

    Args:
        sp_lessons (dict): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ sp.lessons
        lessons_mode (bool, optional): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–ª—é—á —É—Ä–æ–∫–∏

    Returns:
        dict: –ò–Ω–¥–µ–∫—Å —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
    """
    logger.info("Get {}_index", "l" if lessons_mode else "c")
    res = {}
    for k, v in sp_lessons.items():
        for day, lessons in enumerate(v):
            for n, l in enumerate(lessons[1:]):
                l, c = l.lower().split(":")
                l = l.strip(" .")
                cs = c.split('/')

                for old, new in [('-', '='), (' ', '-'), (".-", '.')]:
                    l = l.replace(old, new)

                if lessons_mode:
                    obj = [l]
                    another = c
                else:
                    obj = cs
                    another = l

                for x in obj:
                    if x not in res:
                        res[x] = {}

                    if another not in res[x]:
                        res[x][another] = {}

                    if k not in res[x][another]:
                        res[x][another][k] = [[] for x in range(6)]

                    res[x][another][k][day].append(n)

    return res

def group_updates(updates: list, lessons: dict) -> list:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∞–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –û—Ä–∏–≥–∏–Ω–∞–ª, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ:
        –ö–ª–∞—Å—Å|–î–µ–Ω—å|–£—Ä–æ–∫| –î–æ -> –ü–æ—Å–ª–µ
        res[–î–µ–Ω—å][–ö–ª–∞—Å—Å]

    Args:
        updates (list): –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        lessons (dict): –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤

    Returns:
        list: –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –∏ –∫–ª–∞—Å—Å–∞–º
    """
    res = [{} for x in range(6)]

    for u in updates:
        cl, day, n, text = u.split("|")

        if cl not in res[int(day)]:
            res[int(day)][cl] = lessons[cl][int(day)][1:]

        old, new = text.split(" -> ")
        old = old.split(":")[0].strip()
        new = new.split(":")[0].strip()

        l = int(n)-(len(res[int(day)][cl])-1)
        if l > 0:
            res[int(day)][cl].extend(["~~~"]*l)

        res[int(day)][cl][int(n)] = f"* {old} -> {new}"

    return res


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ====================================

def send_cl_updates(cl_updates: list) -> str:
    """–í–æ–∑–≤—Ä–∞—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è.

    Args:
        cl_updates (list): –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞
    """
    message = ""
    for u in cl_updates:
        if str(u[1]) == "None":
            message += f"üîπ{u[0]} +{u[2]}\n"
            continue

        ol, oc = str(u[1]).split(':')
        l, c = str(u[2]).split(':')

        if ol == "---":
            message += f"üîπ{u[0]}: +{u[2]}\n"
        elif l == "---":
            message += f"üî∏{u[0]}: -{u[1]}\n"
        elif oc == c:
            message += f"{u[0]}: {ol} -> {l}:{c}\n"
        elif ol == l:
            message += f"{u[0]}: {l}:({oc} -> {c})\n"
        else:
            message += f"{u[0]}: {u[1]} -> {u[2]}\n"

    return message


class Schedule:
    """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –∏ —Å–ø–æ—Å–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º."""

    def __init__(self, sc_file: Optional[str] = sc_path,
                updates_file: Optional[str] = sc_updates_path,
                index_path: Optional[str] = index_path):
        super(Schedule, self).__init__()
        self.sc_path = Path(sc_file)
        self.updates_path = Path(updates_file)
        self.index_path = Path(index_path)

        self._l_index = None
        self._c_index = None
        self._updates = None
        self.schedule = self.get()
        self.lessons = self.schedule["lessons"]


    @property
    def l_index(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–∞—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        –ò–º–µ–Ω–∞ —É—Ä–æ–∫–æ–≤, –¥–ª—è –∫–æ–≥–æ –∏ –∫–æ–≥–¥–∞."""

        if not self._l_index:
            self._l_index = load_file(self.index_path)["l"]

        return self._l_index

    @property
    def c_index(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
        –ö–∞–∫–∏–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è, –¥–ª—è –∫–æ–≥–æ –∏ –∫–æ–≥–¥–∞."""

        if not self._c_index:
            self._c_index = load_file(self.index_path)["c"]

        return self._c_index

    @property
    def updates(self) -> list:
        """–í–æ–∑–≤—Ä–≤—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""
        if self._updates is None:
            self._updates = load_file(self.updates_path)

        return self._updates

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    # ===================

    def _parse_schedule(self, csv_file: str) -> dict:
        """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç CSV —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.

        Args:
            csv_file (str): CSV —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º
        """

        logger.info("Start parse schedule...")

        # class_index: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ –∏—Ö —Å—Ç–æ–ª–±—Ü–∞–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        #     lessons: –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è [–ö–õ–ê–°–°][–ù–æ–º–µ—Ä –î–Ω—è]
        #      dindex: –£–∫–∞–∑–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –Ω–∞—á–∞–ª–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        #         day: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0-5)
        #     lessons: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—Ä–æ–∫–µ–æ–≤ –≤ –¥–µ–Ω—å

        class_index = {}
        lessons = {}
        day = 0
        lessons_line = 8
        max_lessons = 8

        logger.info("Read CSV file...")
        reader = csv.reader(csv_file.decode("utf-8").splitlines())

        for i, row in enumerate(list(reader)):

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞—Å—Å–∞–º–∏
            if i == 1:
                logger.info("Get class_index...")
                for v, k in enumerate(row):
                    if k.replace(' ', ''):
                        class_index[k.lower()] = v
                continue

            # –û—Å—Ç–∞–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            # ---------------------------------------

            if row[1].isdigit():
                if int(row[1]) < lessons_line:
                    day += 1

                if int(row[1]) > max_lessons:
                    max_lessons = int(row[1])

                lessons_line = int(row[1])

            elif day:
                logger.debug("Break CSV file read")
                break

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
            # --------------------------

            if day:
                # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –∫–ª–∞—Å–∞–∞–º
                for k, v in class_index.items():

                    # –ï—Å–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    if k not in lessons:
                        lessons[k] = [[None] for x in range(6)]

                    l = row[v] or "none"
                    c = row[v+1] or "0"

                    lessons[k][day-1].append(f"{l}:{c}")


        # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à–∏ –¥–Ω–µ–π
        # ==================

        logger.info("Get day hashes and cleanup...")
        for class_let, days in lessons.items():
            n_days = []

            for day in days:

                while day[1:]:
                    if not day[-1]:
                        day.pop()
                        continue

                    l = day[-1].split(":")
                    if not l[0] or l[0] in ["---", "none"]:
                        day.pop()
                    else:
                        break

                day[0] = hashlib.md5(bytearray(f";".join(day[1:]),
                                               'utf-8')).hexdigest()

                n_days.append(day)
            lessons[class_let] = n_days

        return lessons

    def _update_diff_file(self, a: dict, b: dict) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        Args:
            a (dict): –°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            b (dict): –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        """
        logger.info("Update diff file...")
        sc_changes = load_file(self.updates_path, [None for x in range(15)])

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
        updates = get_sc_updates(a.get("lessons", {}), b["lessons"])
        if sum(map(len, updates)):
            sc_changes.pop(0)
            sc_changes.append({"time": b["last_parse"], "updates": updates})
            save_file(self.updates_path, sc_changes)

    def _update_index_files(self, sp_lessons: dict) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã c_index –∏ l_index

        Args:
            sp_lessons (dict): –£—Ä–æ–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        """
        logger.info("Udate index files...")
        index = {"l": get_index(sp_lessons),
                 "c": get_index(sp_lessons, lessons_mode=False)}
        save_file(self.index_path, index)

    def _process_update(self, t: dict) -> None:
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∏–Ω–¥–µ–∫—Å–æ–≤, —Ñ–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

        Args:
            t (dict): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
        """
        logger.info("Start schedule update...")
        now = datetime.now()
        timestamp = datetime.timestamp(now)

        # –°–∫–∞—á—è–∏–≤–∞–µ–º —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        try:
            logger.info("Download schedule csv_file")
            csv_file = requests.get(url).content
        except Exception as e:
            logger.exception(e)

            # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–∏–Ω—É—Ç—É
            t["next_update"] = timestamp+60
            self.save_file(self.sc_path, t)
            return

        old_t = t.copy()
        h = hashlib.md5(csv_file).hexdigest()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        if t.get("hash", "") == h:
            logger.info("Schedule is up to date")
        else:
            t["hash"] = h
            t["lessons"] = self._parse_schedule(csv_file)
            t["last_parse"] = datetime.timestamp(now)

            self._update_diff_file(old_t, t)
            self._update_index_files(t["lessons"])

        t["next_update"] = timestamp + 3600
        save_file(self.sc_path, t)

    def get(self, update: Optional[bool] = False) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

        Args:
            update (bool, optional): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–∞–ª–µ–Ω–∏–µ

        Returns:
            dict: –û–ø–∏—Å–∞–Ω–∏–µ
        """
        now = datetime.timestamp(datetime.now())
        t = load_file(self.sc_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        # ---------------------------

        if not t or t.get("next_update", 0) < now or update:
            self._process_update(t)

        return t


    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ==============================

    def search(self, target: str) -> dict:
        """–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        Args:
            target (str): –¶–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫, –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        res = {}

        if target in self.c_index:
            index = self.c_index
            index_type = "class_index"
        else:
            index = self.l_index
            index_type = "lessons_index"

        logger.info("Search {} in {}", target, index_type)
        if target in index:
            # k - –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞/–ø—Ä–µ–¥–º–µ—Ç cs - —Å–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Å–æ–≤
            for k, cs in index[target].items():
                if k not in res:
                    res[k] = [[[] for x in range(8)] for x in range(6)]

                for class_let, days in cs.items():
                    for day, ns in enumerate(days):
                        for n in ns:
                            res[k][day][n].append(class_let)

        return res


class SPMessages:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Schedule."""

    def __init__(self, uid: str, sc: Schedule,
                 users_path: Optional[str] = users_path):
        """
        Args:
            uid (str): –ö—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            sc (Schedule): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
            users_path (str, optional): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        super(SPMessages, self).__init__()

        self.uid = uid
        self.sc = sc
        self._users_path = Path(users_path)

        self.user = self.get_user()


    def send_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—É–∏—é –æ –ø–∞—Ä—Å–µ—Ä–µ."""
        last_parse = datetime.fromtimestamp(self.sc.schedule["last_parse"])
        next_update = datetime.fromtimestamp(self.sc.schedule["next_update"])

        res = "–í–µ—Ä—Å–∏—è sp: 4.3.1 (42)"
        res += "\n:: –ê–≤—Ç–æ—Ä: Milinuri Nirvalen (@milinuri)"
        res += f"\n:: –ö–ª–∞—Å—Å: {self.user['class_let']}"
        res += f"\n:: –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_parse.strftime('%d %h –≤ %H:%M')}"
        res += f"\n:: –ü—Ä–æ–≤–µ—Ä–∫–∞: {next_update.strftime('%d %h –≤ %H:%M')}"
        res += f"\n:: –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ~{len(self.sc.l_index)}"
        res += f"\n:: –ö–∞–±–∏–Ω–µ—Ç–æ–≤: ~{len(self.sc.c_index)}"
        res += f"\n:: –ö–ª–∞—Å—Å—ã: {', '.join(self.sc.lessons)}"

        return res


    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # ===============================

    def get_user(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        return load_file(self._users_path).get(self.uid, user_data)

    def save_user(self) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ self._users_path."""
        users = load_file(self._users_path, {})
        users.update({self.uid: self.user})
        save_file(self._users_path, users)
        logger.info("Save user: {}", self.uid)

    def set_class(self, cl: str) -> str:
        """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            cl (str): –¶–µ–ª–µ–≤–æ–π –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã
        """

        if cl in self.sc.lessons:
            self.user["class_let"] = cl
            self.user["set_class"] = True
            self.user["last_parse"] = self.sc.schedule["last_parse"]
            self.save_user()
            message = f"‚úè –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª–∞—Å—Å {cl}"

        else:
            message = "üîé –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"1–ê\"."
            message += f"\nüè´ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {'; '.join(self.sc.lessons)}"

        return message


    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ==============================

    def get_class(self, cl: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∞.
        –í–æ–≤—Ä–∞—â–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏–ª–∏ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return cl if cl in self.sc.lessons else self.user["class_let"]

    def get_lessons(self, cl: str = "") -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–ª–∞—Å—Å–∞."""
        return self.sc.lessons[self.get_class(cl)]

    def get_lessons_updates(self) -> set:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""

        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç –∏ —Ö–µ—à–∏ –¥–Ω–µ–π —Ç–æ–∂–µ
        if self.sc.schedule["last_parse"] == self.user["last_parse"]:
            return set()

        logger.info("Get lessons updates")
        updates = load_file(self.sc.updates_path)
        lessons = self.get_lessons()
        days = []

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.user["last_parse"] = self.sc.schedule["last_parse"]
        self.save_user()

        # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π–π
        for x in updates:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ —Å–º–æ—Ç—Ä–µ–ª–∏
            if x is None or x["time"] < self.user["last_parse"]:
                continue

            # –ü—Ä–æ–±–µ–∞–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            for day, day_updates in enumerate(x["updates"]):
                if self.user["class_let"] in day_updates:
                    days.append(day)

        return set(days)


    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # ======================

    def send_update(self, update: dict) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.

        Args:
            update (–¢–ò–ü): –°–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            cl (str, optional): –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞

        Returns:
            –¢–ò–ü: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        """
        t = datetime.fromtimestamp(update["time"]).strftime("%d.%m %H:%M")
        message = f"‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ {t}:\n"

        for day, day_updates in enumerate(update["updates"]):
            if not day_updates:
                continue

            message += f"\nüî∑ –ù–∞ {days_names[day]}\n"
            for u_cl, cl_updates in day_updates.items():
                message += f"–î–ª—è {u_cl}:"
                message += "\n" if len(cl_updates) > 1 else " "
                message += send_cl_updates(cl_updates)

        return message

    def send_day_lessons(self, today: int, cl: Optional[str] = None) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å.

        Args:
            today (int): –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-5)
            cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞

        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –¥–µ–Ω—å
        """
        if today > 5:
            today = 0

        cl = self.get_class(cl)
        lessons = self.get_lessons(cl)[today][1:]
        message = f"\nüî∂ –ù–∞ {days_names[today]}:"

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        for i, x in enumerate(lessons):
            tt = ""
            if i < len(timetable):
                tt = f" {timetable[i][0]}"

            message += f"\n{i+1}{tt} | {x}"

        return message

    def send_lessons(self, days: list[int], cl: Optional[str] = None) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤.

        Args:
            day (list[int]): –î–ª—è –∫–∞–∫–∏—Ö –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            cl (str, optional): –î–ª—è –∫–∞–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤

        Returns:
            str: –°–æ–æ–±–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤
        """

        days = set(filter(lambda x: x < 6, days)) or {0}
        cl = self.get_class(cl)
        message = f"üè´ –î–ª—è {cl}:"

        for day in days:
            message += f"{self.send_day_lessons(day, cl)}\n"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏–∏
        # ------------------------

        if self.user["set_class"]:
            updates = self.get_lessons_updates()

            if updates:
                message += f"\nüéâ –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"

                updates = updates - days
                if len(updates) < 3:
                    for day in updates:
                        message += f"{self.send_day_lessons(day)}\n"
                else:
                    message += f"\n–ù–∞ {', '.join(map(lambda x: days_names[x], updates))}."

        return message

    def send_today_lessons(self, cl: Optional[str] = "") -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
        –ï—Å–æ–∏ —É—Ä–æ–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.

        Args:
            cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞

        Returns:
            str: –°–æ–æ–±—â—ã–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        """

        now = datetime.now()
        today = min(now.weekday(), 5)
        lessons = self.get_lessons(cl)
        hour = int(timetable[len(lessons[today])-2][1].split(':')[0])

        if now.hour >= hour:
            today += 1

        if today > 5:
            today = 0

        return self.send_lessons([today], cl)

    def count_lessons(self, cabinets: Optional[bool] = False, cl: Optional[str] = "") -> str:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ —É—Ä–æ–∫–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤.

        Args:
            cabinets (bool, optional): –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã
                –≤–º–µ—Å—Ç–æ —É—Ä–æ–∫–æ–≤
            cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–¥—Å—á—ë—Ç

        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        if cl:
            cl = self.get_class(cl)

        message = ""
        res = {}

        if cabinets:
            index = self.sc.c_index
        else:
            index = self.sc.l_index

        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
        # -----------------------------------

        for obj, v in index.items():
            another = {}
            for a_k, a_v in v.items():
                if cl:
                    c = sum(map(len, a_v.get(cl, [])))
                else:
                    c = sum(map(lambda x: sum(map(len, x)), a_v.values()))

                if c:
                    another[a_k] = c

            c = sum(another.values())
            if c:
                if str(c) not in res:
                    res[str(c)] = {}

                res[str(c)][obj] = another

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # ------------------

        message = "‚ú® –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ "
        if cabinets:
            message += "–∫–∞–±–∏–Ω–µ—Ç—ã"
        else:
            message += "—É—Ä–æ–∫–∏"

        if cl:
            message += f" —É {cl}"


        for k, v in sorted(res.items(), key=lambda x: int(x[0]), reverse=True):
            message += f"\n\nüîò {k} —Ä–∞–∑(–∞):"

            for obj, another in v.items():
                if len(v) > 1:
                    message += "\n--"

                message += f" {obj}"

                for c, n in sorted(another.items(), key=lambda x: x[1], reverse=True):
                    if n == 1 and len(another) > 1:
                        message += f" üî∏{c}"
                    elif n > 1 and len(another) > 1:
                        message += f" üîπ{c}:{n}"
                    else:
                        message += f" {c}"

        return message


    # –ü–æ–∏—Å–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    # ==================

    def search_lesson(self, lesson: str, days: Optional[list[int]] = [], cl: Optional[str] = ""):
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± —É—Ä–æ–∫–µ.
        –ö–æ–≥–¥–∞ (–¥–µ–Ω—å), –≥–¥–µ (–∫–∞–±–∏–Ω–µ—Ç), –¥–ª—è –∫–æ–≥–æ (–∫–ª–∞—Å—Å), –∫–∞–∫–∏–º —É—Ä–æ–∫–æ–º.

        Args:
            lesson (str): –£—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
            days (list[int], optional): –î–ª—è –∫–∞–∫–∏—Ö –¥–Ω–µ–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
            cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏

        Returns:
            str: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """

        if lesson not in self.sc.l_index:
            message = f"‚ùó–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç."
            message += f"\nüè´ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {'; '.join(self.sc.l_index)}"
            return message

        if cl:
            cl = self.get_class(cl)

        res = self.sc.search(lesson)
        days = set(filter(lambda x: x < 6, days or [0, 1, 2, 3, 4, 5]))

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # ------------------

        search_str = f"üîé –ü–æ–∏—Å–∫ [{lesson}]"
        if days == {0, 1, 2, 3, 4, 5}:
            search_str += f" –∑–∞ –Ω–µ–¥–µ–ª—é"
        elif days:
            search_str += f" –∑–∞ {', '.join(map(lambda x: days_names[x], days))}"

        if cl:
            search_str += f" –¥–ª—è {cl}"

        message = search_str

        # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
        for cabinet, v in res.items():
            cabinet_str = ""

            # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–Ω—è–º
            for day in days:
                ln = v[day]
                day_str = ""

                for i, cs in enumerate(ln):
                    if cl and cl not in cs:
                        continue

                    if cs:
                        tt = ""

                        if i < len(timetable):
                            tt = f' {timetable[i][0]}'

                        day_str += f"\n{i+1}{tt}| {', '.join(cs)}"

                if day_str:
                    cabinet_str += f'\n‚è∞ –ù–∞ {days_names[day]}:{day_str}'
            if cabinet_str:
                message += f"\n\nüî∂ –ö–∞–±–∏–Ω–µ—Ç {cabinet}:{cabinet_str}"

        return message

    def search_cabinet(self, cabinet: str, lesson: Optional[str] = "", days: Optional[list[int]] = [], cl: Optional[str] = ""):
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–∞–±–∏–Ω–µ—Ç–µ.
        –ö–æ–≥–¥–∞ (–¥–µ–Ω—å), —á—Ç–æ (—É—Ä–æ–∫), –¥–ª—è –∫–æ–≥–æ (–∫–ª–∞—Å—Å), –∫–∞–∫–∏–º —É—Ä–æ–∫–æ–º.

        :param cabinet: –ö–∞–±–∏–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
        :param lesson: –î–ª—è –∫–∞–∫–æ–≥–æ —É—Ä–æ–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        :param days: –î–ª—è –∫–∞–∫–∏—Ö –¥–Ω–µ–π –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        :param cl: –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

        :returns: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞."""

        if cabinet not in self.sc.c_index:
            message = f"‚ùó–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –∫–∞–±–∏–Ω–µ—Ç."
            message += f"\nüè´ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã: {'; '.join(self,c_index)}"
            return message


        if cl is not None:
            cl = self.get_class(cl)
        days = set(filter(lambda x: x < 6, days or [0, 1, 2, 3, 4, 5]))
        data = self.sc.search(cabinet)

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        # ------------------

        message = f"üîé –ü–æ–∏—Å–∫ –∫–∞–±–Ω–µ—Ç–∞ [{cabinet}]"
        if days == {0, 1, 2, 3, 4, 5}:
            message += f" –∑–∞ –Ω–µ–¥–µ–ª—é"
        elif days:
            message += f" –∑–∞ {', '.join(map(lambda x: days_names[x], days))}"

        if cl:
            message += f" –¥–ª—è {cl}"

        if lesson:
            message += f" ({lesson})"

         # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
        res = [[[] for x in range(8)] for x in range(6)]
        for l, v in data.items():
            if lesson and lesson != l:
                continue

            # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–Ω—è–º
            for day in days:
                ln = v[day]

                for i, cs in enumerate(ln):
                    if cl and cl not in cs:
                        continue

                    if cs:
                        res[day][i].append(f"{l}:{', '.join(cs)}")

        for day, lessons in enumerate(res):
            if lessons:
                while lessons:
                    if not lessons[-1]:
                        lessons.pop()
                    else:
                        break

                day_str = ""
                for i, l in enumerate(lessons):
                    tt = ""

                    if i < len(timetable):
                        tt = f'–í {timetable[i][0]} '

                    if l:
                        day_str += f"\n{i+1} {tt}| {', '.join(l)}"
                    else:
                        day_str += f"\n{i+1} {tt}| ==="

                if day_str:
                    message += f"\n\nüî∂–ù–∞ {days_names[day]}:{day_str}"

        return message
