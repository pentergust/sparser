"""
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞.

Author: Milinuri Nirvalen
"""

from sp.messages import SPMessages

from typing import Optional

from vkbottle import Keyboard, KeyboardButtonColor, Text, Callback


# –î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–º–æ–π
TO_HOME = (
    Keyboard()
    .add(Callback("üè† –î–æ–º–æ–π", payload={"cmd": "home"}))
    .get_json()
)

# –î–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–¥–∞—Å—Å–∞
SET_CLASS = (
    Keyboard()
    .add(Text("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", payload={"cmd": "cl_features"}))
    .add(Text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        payload={"cmd": "pass"}), color=KeyboardButtonColor.NEGATIVE
    )
    .get_json()
)


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_home_keyboard(sp: SPMessages) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        dict: JSON –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    cl = sp.user["class_let"]
    kb = Keyboard()
    kb.add(Text("üè† –°–ø—Ä–∞–≤–∫–∞", payload={"cmd": "home"}))

    if cl is not None:
        kb.add(Text("üìö –Ω–∞ –Ω–µ–¥–µ–ª—é", payload={"cmd": "week"}))
        kb.add(Text(f"üìö –£—Ä–æ–∫–∏ {cl}", payload={"cmd": "sc"}),
            color=KeyboardButtonColor.PRIMARY
        )
        kb.row()
        kb.add(Text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", payload={"notify": "info"}))

    kb.add(Text("üìä –°—á—ë—Ç—á–∏–∫–∏", payload={"cmd": "counter"}))
    kb.add(Text("üìú –ò–∑–º–µ–Ω–µ–Ω–∏—è", payload={"group":"updates", "action": "last"}))

    kb.row()
    kb.add(Text("‚öôÔ∏è –°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å", payload={"cmd": "set_class"}))
    kb.add(Text("üå≤ –ò–Ω—Ñ–æ", payload={"cmd": "info"}))

    return kb.get_json()

def get_main_keyboard(sp: SPMessages) -> dict:
    """–í–æ–∑—Ä–≤—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.
    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–º–µ–Ω—ã –∫–ª–∞—Å—Å–∞.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        dict: JSON –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    return get_home_keyboard(sp) if sp.user["set_class"] else SET_CLASS


def get_notify_keyboad(sp: SPMessages) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–µ—Ç—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        enabled (bool): –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        hours (list, optional): –í –∫–∞–∫–æ–π —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    enabled = sp.user["notifications"]
    kb = Keyboard()
    kb.add(Text("üè† –î–æ–º–æ–π", payload={"cmd": "home"}))

    if not enabled:
        kb.add(Text("üîî –í–∫–ª—é—á–∏—Ç—å", payload={"notify": "switch"}),
            color=KeyboardButtonColor.POSITIVE
        )
    else:
        kb.add(Text("üîï –í—ã–∫–ª—é—á–∏—Ç—å", payload={"notify": "switch"}),
            color=KeyboardButtonColor.NEGATIVE
        )
        user_hours = set(sp.user["hours"])

        if user_hours:
            kb.add(Text("‚ùå C–±—Ä–æ—Å–∏—Ç—å", payload={"notify": "reset"}),
                color=KeyboardButtonColor.PRIMARY
            )

        kb.row()
        for i, x in enumerate(set(range(6, 18))):
            if i > 0 and i % 4 == 0:
                kb.row()

            if x in user_hours:
                kb.add(Text(x, payload={"notify": "toggle", "hour": x}),
                    color=KeyboardButtonColor.POSITIVE
                )
            else:
                kb.add(Text(x, payload={"notify": "toggle", "hour": x}))

    return kb.get_json()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤
# ====================

_COUNTERS = {
    "cl": "–ü–æ –∫–ª–∞—Å—Å–∞–º",
    "days": "–ü–æ –¥–Ω—è–º",
    "lessons": "–ü–æ —É—Ä–æ–∫–∞–º",
    "cabinets": "–ü–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º"
}

_TARGETS = {
    "none": "–ù–∏—á–µ–≥–æ",
    "cl": "–ö–ª–∞—Å—Å—ã",
    "days": "–î–Ω–∏",
    "lessons": "–£—Ä–æ–∫–∏",
    "cabinets": "–ö–∞–±–∏–Ω–µ—Ç—ã",
    "main": "–û–±—â–µ–µ"
}

_EXCLUDE_TARGETS = ("lessons", "cabinets")

def get_counter_keyboard(sp: SPMessages, counter: str, target: str) -> dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—á—ë—Ç—á–∏–∫–æ–≤.

    Args:
        sp (SPMessages): –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        counter (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
        target (str): –ù–∞–∑–≤–∞–Ω–µ–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

    Returns:
        dict: –°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    kb = Keyboard()

    # –ì—Ä—É–ø–ø—ã —Å—á—ë—Ç—á–∏–∫–æ–≤
    for k, name in _COUNTERS.items():
        if counter == k:
            continue

        kb.add(Text(name,
            payload={"cmd": "counter", "counter": k, "target": target}
        ))

    kb.row()

    # –¢–∏–ø—ã —Å—á—ë—Ç—á–∏–∫–æ–≤
    for k, name in _TARGETS.items():
        if target == k or counter == k:
            continue

        # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É–Ω–∫—Ç main –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ EXCLUDE
        if k == "main" and counter not in _EXCLUDE_TARGETS:
            continue

        # –ò—Å–∫–ª—é—á–∞–µ–º EXCLUDE –µ—Å–ª–∏ —Å—á—ë—Ç—á–∏–∫ EXCLUDE
        if counter in _EXCLUDE_TARGETS and k in _EXCLUDE_TARGETS:
            continue

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—á—ë—Ç—á–∏–∫ cl/lessons –µ—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if counter == "cl" and k == "lessons" and sp.user["class_let"] is None:
            continue

        kb.add(Text(name,
            payload={"cmd": "counter", "counter": counter, "target": k}
        ))

    kb.row()
    kb.add(Text("üè† –î–æ–º–æ–π", payload={"cmd": "home"}))

    return kb.get_json()


def get_updates_keyboard(
    page: int, total: int, cl: Optional[str]=None) -> dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–≤–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    Args:
        page (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        total (int): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        cl (str, optional): –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å —Å–æ–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    Returns:
        dict: –ì–æ—Ç–æ–≤–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """

    return (Keyboard()
        .add(Text("‚óÅ",
            payload={"group":"updates", "action": "back", "i": page, "cl": cl}))
        .add(Text(f"{page+1}/{total}",
            payload={"group":"updates", "action": "switch", "i": page, "cl": cl
        }))
        .add(Text("‚ñ∑",
            payload={"group":"updates", "action": "next", "i": page, "cl": cl}))
        .row()
        .add(Text("üè† –î–æ–º–æ–π", payload={"cmd": "home"}))
        .get_json()
    )
