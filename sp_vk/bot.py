"""
–í–∫ –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ SPMessages.

Author: Milinuri Nirvalen
Ver: 1.1.1 (13)
"""

from sp.filters import construct_filters
from sp.filters import parse_filters
from sp.messages import SPMessages
from sp.messages import send_update
from sp.messages import send_search_res

from typing import Optional

from sp_vk import config
from sp_vk import messages
from sp_vk import keyboards

from vkbottle.bot import Bot
from vkbottle.bot import Message


bot = Bot(token=config.VK_TOKEN)
days_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞",
              "—Å—É–±–±–æ—Ç–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è"]


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =======================

def process_request(sp: SPMessages, request_text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    Args:
        sp (SPMessages): –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        request_text (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """

    flt = parse_filters(sp.sc, request_text.split())

    # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –±–æ—Ç–∞ –≤ –º–∞—à–∏–Ω—É –¥–ª—è —Å–ø–∞–º–∞
    # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫/–∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
    if len(flt.cabinets):
        res = sp.sc.search(list(flt.cabinets)[-1], flt, True)
        text = send_search_res(flt, res)

    elif len(flt.lessons):
        res = sp.sc.search(list(flt.lessons)[-1], flt, False)
        text = send_search_res(flt, res)

    elif flt.cl or flt.days:
        text = sp.send_lessons(flt) if flt.days else sp.send_today_lessons(flt)

    else:
        text = "üëÄ –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å."

    return text


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# ========================

@bot.on.message(command="home")
@bot.on.message(payload={"cmd": "home"})
@bot.on.message(payload={"command": "start"})
async def home_handler(message: Message, sp: SPMessages):
    """–°–ø—Ä–∞–≤–∫–∞ –∏ –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞."""
    if sp.user["set_class"]:
        await message.answer(messages.send_home_message(sp),
            keyboard=keyboards.get_home_keyboard(sp)
        )
    else:
        await message.answer(messages.SET_CLASS,
            keyboard=keyboards.SET_CLASS
        )


# –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
# ====================

@bot.on.message(command="restrictions")
@bot.on.message(payload={"cmd": "restrictions"})
async def restrictions_handler(message: Message):
    """–°–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω—á–∏–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–≤—è–∑–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ."""
    await message.answer(messages.RESTRICTIONS)

@bot.on.message(command="info")
@bot.on.message(payload={"cmd": "info"})
async def info_handler(message: Message, sp: SPMessages):
    """C—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±–æ—Ç–∞."""
    await message.answer(sp.send_status()+messages.INFO)


# –°–º–µ–Ω–∞ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# =========================

@bot.on.message(command=("set_class", 1))
async def set_class_hadler(message: Message, sp: SPMessages, args: tuple[str]):
    """–Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cl = args[0].lower().strip()
    res = sp.set_class(None if cl in ("-", "pass") else cl)

    if res is True:
        text = messages.send_home_message(sp)
    else:
        text = "üëÄ –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

    await message.answer(text, keyboard=keyboards.get_main_keyboard(sp))

@bot.on.message(command="set_class")
@bot.on.message(payload={"cmd": "set_class"})
async def reset_user_hadler(message: Message, sp: SPMessages):
    """–ù–µ—è–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è."""
    if message.reply_message is not None:
        cl = message.reply_message.text
        res = sp.set_class(cl)

        if res:
            text = messages.send_home_message(sp)
            kb = keyboards.get_home_keyboard(sp)
        else:
            text = "üëÄ –¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            kb = keyboards.get_main_keyboard(sp)
    else:
        sp.reset_user()
        text = messages.SET_CLASS
        kb = keyboards.SET_CLASS

    await message.answer(text, keyboard=kb)

@bot.on.message(command="pass")
@bot.on.message(payload={"cmd": "pass"})
async def pass_handler(message: Message, sp: SPMessages):
    """–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∞—Å—Å–∞."""
    if not sp.user["set_class"]:
        sp.user["set_class"] = True
        sp.save_user()
        await message.answer(messages.send_home_message(sp),
            keyboard=keyboards.get_home_keyboard(sp)
        )


# –ü–æ–ª—É—á–µ–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
# ===================

@bot.on.message(command="sc")
@bot.on.message(payload_contains={"cmd": "sc"})
async def sc_handler(message: Message, sp: SPMessages):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤."""

    if message.reply_message is not None:
        request = message.reply_message.text.strip().lower()
        text = process_request(sp, request)

    elif sp.user["class_let"]:
        payload = message.get_payload_json()
        if payload is not None:
            cl = payload.get("cl", sp.user["class_let"])
            days = payload.get("days")
            flt = construct_filters(sp.sc, cl=cl, days=days)

            if days is not None:
                text = sp.send_lessons(flt)
            else:
                text = sp.send_today_lessons(flt)

        else:
            text = sp.send_today_lessons(construct_filters(sp.sc))

    else:
        text = "‚ö†Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."

    await message.answer(text)

@bot.on.message(command="week")
@bot.on.message(payload={"cmd": "week"})
async def week_sc_handler(message: Message, sp: SPMessages):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    if sp.user["class_let"]:
        flt = construct_filters(sp.sc, days=[0, 1, 2, 3, 4, 5])
        text = sp.send_lessons(flt)
    else:
        text = "‚ö†Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."

    await message.answer(text)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# =====================

@bot.on.message(command="notify")
@bot.on.message(payload={"notify": "info"})
async def notify_info_handler(message: Message, sp: SPMessages):
    """–û—Ç–ø—Ä–∞–≤–¥—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö."""
    if sp.user["class_let"]:
        text = messages.send_notifications_info(sp)
        kb = keyboards.get_notify_keyboad(sp)
    else:
        text = "‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å."
        kb = keyboards.get_home_keyboard(sp)

    await message.answer(text, keyboard=kb)

@bot.on.message(payload={"notify": "switch"})
async def switch_notify_handler(message: Message, sp: SPMessages):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    if sp.user["notifications"]:
        sp.user["notifications"] = False
    else:
        sp.user["notifications"] = True

    sp.save_user()
    await message.answer(messages.send_notifications_info(sp),
        keyboard=keyboards.get_notify_keyboad(sp)
    )

@bot.on.message(payload_contains={"notify": "toggle"})
async def toggle_notify_hour_handler(message: Message, sp: SPMessages):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —É–∫–∑–∞–∞–Ω–Ω—ã–π —á–∞—Å."""
    hour = int(message.get_payload_json()["hour"])

    if hour in sp.user["hours"]:
        sp.user["hours"].remove(hour)
        text = f"üîï –û—Ç–∫–ª—é—á–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ {hour} —á–∞—Å–æ–≤."
    else:
        sp.user["hours"].append(hour)
        text = f"üîî –í–∫–ª—é—á–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ {hour} —á–∞—Å–æ–≤."

    sp.save_user()
    await message.answer(text, keyboard=keyboards.get_notify_keyboad(sp))

@bot.on.message(payload={"notify": "reset"})
async def reset_nofify_handler(message: Message, sp: SPMessages):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–∞—Å—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    sp.user["hours"] = []
    sp.save_user()

    await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.",
        keyboard=keyboards.get_notify_keyboad(sp)
    )


# –°—á—ë—Ç—á–∏–∫–∏
# ========

@bot.on.message(command="counter")
@bot.on.message(payload_contains={"cmd": "counter"})
async def counter_handler(message: Message, sp: SPMessages):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—á—ë—Ç—á–∏–∫–æ–º."""
    payload = message.get_payload_json()

    if payload is not None:
        counter = payload.get("counter", "lessons")
        target = payload.get("target", "main")

        if counter == target:
            target = None

        if counter == "cl" and target == "lessons" and not sp.user["class_let"]:
            target = None

    else:
        counter = "lessons"
        target = "main"

    await message.answer(
        messages.send_counter_message(sp.sc, counter, target),
        keyboard=keyboards.get_counter_keyboard(sp, counter, target)
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
# ======================

@bot.on.message(command="updates")
@bot.on.message(payload={"updates": "last"})
async def updates_command(message: Message, sp: SPMessages):
    """–û–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."""

    text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"

    updates = sp.sc.updates
    if len(updates):
        text = send_update(updates[-1])
    else:
        text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    kb = keyboards.get_updates_keyboard(
        max(len(updates)-1, 0), len(updates)
    )
    await message.answer(text, keyboard=kb)

@bot.on.message(payload_contains={"updates": "switch"})
async def switch_updates_handler(message: Message, sp: SPMessages):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    –ú–µ–∂–¥—É –æ–±—â–∏–º –∏ –¥–ª—è –∫–ª–∞—Å—Å–∞.
    """

    text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "
    payload = message.get_payload_json()
    cl = sp.user["class_let"] if payload["cl"] is None else None

    # –î–æ–ø–ª–Ω—è–µ–º —à–∞–ø–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if cl is not None and sp.user["set_class"]:
        text += f"–¥–ª—è {cl}:\n"
        flt = construct_filters(sp.sc, cl=cl)
    else:
        text += "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
        flt = construct_filters(sp.sc)

    updates = sp.sc.get_updates(flt)

    if len(updates):
        text += send_update(updates[-1])
    else:
        text += "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."

    kb = keyboards.get_updates_keyboard(
        max(len(updates)-1, 0), len(updates), cl
    )
    await message.answer(text, keyboard=kb)

@bot.on.message(payload_contains={"updates": "next"})
async def next_updates_handler(message: Message, sp: SPMessages):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""

    text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "
    payload = message.get_payload_json()
    cl = payload["cl"]

    if cl is not None and sp.user["set_class"]:
        text += f"–¥–ª—è {cl}:\n"
        flt = construct_filters(sp.sc, cl=cl)
    else:
        text += "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
        flt = construct_filters(sp.sc)

    updates = sp.sc.get_updates(flt)
    i = (max(min(payload["i"], len(updates)-1), 0) + 1) % len(updates)
    text += send_update(updates[i])

    kb = keyboards.get_updates_keyboard(i, len(updates), cl)
    await message.answer(text, keyboard=kb)

@bot.on.message(payload_contains={"updates": "back"})
async def back_updates_handler(message: Message, sp: SPMessages):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""

    text = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è "
    payload = message.get_payload_json()
    cl = payload["cl"]

    if cl is not None and sp.user["set_class"]:
        text += f"–¥–ª—è {cl}:\n"
        flt = construct_filters(sp.sc, cl=cl)
    else:
        text += "–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n"
        flt = construct_filters(sp.sc)

    updates = sp.sc.get_updates(flt)
    i = (max(min(payload["i"], len(updates)-1), 0) - 1) % len(updates)
    text += send_update(updates[i])

    kb = keyboards.get_updates_keyboard(i, len(updates), cl)
    await message.answer(text, keyboard=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# ============================

@bot.on.private_message()
async def message_handler(message: Message, sp: SPMessages):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞—Å–ø–∏—Å–Ω–∞–∏—é."""
    uid = str(message.peer_id)
    text = message.text.strip().lower()

    if sp.user["set_class"]:
        await message.answer(process_request(sp, text))

    elif text in sp.sc.lessons:
        sp.set_class(text)
        await message.answer(messages.send_home_message(sp),
            keyboard=keyboards.get_home_keyboard(sp)
        )
